import colorama


class Varaibles:
    def __init__(self):
        #region Setting up global locals start		
        self.iatList = ''
        self.m  = ''
        self.mBool = ''
        self.mL = ''
        self.s = ''
        self.list_of_files = ''
        self.list_of_files32 = ''
        self.list_of_files64 = ''
        self.list_of_pe32 = ''
        self.list_of_pe64 = ''
        self.list_of_unk_files = ''
        self.current_arch = ''
        self.sharem_out_dir = ''
        self.emulation_verbose = ''
        self.labels = ''
        self.offsets = ''
        self.off_Label = ''
        self.off_PossibleBad = ''
        self.elapsed_time = ''
        self.pebPresent = ''
        self.doneAlready1 = ''
        self.syscallString = ''
        self.chMode = ''
        self.sections = ''
        self.numArgs = ''
        self.peName = ''
        self.modName = ''
        self.PEsList = ''
        self.PE_path = ''
        self.PEsList_Index = ''
        self.skipZero = ''
        self.numPE = ''
        self.skipPath = ''
        self.FoundApisAddress = ''
        self.FoundApisName = ''
        self.saveAPI = ''
        self.shellEntry = ''
        self.decodedBytes = ''
        self.maxZeroes = ''
        self.shellEntry = ''
        self.useDirectory = ''
        self.VP = ''
        self.VA = ''
        self.MA = ''
        self.GPA = ''
        self.pe = ''
        self.MemCpyAddress = ''
        self.VPl = ''
        self.VAl = ''
        self.GPAl = ''
        self.MAl = ''
        self.Remove = ''
        self.badChars = ''
        self.fname = ''
        self.entryPoint = ''
        self.VirtualAdd = ''
        self.ImageBase = ''
        self.vSize = ''
        self.startAddress = ''
        self.endAddy = ''
        self.gName = ''
        self.o = ''
        self.shOrg = ''
        self.shBody = ''
        self.shStub = ''
        self.shDec = ''
        self.t = ''
        self.sectionName = ''
        self.cs  = ''
        self.cs64  = ''
        self.directory = ''
        self.newpath  = ''
        self.PEtemp = ''
        self.PE_DLL = ''
        self.PE_DLLS  = ''
        self.PE_DLLS2 = ''
        self.paths = ''
        self.DLL_Protect = ''
        self.bit32 = ''
        self.PE_Protect = ''
        self.index = ''
        self.CheckallModules = ''
        self.present = ''
        self.new = ''
        self.new2 = ''
        self.deeperLevel = ''
        self.asciiMode = ''
        self.stringsTemp = ''
        self.stringsTempWide = ''
        self.pushStringsTemp = ''
        self.filename = ''
        self.filename2 = ''
        self.filenameRaw = ''
        self.skipExtraction = ''
        self.rawHex = ''
        self.rawData2 = ''
        self.useHash = ''
        self.known_arch = ''
        self.numArgs = ''
        self.rawBin = ''
        self.isPe = ''
        self.pointsLimit = ''
        self.maxDistance = ''
        self.useStringsFile = ''
        self.minStrLen = ''
        self.mEAX = ''
        self.mEBX = ''
        self.mEDX = ''
        self.mECX = ''
        self.mEBP = ''
        self.mESP = ''
        self.gDisassemblyText = ''
        self.gDisassemblyTextNoC = ''
        self.emulation_multiline = ''
        self.linesForward = ''
        self.bPushRet = ''
        self.bFstenv = ''
        self.bSyscall = ''
        self.bHeaven = ''
        self.bCallPop = ''
        self.bPrintEmulation = ''
        self.bDisassembly  = ''
        self.bAnaHiddenCallsDone = ''
        self.bAnaConvertBytesDone = ''
        self.bAnaFindStrDone = ''
        self.deobfShell  = ''
        self.fastMode = ''
        self.pebPoints = ''
        self.p2screen = ''
        self.configOptions = ''
        self.print_style = ''
        self.stubFile = ''
        self.sameFile = ''
        self.stubEntry = ''
        self.stubEnd = ''
        self.shellSizeLimit = ''
        self.conFile = ''
        self.workDir = ''
        self.bit32_argparse = ''
        self.save_bin_file = ''
        self.linesForward = ''
        self.linesBack = ''
        self.bytesForward = ''
        self.bytesBack = ''
        self.unencryptedShell = ''
        self.decoderShell = ''
        self.unencryptedBodyShell = ''
        self.sample = ''
        self.allObject = ''
        self.gDirectory = ''
        self.debugging = ''
        self.shHash = ''
        self.emuObj = ''
        self.patt = ''
        self.sBy = ''
        self.sh = ''
        self.IATs = ''
        self.syscallRawHexOverride = ''
        self.heavRawHexOverride = ''
        self.fstenvRawHexOverride = ''
        self.emuSyscallSelection = ''
        self.GoodStrings = ''
        self.toggList  = ''
        self.brawHex  = ''
        self.bstrLit = ''
        self.bfindString = ''
        self.bdeobfCode = ''
        self.bdeobfCodeFound  = ''
        self.bfindShell = ''
        self.bfindShellFound = ''
        self.bComments = ''
        self.shellBit = ''
        self.filename = ''
        # HookAPI Emulation Values = ''
        self.HandlesDict = ''
        self.HeapsDict = ''
        self.RegistryKeys = ''
        self.commandLine_arg = ''
        self.registry_values = ''
        self.registry_keys = ''
        # Sharemu values = ''
        self.artifacts = ''
        self.net_artifacts = ''
        self.file_artifacts = ''
        self.exec_artifacts = ''
        self.coverage_objects = ''
        self.programCounter = ''
        self.loggedList = ''
        self.logged_syscalls = ''
        self.logged_dlls = ''
        self.paramValues = ''
        self.network_activity = ''
        self.jmpInstructs = ''
        self.traversedAdds = ''
        self.coverageAdds = ''
        self.loadModsFromFile  = ''
        self.cleanStackFlag = ''
        self.stopProcess = ''
        self.cleanBytes = ''
        self.bad_instruct_count = ''
        
        #for json Dissasembly
        self.decoder = ''
        self.caller = ''
        
#########################################################
###   Functions used everywhere, put here to clean code
#########################################################

    def cleanColors(self,out):
        red,gre,yel,blu,mag,cya,whi,res,res2 = self.colors()
        out = out.replace(red, "")	
        out = out.replace(gre, "")	
        out = out.replace(yel, "")	
        out = out.replace(blu, "")	
        out = out.replace(mag, "")	
        out = out.replace(cya, "")	
        out = out.replace(whi, "")	
        out = out.replace(res, "")	
        return out
 
    def colors(self):
        red ='\u001b[31;1m'
        gre = '\u001b[32;1m'
        yel = '\u001b[33;1m'
        blu = '\u001b[34;1m'
        mag = '\u001b[35;1m'
        cya = '\u001b[36;1m'
        whi = '\u001b[37m'
        res = '\u001b[0m'
        res2 = '\u001b[0m'
        return red,gre,yel,blu,mag,cya,whi,res,res2
    