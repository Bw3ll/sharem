dict4_advapi32 =  {'GetUserNameA': (2, ['LPSTR', 'LPDWORD'], ['name', 'size'], 'BOOL'), 'GetUserNameW': (2, ['LPWSTR', 'LPDWORD'], ['name', 'size'], 'BOOL'), 'GetCurrentHwProfileA': (1, ['LPHW_PROFILE_INFOA'], ['pInfo'], 'BOOL'), 'GetCurrentHwProfileW': (1, ['LPHW_PROFILE_INFOW'], ['pInfo'], 'BOOL'), 'IsTextUnicode': (3, ['LPCVOID', 'INT', 'LPINT'], ['buf', 'len', 'flags'], 'BOOL'), 'AbortSystemShutdownA': (1, ['LPSTR'], ['lpMachineName'], 'BOOL'), 'AbortSystemShutdownW': (1, ['LPWSTR'], ['lpMachineName'], 'BOOL'), 'InitiateSystemShutdownExA': (6, ['LPSTR', 'LPSTR', 'DWORD', 'BOOL', 'BOOL', 'DWORD'], ['lpMachineName', 'lpMessage', 'dwTimeout', 'bForceAppsClosed', 'bRebootAfterShutdown', 'dwReason'], 'BOOL'), 'InitiateSystemShutdownExW': (6, ['LPWSTR', 'LPWSTR', 'DWORD', 'BOOL', 'BOOL', 'DWORD'], ['lpMachineName', 'lpMessage', 'dwTimeout', 'bForceAppsClosed', 'bRebootAfterShutdown', 'dwReason'], 'BOOL'), 'InitiateSystemShutdownA': (5, ['LPSTR', 'LPSTR', 'DWORD', 'BOOL', 'BOOL'], ['lpMachineName', 'lpMessage', 'dwTimeout', 'bForceAppsClosed', 'bRebootAfterShutdown'], 'BOOL'), 'InitiateSystemShutdownW': (5, ['LPWSTR', 'LPWSTR', 'DWORD', 'BOOL', 'BOOL'], ['lpMachineName', 'lpMessage', 'dwTimeout', 'bForceAppsClosed', 'bRebootAfterShutdown'], 'BOOL'), 'InitiateShutdownA': (5, ['char *', 'char *', 'DWORD', 'DWORD', 'DWORD'], ['name', 'message', 'seconds', 'flags', 'reason'], 'DWORD'), 'InitiateShutdownW': (5, ['WCHAR *', 'WCHAR *', 'DWORD', 'DWORD', 'DWORD'], ['name', 'message', 'seconds', 'flags', 'reason'], 'DWORD'), 'LogonUserA': (6, ['LPCSTR', 'LPCSTR', 'LPCSTR', 'DWORD', 'DWORD', 'PHANDLE'], ['lpszUsername', 'lpszDomain', 'lpszPassword', 'dwLogonType', 'dwLogonProvider', 'phToken'], 'BOOL'), 'LogonUserW': (6, ['LPCWSTR', 'LPCWSTR', 'LPCWSTR', 'DWORD', 'DWORD', 'PHANDLE'], ['lpszUsername', 'lpszDomain', 'lpszPassword', 'dwLogonType', 'dwLogonProvider', 'phToken'], 'BOOL'), 'CommandLineFromMsiDescriptor': (3, ['WCHAR *', 'WCHAR *', 'DWORD *'], ['szDescriptor', 'szCommandLine', 'pcchCommandLine'], 'DWORD'), 'RegisterWaitChainCOMCallback': (2, ['PCOGETCALLSTATE', 'PCOGETACTIVATIONSTATE'], ['call_state_cb', 'activation_state_cb'], 'void'), 'CredDeleteA': (3, ['LPCSTR', 'DWORD', 'DWORD'], ['TargetName', 'Type', 'Flags'], 'BOOL'), 'CredDeleteW': (3, ['LPCWSTR', 'DWORD', 'DWORD'], ['TargetName', 'Type', 'Flags'], 'BOOL'), 'CredEnumerateA': (4, ['LPCSTR', 'DWORD', 'DWORD *', 'PCREDENTIALA *'], ['Filter', 'Flags', 'Count', '*Credentials'], 'BOOL'), 'CredEnumerateW': (4, ['LPCWSTR', 'DWORD', 'DWORD *', 'PCREDENTIALW *'], ['Filter', 'Flags', 'Count', '*Credentials'], 'BOOL'), 'CredFree': (1, ['PVOID'], ['Buffer'], 'VOID'), 'CredReadA': (4, ['LPCSTR', 'DWORD', 'DWORD', 'PCREDENTIALA *'], ['TargetName', 'Type', 'Flags', 'Credential'], 'BOOL'), 'CredReadW': (4, ['LPCWSTR', 'DWORD', 'DWORD', 'PCREDENTIALW *'], ['TargetName', 'Type', 'Flags', 'Credential'], 'BOOL'), 'CredReadDomainCredentialsA': (4, ['PCREDENTIAL_TARGET_INFORMATIONA', 'DWORD', 'DWORD *', 'PCREDENTIALA *'], ['TargetInformation', 'Flags', 'Size', '*Credentials'], 'BOOL'), 'CredReadDomainCredentialsW': (4, ['PCREDENTIAL_TARGET_INFORMATIONW', 'DWORD', 'DWORD *', 'PCREDENTIALW *'], ['TargetInformation', 'Flags', 'Size', '*Credentials'], 'BOOL'), 'CredWriteA': (2, ['PCREDENTIALA', 'DWORD'], ['Credential', 'Flags'], 'BOOL'), 'CredWriteW': (2, ['PCREDENTIALW', 'DWORD'], ['Credential', 'Flags'], 'BOOL'), 'CredGetSessionTypes': (2, ['DWORD', 'LPDWORD'], ['persistCount', 'persists'], 'BOOL'), 'CredMarshalCredentialA': (3, ['CRED_MARSHAL_TYPE', 'PVOID', 'LPSTR *'], ['type', 'cred', 'out'], 'BOOL'), 'CredMarshalCredentialW': (3, ['CRED_MARSHAL_TYPE', 'PVOID', 'LPWSTR *'], ['type', 'cred', 'out'], 'BOOL'), 'CredUnmarshalCredentialA': (3, ['LPCSTR', 'PCRED_MARSHAL_TYPE', 'PVOID *'], ['cred', 'type', 'out'], 'BOOL'), 'CredUnmarshalCredentialW': (3, ['LPCWSTR', 'PCRED_MARSHAL_TYPE', 'PVOID *'], ['cred', 'type', 'out'], 'BOOL'), 'CredIsMarshaledCredentialW': (1, ['LPCWSTR'], ['name'], 'BOOL'), 'CredIsMarshaledCredentialA': (1, ['LPCSTR'], ['name'], 'BOOL'), 'MD4Init': (1, ['MD4_CTX *'], ['ctx'], 'void'), 'MD4Update': (3, ['MD4_CTX *', 'const unsigned char *', 'unsigned int'], ['ctx', 'buf', 'len'], 'void'), 'MD4Final': (1, ['MD4_CTX *'], ['ctx'], 'void'), 'CloseEncryptedFileRaw': (1, ['PVOID'], ['context'], 'void'), 'OpenEncryptedFileRawA': (3, ['LPCSTR', 'ULONG', 'PVOID *'], ['filename', 'flags', 'context'], 'DWORD'), 'OpenEncryptedFileRawW': (3, ['LPCWSTR', 'ULONG', 'PVOID *'], ['filename', 'flags', 'context'], 'DWORD'), 'ReadEncryptedFileRaw': (3, ['PFE_EXPORT_FUNC', 'PVOID', 'PVOID'], ['export', 'callback', 'context'], 'DWORD'), 'WriteEncryptedFileRaw': (3, ['PFE_IMPORT_FUNC', 'PVOID', 'PVOID'], ['import', 'callback', 'context'], 'DWORD'), 'BackupEventLogA': (2, ['HANDLE', 'LPCSTR'], ['hEventLog', 'lpBackupFileName'], 'BOOL'), 'BackupEventLogW': (2, ['HANDLE', 'LPCWSTR'], ['hEventLog', 'lpBackupFileName'], 'BOOL'), 'ClearEventLogA': (2, ['HANDLE', 'LPCSTR'], ['hEventLog', 'lpBackupFileName'], 'BOOL'), 'ClearEventLogW': (2, ['HANDLE', 'LPCWSTR'], ['hEventLog', 'lpBackupFileName'], 'BOOL'), 'CloseEventLog': (1, ['HANDLE'], ['hEventLog'], 'BOOL'), 'DeregisterEventSource': (1, ['HANDLE'], ['hEventLog'], 'BOOL'), 'EnableTraceEx': (9, ['LPCGUID', 'LPCGUID', 'TRACEHANDLE', 'ULONG', 'UCHAR', 'ULONGLONG', 'ULONGLONG', 'ULONG', 'PEVENT_FILTER_DESCRIPTOR'], ['provider', 'source', 'hSession', 'enable', 'level', 'anykeyword', 'allkeyword', 'enableprop', 'filterdesc'], 'ULONG'), 'EnableTrace': (5, ['ULONG', 'ULONG', 'ULONG', 'LPCGUID', 'TRACEHANDLE'], ['enable', 'flag', 'level', 'guid', 'hSession'], 'ULONG'), 'GetEventLogInformation': (5, ['HANDLE', 'DWORD', 'LPVOID', 'DWORD', 'LPDWORD'], ['hEventLog', 'dwInfoLevel', 'lpBuffer', 'cbBufSize', 'pcbBytesNeeded'], 'BOOL'), 'GetNumberOfEventLogRecords': (2, ['HANDLE', 'PDWORD'], ['hEventLog', 'NumberOfRecords'], 'BOOL'), 'GetOldestEventLogRecord': (2, ['HANDLE', 'PDWORD'], ['hEventLog', 'OldestRecord'], 'BOOL'), 'NotifyChangeEventLog': (2, ['HANDLE', 'HANDLE'], ['hEventLog', 'hEvent'], 'BOOL'), 'OpenBackupEventLogA': (2, ['LPCSTR', 'LPCSTR'], ['lpUNCServerName', 'lpFileName'], 'HANDLE'), 'OpenBackupEventLogW': (2, ['LPCWSTR', 'LPCWSTR'], ['lpUNCServerName', 'lpFileName'], 'HANDLE'), 'OpenEventLogA': (2, ['LPCSTR', 'LPCSTR'], ['uncname', 'source'], 'HANDLE'), 'OpenEventLogW': (2, ['LPCWSTR', 'LPCWSTR'], ['uncname', 'source'], 'HANDLE'), 'ReadEventLogA': (7, ['HANDLE', 'DWORD', 'DWORD', 'LPVOID', 'DWORD', 'DWORD *', 'DWORD *'], ['hEventLog', 'dwReadFlags', 'dwRecordOffset', 'lpBuffer', 'nNumberOfBytesToRead', 'pnBytesRead', 'pnMinNumberOfBytesNeeded'], 'BOOL'), 'ReadEventLogW': (7, ['HANDLE', 'DWORD', 'DWORD', 'LPVOID', 'DWORD', 'DWORD *', 'DWORD *'], ['hEventLog', 'dwReadFlags', 'dwRecordOffset', 'lpBuffer', 'nNumberOfBytesToRead', 'pnBytesRead', 'pnMinNumberOfBytesNeeded'], 'BOOL'), 'RegisterEventSourceA': (2, ['LPCSTR', 'LPCSTR'], ['lpUNCServerName', 'lpSourceName'], 'HANDLE'), 'RegisterEventSourceW': (2, ['LPCWSTR', 'LPCWSTR'], ['lpUNCServerName', 'lpSourceName'], 'HANDLE'), 'ReportEventW': (9, ['HANDLE', 'WORD', 'WORD', 'DWORD', 'PSID', 'WORD', 'DWORD', 'LPCWSTR *', 'LPVOID'], ['hEventLog', 'wType', 'wCategory', 'dwEventID', 'lpUserSid', 'wNumStrings', 'dwDataSize', 'lpStrings', 'lpRawData'], 'BOOL'), 'StopTraceA': (3, ['TRACEHANDLE', 'LPCSTR', 'PEVENT_TRACE_PROPERTIES'], ['session', 'session_name', 'properties'], 'ULONG'), 'QueryTraceA': (3, ['TRACEHANDLE', 'LPCSTR', 'PEVENT_TRACE_PROPERTIES'], ['handle', 'sessionname', 'properties'], 'ULONG'), 'QueryTraceW': (3, ['TRACEHANDLE', 'LPCWSTR', 'PEVENT_TRACE_PROPERTIES'], ['handle', 'sessionname', 'properties'], 'ULONG'), 'OpenTraceA': (1, ['PEVENT_TRACE_LOGFILEA'], ['logfile'], 'TRACEHANDLE'), 'EnumerateTraceGuids': (3, ['PTRACE_GUID_PROPERTIES *', 'ULONG', 'PULONG'], ['propertiesarray', 'arraycount', 'guidcount'], 'ULONG'), 'LsaGetUserName': (2, ['PUNICODE_STRING *', 'PUNICODE_STRING *'], ['user_name', 'domain_name'], 'NTSTATUS'), 'LsaAddAccountRights': (4, ['LSA_HANDLE', 'PSID', 'PLSA_UNICODE_STRING', 'ULONG'], ['policy', 'sid', 'rights', 'count'], 'NTSTATUS'), 'LsaClose': (1, ['IN LSA_HANDLE'], ['ObjectHandle'], 'NTSTATUS'), 'LsaCreateTrustedDomainEx': (5, ['LSA_HANDLE', 'PTRUSTED_DOMAIN_INFORMATION_EX', 'PTRUSTED_DOMAIN_AUTH_INFORMATION', 'ACCESS_MASK', 'PLSA_HANDLE'], ['policy', 'domain_info', 'auth_info', 'access', 'domain'], 'NTSTATUS'), 'LsaDeleteTrustedDomain': (2, ['LSA_HANDLE', 'PSID'], ['policy', 'sid'], 'NTSTATUS'), 'LsaEnumerateAccountRights': (4, ['LSA_HANDLE', 'PSID', 'PLSA_UNICODE_STRING *', 'PULONG'], ['policy', 'sid', 'rights', 'count'], 'NTSTATUS'), 'LsaEnumerateAccounts': (5, ['LSA_HANDLE', 'PLSA_ENUMERATION_HANDLE', 'PVOID *', 'ULONG', 'PULONG'], ['policy', 'context', 'buffer', 'maxlen', 'count'], 'NTSTATUS'), 'LsaEnumerateAccountsWithUserRight': (4, ['LSA_HANDLE', 'PLSA_UNICODE_STRING', 'PVOID *', 'PULONG'], ['policy', 'rights', 'buffer', 'count'], 'NTSTATUS'), 'LsaEnumerateTrustedDomains': (5, ['IN LSA_HANDLE', 'IN PLSA_ENUMERATION_HANDLE', 'OUT PVOID*', 'IN ULONG', 'OUT PULONG'], ['PolicyHandle', 'EnumerationContext', 'Buffer', 'PreferredMaximumLength', 'CountReturned'], 'NTSTATUS'), 'LsaEnumerateTrustedDomainsEx': (5, ['LSA_HANDLE', 'PLSA_ENUMERATION_HANDLE', 'PVOID *', 'ULONG', 'PULONG'], ['policy', 'context', 'buffer', 'length', 'count'], 'NTSTATUS'), 'LsaFreeMemory': (1, ['IN PVOID'], ['Buffer'], 'NTSTATUS'), 'LsaLookupNames': (5, ['IN LSA_HANDLE', 'IN ULONG', 'IN PLSA_UNICODE_STRING', 'OUT PLSA_REFERENCED_DOMAIN_LIST*', 'OUT PLSA_TRANSLATED_SID*'], ['PolicyHandle', 'Count', 'Names', 'ReferencedDomains', 'Sids'], 'NTSTATUS'), 'LsaLookupNames2': (6, ['LSA_HANDLE', 'ULONG', 'ULONG', 'PLSA_UNICODE_STRING', 'PLSA_REFERENCED_DOMAIN_LIST *', 'PLSA_TRANSLATED_SID2 *'], ['policy', 'flags', 'count', 'names', 'domains', 'sids'], 'NTSTATUS'), 'LsaLookupSids': (5, ['LSA_HANDLE', 'ULONG', 'PSID *', 'LSA_REFERENCED_DOMAIN_LIST *', 'LSA_TRANSLATED_NAME *'], ['PolicyHandle', 'Count', 'Sids', '*ReferencedDomains', '*Names'], 'NTSTATUS'), 'LsaNtStatusToWinError': (1, ['NTSTATUS'], ['Status'], 'ULONG'), 'LsaOpenPolicy': (4, ['IN PLSA_UNICODE_STRING', 'IN PLSA_OBJECT_ATTRIBUTES', 'IN ACCESS_MASK', 'IN OUT PLSA_HANDLE'], ['SystemName', 'ObjectAttributes', 'DesiredAccess', 'PolicyHandle'], 'NTSTATUS'), 'LsaOpenTrustedDomainByName': (4, ['LSA_HANDLE', 'PLSA_UNICODE_STRING', 'ACCESS_MASK', 'PLSA_HANDLE'], ['policy', 'name', 'access', 'handle'], 'NTSTATUS'), 'LsaQueryInformationPolicy': (3, ['IN LSA_HANDLE', 'IN POLICY_INFORMATION_CLASS', 'OUT PVOID *'], ['PolicyHandle', 'InformationClass', 'Buffer'], 'NTSTATUS'), 'LsaQueryTrustedDomainInfo': (4, ['LSA_HANDLE', 'PSID', 'TRUSTED_INFORMATION_CLASS', 'PVOID *'], ['policy', 'sid', 'class', 'buffer'], 'NTSTATUS'), 'LsaQueryTrustedDomainInfoByName': (4, ['LSA_HANDLE', 'PLSA_UNICODE_STRING', 'TRUSTED_INFORMATION_CLASS', 'PVOID *'], ['policy', 'name', 'class', 'buffer'], 'NTSTATUS'), 'LsaRegisterPolicyChangeNotification': (2, ['POLICY_NOTIFICATION_INFORMATION_CLASS', 'HANDLE'], ['class', 'event'], 'NTSTATUS'), 'LsaRemoveAccountRights': (5, ['LSA_HANDLE', 'PSID', 'BOOLEAN', 'PLSA_UNICODE_STRING', 'ULONG'], ['policy', 'sid', 'all', 'rights', 'count'], 'NTSTATUS'), 'LsaRetrievePrivateData': (3, ['IN LSA_HANDLE', 'IN PLSA_UNICODE_STRING', 'OUT PLSA_UNICODE_STRING*'], ['PolicyHandle', 'KeyName', 'PrivateData'], 'NTSTATUS'), 'LsaSetInformationPolicy': (3, ['IN LSA_HANDLE', 'IN POLICY_INFORMATION_CLASS', 'IN PVOID'], ['PolicyHandle', 'InformationClass', 'Buffer'], 'NTSTATUS'), 'LsaSetSecret': (3, ['IN LSA_HANDLE', 'IN PLSA_UNICODE_STRING', 'IN PLSA_UNICODE_STRING'], ['SecretHandle', 'EncryptedCurrentValue', 'EncryptedOldValue'], 'NTSTATUS'), 'LsaSetTrustedDomainInfoByName': (4, ['LSA_HANDLE', 'PLSA_UNICODE_STRING', 'TRUSTED_INFORMATION_CLASS', 'PVOID'], ['policy', 'name', 'class', 'buffer'], 'NTSTATUS'), 'LsaSetTrustedDomainInformation': (4, ['LSA_HANDLE', 'PSID', 'TRUSTED_INFORMATION_CLASS', 'PVOID'], ['policy', 'sid', 'class', 'buffer'], 'NTSTATUS'), 'LsaStorePrivateData': (3, ['IN LSA_HANDLE', 'IN PLSA_UNICODE_STRING', 'IN PLSA_UNICODE_STRING'], ['PolicyHandle', 'KeyName', 'PrivateData'], 'NTSTATUS'), 'LsaUnregisterPolicyChangeNotification': (2, ['POLICY_NOTIFICATION_INFORMATION_CLASS', 'HANDLE'], ['class', 'event'], 'NTSTATUS'), 'LsaLookupPrivilegeName': (3, ['LSA_HANDLE', 'LUID *', 'LSA_UNICODE_STRING *'], ['handle', 'luid', '*name'], 'NTSTATUS'), 'LsaLookupPrivilegeDisplayName': (4, ['LSA_HANDLE', 'LSA_UNICODE_STRING *', 'LSA_UNICODE_STRING *', 'SHORT *'], ['handle', 'name', '*display_name', 'language'], 'NTSTATUS'), 'AuditQuerySystemPolicy': (3, ['const GUID*', 'ULONG', 'AUDIT_POLICY_INFORMATION**'], ['guids', 'count', 'policy'], 'BOOLEAN'), 'RemapPredefinedHandleInternal': (2, ['HKEY', 'HKEY'], ['hkey', 'override'], 'NTSTATUS'), 'DisablePredefinedHandleTableInternal': (1, ['HKEY'], ['hkey'], 'NTSTATUS'), 'RegOverridePredefKey': (2, ['HKEY', 'HKEY'], ['hkey', 'override'], 'LSTATUS'), 'RegCreateKeyW': (3, ['HKEY', 'LPCWSTR', 'PHKEY'], ['hkey', 'lpSubKey', 'phkResult'], 'LSTATUS'), 'RegCreateKeyA': (3, ['HKEY', 'LPCSTR', 'PHKEY'], ['hkey', 'lpSubKey', 'phkResult'], 'LSTATUS'), 'RegCreateKeyTransactedW': (11, ['HKEY', 'LPCWSTR', 'DWORD', 'LPWSTR', 'DWORD', 'REGSAM', 'SECURITY_ATTRIBUTES *', 'PHKEY', 'LPDWORD', 'HANDLE', 'PVOID'], ['hkey', 'name', 'reserved', 'class', 'options', 'access', 'sa', 'retkey', 'dispos', 'transaction', 'reserved2'], 'LSTATUS'), 'RegCreateKeyTransactedA': (11, ['HKEY', 'LPCSTR', 'DWORD', 'LPSTR', 'DWORD', 'REGSAM', 'SECURITY_ATTRIBUTES *', 'PHKEY', 'LPDWORD', 'HANDLE', 'PVOID'], ['hkey', 'name', 'reserved', 'class', 'options', 'access', 'sa', 'retkey', 'dispos', 'transaction', 'reserved2'], 'LSTATUS'), 'RegOpenKeyW': (3, ['HKEY', 'LPCWSTR', 'PHKEY'], ['hkey', 'name', 'retkey'], 'LSTATUS'), 'RegOpenKeyA': (3, ['HKEY', 'LPCSTR', 'PHKEY'], ['hkey', 'name', 'retkey'], 'LSTATUS'), 'RegEnumKeyW': (4, ['HKEY', 'DWORD', 'LPWSTR', 'DWORD'], ['hkey', 'index', 'name', 'name_len'], 'LSTATUS'), 'RegEnumKeyA': (4, ['HKEY', 'DWORD', 'LPSTR', 'DWORD'], ['hkey', 'index', 'name', 'name_len'], 'LSTATUS'), 'RegQueryMultipleValuesA': (5, ['HKEY', 'PVALENTA', 'DWORD', 'LPSTR', 'LPDWORD'], ['hkey', 'val_list', 'num_vals', 'lpValueBuf', 'ldwTotsize'], 'LSTATUS'), 'RegQueryMultipleValuesW': (5, ['HKEY', 'PVALENTW', 'DWORD', 'LPWSTR', 'LPDWORD'], ['hkey', 'val_list', 'num_vals', 'lpValueBuf', 'ldwTotsize'], 'LSTATUS'), 'RegQueryReflectionKey': (2, ['HKEY', 'BOOL *'], ['hkey', 'is_reflection_disabled'], 'LONG'), 'RegDeleteKeyW': (2, ['HKEY', 'LPCWSTR'], ['hkey', 'name'], 'LSTATUS'), 'RegDeleteKeyA': (2, ['HKEY', 'LPCSTR'], ['hkey', 'name'], 'LSTATUS'), 'RegSetValueW': (5, ['HKEY', 'LPCWSTR', 'DWORD', 'LPCWSTR', 'DWORD'], ['hkey', 'subkey', 'type', 'data', 'count'], 'LSTATUS'), 'RegSetValueA': (5, ['HKEY', 'LPCSTR', 'DWORD', 'LPCSTR', 'DWORD'], ['hkey', 'subkey', 'type', 'data', 'count'], 'LSTATUS'), 'RegQueryValueW': (4, ['HKEY', 'LPCWSTR', 'LPWSTR', 'LPLONG'], ['hkey', 'name', 'data', 'count'], 'LSTATUS'), 'RegQueryValueA': (4, ['HKEY', 'LPCSTR', 'LPSTR', 'LPLONG'], ['hkey', 'name', 'data', 'count'], 'LSTATUS'), 'RegSaveKeyW': (3, ['HKEY', 'LPCWSTR', 'LPSECURITY_ATTRIBUTES'], ['hkey', 'file', 'sa'], 'LSTATUS'), 'RegSaveKeyA': (3, ['HKEY', 'LPCSTR', 'LPSECURITY_ATTRIBUTES'], ['hkey', 'file', 'sa'], 'LSTATUS'), 'RegReplaceKeyW': (4, ['HKEY', 'LPCWSTR', 'LPCWSTR', 'LPCWSTR'], ['hkey', 'lpSubKey', 'lpNewFile', 'lpOldFile'], 'LSTATUS'), 'RegRenameKey': (3, ['HKEY', 'LPCWSTR', 'LPCWSTR'], ['hkey', 'lpSubKey', 'lpNewName'], 'LSTATUS'), 'RegReplaceKeyA': (4, ['HKEY', 'LPCSTR', 'LPCSTR', 'LPCSTR'], ['hkey', 'lpSubKey', 'lpNewFile', 'lpOldFile'], 'LSTATUS'), 'RegConnectRegistryW': (3, ['LPCWSTR', 'HKEY', 'PHKEY'], ['lpMachineName', 'hKey', 'phkResult'], 'LSTATUS'), 'RegConnectRegistryA': (3, ['LPCSTR', 'HKEY', 'PHKEY'], ['machine', 'hkey', 'reskey'], 'LSTATUS'), 'RegDisablePredefinedCache': (0, [], [], 'LSTATUS'), 'RegCopyTreeA': (3, ['HKEY', 'const char *', 'HKEY'], ['hsrc', 'subkey', 'hdst'], 'LONG'), 'RegEnableReflectionKey': (1, ['HKEY'], ['base'], 'LONG'), 'RegDisableReflectionKey': (1, ['HKEY'], ['base'], 'LONG'), 'GetEffectiveRightsFromAclA': (3, ['PACL', 'PTRUSTEEA', 'PACCESS_MASK'], ['pacl', 'pTrustee', 'pAccessRights'], 'DWORD'), 'GetEffectiveRightsFromAclW': (0, [], [], 'DWORD'), 'BuildSecurityDescriptorA': (9, ['IN PTRUSTEEA', 'IN PTRUSTEEA', 'IN ULONG', 'IN PEXPLICIT_ACCESSA', 'IN ULONG', 'IN PEXPLICIT_ACCESSA', 'IN PSECURITY_DESCRIPTOR', 'IN OUT PULONG', 'OUT PSECURITY_DESCRIPTOR*'], ['pOwner', 'pGroup', 'cCountOfAccessEntries', 'pListOfAccessEntries', 'cCountOfAuditEntries', 'pListofAuditEntries', 'pOldSD', 'lpdwBufferLength', 'pNewSD'], 'DWORD'), 'BuildSecurityDescriptorW': (9, ['IN PTRUSTEEW', 'IN PTRUSTEEW', 'IN ULONG', 'IN PEXPLICIT_ACCESSW', 'IN ULONG', 'IN PEXPLICIT_ACCESSW', 'IN PSECURITY_DESCRIPTOR', 'IN OUT PULONG', 'OUT PSECURITY_DESCRIPTOR*'], ['pOwner', 'pGroup', 'cCountOfAccessEntries', 'pListOfAccessEntries', 'cCountOfAuditEntries', 'pListOfAuditEntries', 'pOldSD', 'lpdwBufferLength', 'pNewSD'], 'DWORD'), 'LookupPrivilegeValueW': (3, ['LPCWSTR', 'LPCWSTR', 'PLUID'], ['lpSystemName', 'lpName', 'lpLuid'], 'BOOL'), 'LookupPrivilegeValueA': (3, ['LPCSTR', 'LPCSTR', 'PLUID'], ['lpSystemName', 'lpName', 'lpLuid'], 'BOOL'), 'LookupPrivilegeDisplayNameA': (0, [], [], 'BOOL'), 'LookupPrivilegeDisplayNameW': (0, [], [], 'BOOL'), 'LookupPrivilegeNameA': (4, ['LPCSTR', 'PLUID', 'LPSTR', 'LPDWORD'], ['lpSystemName', 'lpLuid', 'lpName', 'cchName'], 'BOOL'), 'LookupPrivilegeNameW': (4, ['LPCWSTR', 'PLUID', 'LPWSTR', 'LPDWORD'], ['lpSystemName', 'lpLuid', 'lpName', 'cchName'], 'BOOL'), 'GetFileSecurityA': (5, ['LPCSTR', 'SECURITY_INFORMATION', 'PSECURITY_DESCRIPTOR', 'DWORD', 'LPDWORD'], ['lpFileName', 'RequestedInformation', 'pSecurityDescriptor', 'nLength', 'lpnLengthNeeded'], 'BOOL'), 'LookupAccountSidA': (7, ['IN LPCSTR', 'IN PSID', 'OUT LPSTR', 'IN OUT LPDWORD', 'OUT LPSTR', 'IN OUT LPDWORD', 'OUT PSID_NAME_USE'], ['system', 'sid', 'account', 'accountSize', 'domain', 'domainSize', 'name_use'], 'BOOL'), 'LookupAccountSidLocalA': (6, ['PSID', 'LPSTR', 'LPDWORD', 'LPSTR', 'LPDWORD', 'PSID_NAME_USE'], ['sid', 'account', 'accountSize', 'domain', 'domainSize', 'name_use'], 'BOOL'), 'LookupAccountSidW': (7, ['IN LPCWSTR', 'IN PSID', 'OUT LPWSTR', 'IN OUT LPDWORD', 'OUT LPWSTR', 'IN OUT LPDWORD', 'OUT PSID_NAME_USE'], ['system', 'sid', 'account', 'accountSize', 'domain', 'domainSize', 'name_use'], 'BOOL'), 'LookupAccountSidLocalW': (6, ['PSID', 'LPWSTR', 'LPDWORD', 'LPWSTR', 'LPDWORD', 'PSID_NAME_USE'], ['sid', 'account', 'accountSize', 'domain', 'domainSize', 'name_use'], 'BOOL'), 'SetFileSecurityA': (3, ['LPCSTR', 'SECURITY_INFORMATION', 'PSECURITY_DESCRIPTOR'], ['lpFileName', 'RequestedInformation', 'pSecurityDescriptor'], 'BOOL'), 'QueryWindows31FilesMigration': (1, ['DWORD'], ['x1'], 'BOOL'), 'SynchronizeWindows31FilesAndWindowsNTRegistry': (4, ['DWORD', 'DWORD', 'DWORD', 'DWORD'], ['x1', 'x2', 'x3', 'x4'], 'BOOL'), 'NotifyBootConfigStatus': (1, ['BOOL'], ['x1'], 'BOOL'), 'LookupAccountNameA': (7, ['IN LPCSTR', 'IN LPCSTR', 'OUT PSID', 'OUT LPDWORD', 'LPSTR', 'IN OUT LPDWORD', 'OUT PSID_NAME_USE'], ['system', 'account', 'sid', 'cbSid', 'ReferencedDomainName', 'cbReferencedDomainName', 'name_use'], 'BOOL'), 'LookupAccountNameW': (7, ['LPCWSTR', 'LPCWSTR', 'PSID', 'LPDWORD', 'LPWSTR', 'LPDWORD', 'PSID_NAME_USE'], ['lpSystemName', 'lpAccountName', 'Sid', 'cbSid', 'ReferencedDomainName', 'cchReferencedDomainName', 'peUse'], 'BOOL'), 'AccessCheckAndAuditAlarmA': (11, ['LPCSTR', 'LPVOID', 'LPSTR', 'LPSTR', 'PSECURITY_DESCRIPTOR', 'DWORD', 'PGENERIC_MAPPING', 'BOOL', 'LPDWORD', 'LPBOOL', 'LPBOOL'], ['Subsystem', 'HandleId', 'ObjectTypeName', 'ObjectName', 'SecurityDescriptor', 'DesiredAccess', 'GenericMapping', 'ObjectCreation', 'GrantedAccess', 'AccessStatus', 'pfGenerateOnClose'], 'BOOL'), 'ObjectCloseAuditAlarmA': (0, [], [], 'BOOL'), 'ObjectOpenAuditAlarmA': (0, [], [], 'BOOL'), 'ObjectPrivilegeAuditAlarmA': (0, [], [], 'BOOL'), 'PrivilegedServiceAuditAlarmA': (0, [], [], 'BOOL'), 'GetSecurityInfo': (8, ['HANDLE', 'SE_OBJECT_TYPE', 'SECURITY_INFORMATION', 'PSID *', 'PSID *', 'PACL *', 'PACL *', 'PSECURITY_DESCRIPTOR *'], ['handle', 'type', 'SecurityInfo', 'ppsidOwner', 'ppsidGroup', 'ppDacl', 'ppSacl', 'ppSecurityDescriptor'], 'DWORD'), 'GetSecurityInfoExA': (9, ['HANDLE', 'SE_OBJECT_TYPE', 'SECURITY_INFORMATION', 'LPCSTR', 'LPCSTR', 'PACTRL_ACCESSA *', 'PACTRL_AUDITA *', 'LPSTR *', 'LPSTR *'], ['hObject', 'ObjectType', 'SecurityInfo', 'lpProvider', 'lpProperty', 'ppAccessList', 'ppAuditList', 'lppOwner', 'lppGroup'], 'DWORD'), 'GetSecurityInfoExW': (9, ['HANDLE', 'SE_OBJECT_TYPE', 'SECURITY_INFORMATION', 'LPCWSTR', 'LPCWSTR', 'PACTRL_ACCESSW *', 'PACTRL_AUDITW *', 'LPWSTR *', 'LPWSTR *'], ['hObject', 'ObjectType', 'SecurityInfo', 'lpProvider', 'lpProperty', 'ppAccessList', 'ppAuditList', 'lppOwner', 'lppGroup'], 'DWORD'), 'BuildExplicitAccessWithNameA': (5, ['PEXPLICIT_ACCESSA', 'LPSTR', 'DWORD', 'ACCESS_MODE', 'DWORD'], ['pExplicitAccess', 'pTrusteeName', 'AccessPermissions', 'AccessMode', 'Inheritance'], 'VOID'), 'BuildExplicitAccessWithNameW': (5, ['PEXPLICIT_ACCESSW', 'LPWSTR', 'DWORD', 'ACCESS_MODE', 'DWORD'], ['pExplicitAccess', 'pTrusteeName', 'AccessPermissions', 'AccessMode', 'Inheritance'], 'VOID'), 'BuildTrusteeWithObjectsAndNameA': (6, ['PTRUSTEEA', 'POBJECTS_AND_NAME_A', 'SE_OBJECT_TYPE', 'LPSTR', 'LPSTR', 'LPSTR'], ['pTrustee', 'pObjName', 'ObjectType', 'ObjectTypeName', 'InheritedObjectTypeName', 'Name'], 'VOID'), 'BuildTrusteeWithObjectsAndNameW': (6, ['PTRUSTEEW', 'POBJECTS_AND_NAME_W', 'SE_OBJECT_TYPE', 'LPWSTR', 'LPWSTR', 'LPWSTR'], ['pTrustee', 'pObjName', 'ObjectType', 'ObjectTypeName', 'InheritedObjectTypeName', 'Name'], 'VOID'), 'BuildTrusteeWithObjectsAndSidA': (5, ['PTRUSTEEA', 'POBJECTS_AND_SID', 'GUID*', 'GUID*', 'PSID'], ['pTrustee', 'pObjSid', 'pObjectGuid', 'pInheritedObjectGuid', 'pSid'], 'VOID'), 'BuildTrusteeWithObjectsAndSidW': (5, ['PTRUSTEEW', 'POBJECTS_AND_SID', 'GUID*', 'GUID*', 'PSID'], ['pTrustee', 'pObjSid', 'pObjectGuid', 'pInheritedObjectGuid', 'pSid'], 'VOID'), 'BuildTrusteeWithSidA': (2, ['PTRUSTEEA', 'PSID'], ['pTrustee', 'pSid'], 'VOID'), 'BuildTrusteeWithSidW': (2, ['PTRUSTEEW', 'PSID'], ['pTrustee', 'pSid'], 'VOID'), 'BuildTrusteeWithNameA': (2, ['PTRUSTEEA', 'LPSTR'], ['pTrustee', 'name'], 'VOID'), 'BuildTrusteeWithNameW': (2, ['PTRUSTEEW', 'LPWSTR'], ['pTrustee', 'name'], 'VOID'), 'GetTrusteeFormA': (1, ['PTRUSTEEA'], ['pTrustee'], 'TRUSTEE_FORM'), 'GetTrusteeFormW': (1, ['PTRUSTEEW'], ['pTrustee'], 'TRUSTEE_FORM'), 'GetTrusteeNameA': (1, ['PTRUSTEEA'], ['pTrustee'], 'LPSTR'), 'GetTrusteeNameW': (1, ['PTRUSTEEW'], ['pTrustee'], 'LPWSTR'), 'GetTrusteeTypeA': (1, ['PTRUSTEEA'], ['pTrustee'], 'TRUSTEE_TYPE'), 'GetTrusteeTypeW': (1, ['PTRUSTEEW'], ['pTrustee'], 'TRUSTEE_TYPE'), 'SetEntriesInAclA': (4, ['ULONG', 'PEXPLICIT_ACCESSA', 'PACL', 'PACL*'], ['count', 'pEntries', 'OldAcl', 'NewAcl'], 'DWORD'), 'SetEntriesInAclW': (4, ['ULONG', 'PEXPLICIT_ACCESSW', 'PACL', 'PACL*'], ['count', 'pEntries', 'OldAcl', 'NewAcl'], 'DWORD'), 'SetNamedSecurityInfoA': (7, ['LPSTR', 'SE_OBJECT_TYPE', 'SECURITY_INFORMATION', 'PSID', 'PSID', 'PACL', 'PACL'], ['pObjectName', 'ObjectType', 'SecurityInfo', 'psidOwner', 'psidGroup', 'pDacl', 'pSacl'], 'DWORD'), 'SetNamedSecurityInfoW': (7, ['LPWSTR', 'SE_OBJECT_TYPE', 'SECURITY_INFORMATION', 'PSID', 'PSID', 'PACL', 'PACL'], ['pObjectName', 'ObjectType', 'SecurityInfo', 'psidOwner', 'psidGroup', 'pDacl', 'pSacl'], 'DWORD'), 'GetExplicitEntriesFromAclA': (3, ['PACL', 'PULONG', 'PEXPLICIT_ACCESSA*'], ['pacl', 'pcCountOfExplicitEntries', 'pListOfExplicitEntries'], 'DWORD'), 'GetExplicitEntriesFromAclW': (3, ['PACL', 'PULONG', 'PEXPLICIT_ACCESSW *'], ['pacl', 'count', 'list'], 'DWORD'), 'GetAuditedPermissionsFromAclA': (4, ['PACL', 'PTRUSTEEA', 'PACCESS_MASK', 'PACCESS_MASK'], ['pacl', 'pTrustee', 'pSuccessfulAuditedRights', 'pFailedAuditRights'], 'DWORD'), 'GetAuditedPermissionsFromAclW': (4, ['PACL', 'PTRUSTEEW', 'PACCESS_MASK', 'PACCESS_MASK'], ['pacl', 'pTrustee', 'pSuccessfulAuditedRights', 'pFailedAuditRights'], 'DWORD'), 'ConvertStringSecurityDescriptorToSecurityDescriptorA': (4, ['LPCSTR', 'DWORD', 'PSECURITY_DESCRIPTOR*', 'PULONG'], ['StringSecurityDescriptor', 'StringSDRevision', 'SecurityDescriptor', 'SecurityDescriptorSize'], 'BOOL'), 'ConvertSecurityDescriptorToStringSecurityDescriptorA': (5, ['PSECURITY_DESCRIPTOR', 'DWORD', 'SECURITY_INFORMATION', 'LPSTR *', 'PULONG'], ['SecurityDescriptor', 'SDRevision', 'Information', 'OutputString', 'OutputLen'], 'BOOL'), 'ConvertStringSidToSidA': (2, ['LPCSTR', 'PSID*'], ['StringSid', 'Sid'], 'BOOL'), 'ConvertSidToStringSidA': (2, ['PSID', 'LPSTR *'], ['pSid', 'pstr'], 'BOOL'), 'CreateProcessWithLogonW': (11, ['LPCWSTR', 'LPCWSTR', 'LPCWSTR', 'DWORD', 'LPCWSTR', 'LPWSTR', 'DWORD', 'LPVOID', 'LPCWSTR', 'LPSTARTUPINFOW', 'LPPROCESS_INFORMATION'], ['lpUsername', 'lpDomain', 'lpPassword', 'dwLogonFlags', 'lpApplicationName', 'lpCommandLine', 'dwCreationFlags', 'lpEnvironment', 'lpCurrentDirectory', 'lpStartupInfo', 'lpProcessInformation'], 'BOOL'), 'CreateProcessWithTokenW': (0, [], [], 'BOOL'), 'GetNamedSecurityInfoA': (8, ['LPSTR', 'SE_OBJECT_TYPE', 'SECURITY_INFORMATION', 'PSID*', 'PSID*', 'PACL*', 'PACL*', 'PSECURITY_DESCRIPTOR*'], ['pObjectName', 'ObjectType', 'SecurityInfo', 'ppsidOwner', 'ppsidGroup', 'ppDacl', 'ppSacl', 'ppSecurityDescriptor'], 'DWORD'), 'GetNamedSecurityInfoW': (8, ['LPWSTR', 'SE_OBJECT_TYPE', 'SECURITY_INFORMATION', 'PSID*', 'PSID*', 'PACL*', 'PACL*', 'PSECURITY_DESCRIPTOR*'], ['name', 'type', 'info', 'owner', 'group', 'dacl', 'sacl', 'descriptor'], 'DWORD'), 'GetNamedSecurityInfoExW': (9, ['LPCWSTR', 'SE_OBJECT_TYPE', 'SECURITY_INFORMATION', 'LPCWSTR', 'LPCWSTR', 'PACTRL_ACCESSW*', 'PACTRL_AUDITW*', 'LPWSTR*', 'LPWSTR*'], ['object', 'type', 'info', 'provider', 'property', 'access_list', 'audit_list', 'owner', 'group'], 'DWORD'), 'GetNamedSecurityInfoExA': (9, ['LPCSTR', 'SE_OBJECT_TYPE', 'SECURITY_INFORMATION', 'LPCSTR', 'LPCSTR', 'PACTRL_ACCESSA*', 'PACTRL_AUDITA*', 'LPSTR*', 'LPSTR*'], ['object', 'type', 'info', 'provider', 'property', 'access_list', 'audit_list', 'owner', 'group'], 'DWORD'), 'DecryptFileW': (2, ['LPCWSTR', 'DWORD'], ['lpFileName', 'dwReserved'], 'BOOL'), 'DecryptFileA': (2, ['LPCSTR', 'DWORD'], ['lpFileName', 'dwReserved'], 'BOOL'), 'EncryptFileW': (1, ['LPCWSTR'], ['lpFileName'], 'BOOL'), 'EncryptFileA': (1, ['LPCSTR'], ['lpFileName'], 'BOOL'), 'FileEncryptionStatusW': (2, ['LPCWSTR', 'LPDWORD'], ['lpFileName', 'lpStatus'], 'BOOL'), 'FileEncryptionStatusA': (2, ['LPCSTR', 'LPDWORD'], ['lpFileName', 'lpStatus'], 'BOOL'), 'SetSecurityInfo': (7, ['HANDLE', 'SE_OBJECT_TYPE', 'SECURITY_INFORMATION', 'PSID', 'PSID', 'PACL', 'PACL'], ['handle', 'ObjectType', 'SecurityInfo', 'psidOwner', 'psidGroup', 'pDacl', 'pSacl'], 'DWORD'), 'SaferCreateLevel': (5, ['DWORD', 'DWORD', 'DWORD', 'SAFER_LEVEL_HANDLE*', 'LPVOID'], ['ScopeId', 'LevelId', 'OpenFlags', 'LevelHandle', 'lpReserved'], 'BOOL'), 'SaferComputeTokenFromLevel': (5, ['SAFER_LEVEL_HANDLE', 'HANDLE', 'PHANDLE', 'DWORD', 'LPVOID'], ['handle', 'token', 'access_token', 'flags', 'reserved'], 'BOOL'), 'SaferCloseLevel': (1, ['SAFER_LEVEL_HANDLE'], ['handle'], 'BOOL'), 'TreeResetNamedSecurityInfoW': (11, ['LPWSTR', 'SE_OBJECT_TYPE', 'SECURITY_INFORMATION', 'PSID', 'PSID', 'PACL', 'PACL', 'BOOL', 'FN_PROGRESS', 'PROG_INVOKE_SETTING', 'PVOID'], ['pObjectName', 'ObjectType', 'SecurityInfo', 'pOwner', 'pGroup', 'pDacl', 'pSacl', 'KeepExplicit', 'fnProgress', 'ProgressInvokeSetting', 'Args'], 'DWORD'), 'SaferGetPolicyInformation': (6, ['DWORD', 'SAFER_POLICY_INFO_CLASS', 'DWORD', 'PVOID', 'PDWORD', 'LPVOID'], ['scope', 'class', 'size', 'buffer', 'required', 'lpReserved'], 'BOOL'), 'SaferIdentifyLevel': (4, ['DWORD', 'SAFER_CODE_PROPERTIES *', 'SAFER_LEVEL_HANDLE *', 'void *'], ['count', 'properties', 'handle', 'reserved'], 'BOOL'), 'SaferSetLevelInformation': (4, ['SAFER_LEVEL_HANDLE', 'SAFER_OBJECT_INFO_CLASS', 'LPVOID', 'DWORD'], ['handle', 'infotype', 'buffer', 'size'], 'BOOL'), 'LookupSecurityDescriptorPartsA': (7, ['TRUSTEEA *', 'TRUSTEEA *', 'ULONG *', 'EXPLICIT_ACCESSA *', 'ULONG *', 'EXPLICIT_ACCESSA *', 'SECURITY_DESCRIPTOR *'], ['owner', 'group', 'access_count', 'access_list', 'audit_count', 'audit_list', 'descriptor'], 'DWORD'), 'LookupSecurityDescriptorPartsW': (7, ['TRUSTEEW *', 'TRUSTEEW *', 'ULONG *', 'EXPLICIT_ACCESSW *', 'ULONG *', 'EXPLICIT_ACCESSW *', 'SECURITY_DESCRIPTOR *'], ['owner', 'group', 'access_count', 'access_list', 'audit_count', 'audit_list', 'descriptor'], 'DWORD'), 'LockServiceDatabase': (1, ['SC_HANDLE'], ['manager'], 'SC_LOCK'), 'UnlockServiceDatabase': (1, ['SC_LOCK'], ['lock'], 'BOOL'), 'EnumServicesStatusA': (8, ['SC_HANDLE', 'DWORD', 'DWORD', 'LPENUM_SERVICE_STATUSA\n                    ', 'DWORD', 'LPDWORD', 'LPDWORD', 'LPDWORD'], ['hmngr', 'type', 'state', 'services', 'size', 'needed', 'returned', 'resume_handle'], 'BOOL'), 'EnumServicesStatusW': (8, ['SC_HANDLE', 'DWORD', 'DWORD', 'ENUM_SERVICE_STATUSW *', 'DWORD', 'DWORD *', 'DWORD *', 'DWORD *'], ['manager', 'type', 'state', 'status', 'size', 'ret_size', 'ret_count', 'resume_handle'], 'BOOL'), 'EnumServicesStatusExA': (10, ['SC_HANDLE', 'SC_ENUM_TYPE', 'DWORD', 'DWORD', 'LPBYTE', 'DWORD', 'LPDWORD', 'LPDWORD', 'LPDWORD', 'LPCSTR'], ['hmngr', 'level', 'type', 'state', 'buffer', 'size', 'needed', 'returned', 'resume_handle', 'group'], 'BOOL'), 'GetServiceKeyNameA': (4, ['SC_HANDLE', 'LPCSTR', 'LPSTR', 'LPDWORD'], ['hSCManager', 'lpDisplayName', 'lpServiceName', 'lpcchBuffer'], 'BOOL'), 'QueryServiceLockStatusA': (4, ['SC_HANDLE', 'LPQUERY_SERVICE_LOCK_STATUSA', 'DWORD', 'LPDWORD'], ['hSCManager', 'lpLockStatus', 'cbBufSize', 'pcbBytesNeeded'], 'BOOL'), 'QueryServiceLockStatusW': (4, ['SC_HANDLE', 'LPQUERY_SERVICE_LOCK_STATUSW', 'DWORD', 'LPDWORD'], ['hSCManager', 'lpLockStatus', 'cbBufSize', 'pcbBytesNeeded'], 'BOOL'), 'GetServiceDisplayNameA': (4, ['SC_HANDLE', 'LPCSTR', 'LPSTR', 'LPDWORD'], ['hSCManager', 'lpServiceName', 'lpDisplayName', 'lpcchBuffer'], 'BOOL'), 'SetServiceBits': (4, ['SERVICE_STATUS_HANDLE', 'DWORD', 'BOOL', 'BOOL'], ['hServiceStatus', 'dwServiceBits', 'bSetBitsOn', 'bUpdateImmediately'], 'BOOL'), 'EnumDependentServicesA': (6, ['SC_HANDLE', 'DWORD', 'LPENUM_SERVICE_STATUSA', 'DWORD', 'LPDWORD', 'LPDWORD'], ['hService', 'dwServiceState', 'lpServices', 'cbBufSize', 'pcbBytesNeeded', 'lpServicesReturned'], 'BOOL'), 'WmiOpenBlock': (3, ['GUID *', 'ULONG', 'WMIHANDLE *'], ['guid', 'access', 'handle'], 'ULONG')}


dictRS_advapi32 =  {'GetCurrentHwProfileA': 'True', 'AbortSystemShutdownA': 'True', 'InitiateSystemShutdownExA': 'True', 'CloseEncryptedFileRaw': 'ERROR_SUCCESS', 'OpenEncryptedFileRawW': 'ERROR_SUCCESS', 'ReadEncryptedFileRaw': 'ERROR_SUCCESS', 'WriteEncryptedFileRaw': 'ERROR_SUCCESS', 'BackupEventLogA': 'nonzero', 'ClearEventLogA': 'nonzero', 'CloseEventLog': 'nonzero', 'DeregisterEventSource': 'nonzero', 'GetEventLogInformation': 'True', 'GetNumberOfEventLogRecords': 'nonzero', 'GetOldestEventLogRecord': 'nonzero', 'NotifyChangeEventLog': 'nonzero', 'OpenBackupEventLogA': 'handle', 'OpenEventLogA': 'handle', 'ReadEventLogA': 'nonzero', 'RegisterEventSourceA': 'handle', 'LsaClose': 'STATUS_SUCCESS', 'LsaEnumerateTrustedDomains': 'STATUS_SUCCESS', 'LsaFreeMemory': 'STATUS_SUCCESS', 'LsaLookupNames': 'STATUS_SUCCESS', 'LsaLookupSids': 'STATUS_SUCCESS', 'LsaNtStatusToWinError': 'Corresponding Windows error code', 'LsaOpenPolicy': 'STATUS_SUCCESS', 'LsaQueryInformationPolicy': 'STATUS_SUCCESS', 'LsaRetrievePrivateData': 'STATUS_SUCCESS', 'LsaSetInformationPolicy': 'STATUS_SUCCESS', 'LsaSetSecret': 'STATUS_SUCCESS', 'LsaStorePrivateData': 'STATUS_SUCCESS', 'RegCreateKeyW': 'ERROR_SUCCESS', 'RegOpenKeyA': 'ERROR_SUCCESS', 'RegEnumKeyW': 'ERROR_SUCCESS', 'RegQueryMultipleValuesA': 'ERROR_SUCCESS', 'RegDeleteKeyA': 'ERROR_SUCCESS', 'RegSetValueW': 'ERROR_SUCCESS', 'RegQueryValueW': 'ERROR_SUCCESS', 'RegSaveKeyW': 'ERROR_SUCCESS', 'RegReplaceKeyW': 'ERROR_SUCCESS', 'RegConnectRegistryW': 'ERROR_SUCCESS', 'BuildSecurityDescriptorA': 'ERROR_SUCCESS', 'LookupPrivilegeValueA': 'True', 'LookupPrivilegeNameW': 'True', 'GetFileSecurityA': 'True'}


dict4_comctl32 =  {'RegisterClassNameW': (1, ['const WCHAR *'], ['class'], 'BOOL'), 'DllMain': (3, ['HINSTANCE', 'DWORD', 'LPVOID'], ['hinstDLL', 'fdwReason', 'lpvReserved'], 'BOOL'), 'DllInstall': (2, ['BOOL', 'LPCWSTR'], ['bInstall', 'cmdline'], 'HRESULT'), 'RemoveWindowSubclass': (3, ['HWND', 'SUBCLASSPROC', 'UINT_PTR'], ['hWnd', 'pfnSubclass', 'uID'], 'BOOL'), 'MirrorIcon': (2, ['HICON *', 'HICON *'], ['phicon1', 'phicon2'], 'BOOL'), 'SetPathWordBreakProc': (2, ['HWND', 'BOOL'], ['hwnd', 'bSet'], 'LRESULT'), 'DrawShadowText': (9, ['HDC', 'LPCWSTR', 'UINT', 'RECT *', 'DWORD', 'COLORREF', 'COLORREF', 'int', 'int'], ['hdc', 'text', 'length', 'rect', 'flags', 'crText', 'crShadow', 'offset_x', 'offset_y'], 'int'), 'LoadIconWithScaleDown': (5, ['HINSTANCE', 'const WCHAR *', 'int', 'int', 'HICON *'], ['hinst', 'name', 'cx', 'cy', 'icon'], 'HRESULT'), 'LoadIconMetric': (4, ['HINSTANCE', 'const WCHAR *', 'int', 'HICON *'], ['hinst', 'name', 'size', 'icon'], 'HRESULT'), 'Free': (0, [], [], 'BOOL'), 'GetSize': (0, [], [], 'DWORD'), 'FreeMRUList': (1, ['HANDLE'], ['hMRUList'], 'void'), 'FindMRUData': (4, ['HANDLE', 'const void *', 'DWORD', 'int *'], ['hList', 'data', 'cbData', 'pos'], 'INT'), 'AddMRUData': (3, ['HANDLE', 'const void *', 'DWORD'], ['hList', 'data', 'cbData'], 'INT'), 'AddMRUStringW': (2, ['HANDLE', 'const WCHAR *'], ['hList', 'str'], 'INT'), 'AddMRUStringA': (2, ['HANDLE', 'const char *'], ['hList', 'str'], 'INT'), 'DelMRUString': (2, ['HANDLE', 'INT'], ['hList', 'nItemPos'], 'BOOL'), 'FindMRUStringW': (3, ['HANDLE', 'const WCHAR *', 'int *'], ['hList', 'str', 'pos'], 'INT'), 'FindMRUStringA': (3, ['HANDLE', 'const char *', 'int *'], ['hList', 'str', 'pos'], 'INT'), 'CreateMRUListLazyW': (4, ['const struct MRUINFOW *', 'DWORD', 'DWORD', 'DWORD'], ['info', 'dwParam2', 'dwParam3', 'dwParam4'], 'HANDLE'), 'CreateMRUListLazyA': (4, ['const struct MRUINFOA *', 'DWORD', 'DWORD', 'DWORD'], ['info', 'dwParam2', 'dwParam3', 'dwParam4'], 'HANDLE'), 'CreateMRUListW': (1, ['const struct MRUINFOW *'], ['info'], 'HANDLE'), 'CreateMRUListA': (1, ['const struct MRUINFOA *'], ['info'], 'HANDLE'), 'EnumMRUListW': (4, ['HANDLE', 'INT', 'void *', 'DWORD'], ['hList', 'nItemPos', 'buffer', 'nBufferSize'], 'INT'), 'EnumMRUListA': (4, ['HANDLE', 'INT', 'void *', 'DWORD'], ['hList', 'nItemPos', 'buffer', 'nBufferSize'], 'INT'), 'SendNotify': (4, ['HWND', 'HWND', 'UINT', 'NMHDR *'], ['hwndTo', 'hwndFrom', 'code', 'hdr'], 'LRESULT'), 'SendNotifyEx': (5, ['HWND', 'HWND', 'UINT', 'NMHDR *', 'DWORD'], ['hwndTo', 'hwndFrom', 'code', 'hdr', 'dwParam5'], 'LRESULT'), 'GetCharWidthInfo': (0, [], [], 'BOOL'), 'InitializeFlatSB': (1, ['HWND'], ['hwnd'], 'BOOL'), 'UninitializeFlatSB': (1, ['HWND'], ['hwnd'], 'HRESULT'), 'ProgressWindowProc': (4, ['HWND', 'UINT', 'WPARAM', 'LPARAM'], ['hwnd', 'message', 'wParam', 'lParam'], 'LRESULT'), 'PropertySheetA': (1, ['LPCPROPSHEETHEADERA'], ['lppsh'], 'INT_PTR'), 'PropertySheetW': (1, ['LPCPROPSHEETHEADERW'], ['lppsh'], 'INT_PTR'), 'CreatePropertySheetPageA': (1, ['LPCPROPSHEETPAGEA'], ['lpPropSheetPage'], 'HPROPSHEETPAGE'), 'CreatePropertySheetPageW': (1, ['LPCPROPSHEETPAGEW'], ['lpPropSheetPage'], 'HPROPSHEETPAGE'), 'DestroyPropertySheetPage': (1, ['HPROPSHEETPAGE'], ['hPropPage'], 'BOOL'), 'SmoothScrollWindow': (1, ['const SMOOTHSCROLLSTRUCT *'], ['smooth'], 'BOOL'), 'IntlStrEqWorkerA': (4, ['BOOL', 'LPCSTR', 'LPCSTR', 'int'], ['bCase', 'lpszStr', 'lpszComp', 'iLen'], 'BOOL'), 'IntlStrEqWorkerW': (4, ['BOOL', 'LPCWSTR', 'LPCWSTR', 'int'], ['bCase', 'lpszStr', 'lpszComp', 'iLen'], 'BOOL'), 'SysLinkWindowProc': (4, ['HWND', 'UINT', 'WPARAM', 'LPARAM'], ['hwnd', 'message', 'wParam', 'lParam'], 'LRESULT'), 'TaskDialogIndirect': (4, ['const TASKDIALOGCONFIG *', 'int *', 'int *', 'BOOL *'], ['taskconfig', 'button', 'radio_button', 'verification_flag_checked'], 'HRESULT'), 'TaskDialog': (8, ['HWND', 'HINSTANCE', 'const WCHAR *', 'const WCHAR *', 'const WCHAR *', 'TASKDIALOG_COMMON_BUTTON_FLAGS', 'const WCHAR *', 'int *'], ['owner', 'hinst', 'title', 'main_instruction', 'content', 'common_buttons', 'icon', 'button'], 'HRESULT'), 'UpDownWindowProc': (4, ['HWND', 'UINT', 'WPARAM', 'LPARAM'], ['hwnd', 'message', 'wParam', 'lParam'], 'LRESULT')}


dictRS_comctl32 =  {'DllMain': 'True', 'DllInstall': 'S_OK', 'RemoveWindowSubclass': 'non-zero', 'MirrorIcon': 'True', 'SendNotifyEx': 'return value from notification', 'InitializeFlatSB': 'Non-zero', 'CreatePropertySheetPageA': 'handle', 'DestroyPropertySheetPage': 'True', 'SmoothScrollWindow': 'True'}


dict4_comdlg32 =  {'DllMain': (3, ['HINSTANCE', 'DWORD', 'LPVOID'], ['hInstance', 'Reason', 'Reserved'], 'BOOL'), 'CommDlgExtendedError': (0, [], [], 'DWORD'), 'DllGetClassObject': (3, ['REFCLSID', 'REFIID', 'void *'], ['rclsid', 'riid', '*ppv'], 'HRESULT'), 'ChooseColorW': (1, ['CHOOSECOLORW *'], ['lpChCol'], 'BOOL'), 'ChooseColorA': (1, ['LPCHOOSECOLORA'], ['lpChCol'], 'BOOL'), 'GetOpenFileNameA': (1, ['OPENFILENAMEA *'], ['ofn'], 'BOOL'), 'GetOpenFileNameW': (1, ['OPENFILENAMEW *'], ['ofn'], 'BOOL'), 'GetSaveFileNameA': (1, ['OPENFILENAMEA *'], ['ofn'], 'BOOL'), 'GetSaveFileNameW': (1, ['LPOPENFILENAMEW'], ['ofn'], 'BOOL'), 'GetFileTitleA': (3, ['LPCSTR', 'LPSTR', 'WORD'], ['lpFile', 'lpTitle', 'cbBuf'], 'short'), 'GetFileTitleW': (3, ['LPCWSTR', 'LPWSTR', 'WORD'], ['lpFile', 'lpTitle', 'cbBuf'], 'short'), 'ChooseFontW': (1, ['LPCHOOSEFONTW'], ['lpChFont'], 'BOOL'), 'ChooseFontA': (1, ['LPCHOOSEFONTA'], ['lpChFont'], 'BOOL'), 'FontFamilyEnumProc': (4, ['const ENUMLOGFONTEXW *', 'const TEXTMETRICW *', 'DWORD', 'LPARAM'], ['lpElfex', 'metrics', 'dwFontType', 'lParam'], 'INT'), 'FontStyleEnumProc': (4, ['const ENUMLOGFONTEXW *', 'const TEXTMETRICW *', 'DWORD', 'LPARAM'], ['lpElfex', 'metrics', 'dwFontType', 'lParam'], 'INT'), 'PrintDlgA': (1, ['LPPRINTDLGA'], ['lppd'], 'BOOL'), 'PrintDlgW': (1, ['LPPRINTDLGW'], ['lppd'], 'BOOL'), 'PageSetupDlgA': (1, ['LPPAGESETUPDLGA'], ['setupdlg'], 'BOOL'), 'PageSetupDlgW': (1, ['LPPAGESETUPDLGW'], ['setupdlg'], 'BOOL'), 'PrintDlgExA': (1, ['LPPRINTDLGEXA'], ['lppd'], 'HRESULT'), 'PrintDlgExW': (1, ['LPPRINTDLGEXW'], ['lppd'], 'HRESULT')}


dictRS_comdlg32 =  {'GetFileTitleW': 'zero', 'PrintDlgExW': 'S_OK'}


dict4_gdi32 =  {'CreateDCW': (4, ['LPCWSTR', 'LPCWSTR', 'LPCWSTR', 'const DEVMODEW *'], ['driver', 'device', 'output', 'devmode'], 'HDC'), 'CreateDCA': (4, ['const char *', 'const char *', 'const char *', 'const DEVMODEA *'], ['driver', 'device', 'output', 'init_data'], 'HDC'), 'CreateICA': (4, ['const char *', 'const char *', 'const char *', 'const DEVMODEA *'], ['driver', 'device', 'output', 'init_data'], 'HDC'), 'CreateICW': (4, ['const WCHAR *', 'const WCHAR *', 'const WCHAR *', 'const DEVMODEW *'], ['driver', 'device', 'output', 'init_data'], 'HDC'), 'DeleteDC': (1, ['HDC'], ['hdc'], 'BOOL'), 'ResetDCA': (2, ['HDC', 'const DEVMODEA *'], ['hdc', 'devmode'], 'HDC'), 'ResetDCW': (2, ['HDC', 'const DEVMODEW *'], ['hdc', 'devmode'], 'HDC'), 'SaveDC': (1, ['HDC'], ['hdc'], 'INT'), 'RestoreDC': (2, ['HDC', 'INT'], ['hdc', 'level'], 'BOOL'), 'GetDeviceCaps': (2, ['HDC', 'INT'], ['hdc', 'cap'], 'INT'), 'Escape': (5, ['HDC', 'INT', 'INT', 'const char *', 'void *'], ['hdc', 'escape', 'in_count', 'in_data', 'out_data'], 'INT'), 'ExtEscape': (6, ['HDC', 'INT', 'INT', 'const char *', 'INT', 'char *'], ['hdc', 'escape', 'input_size', 'input', 'output_size', 'output'], 'INT'), 'GetTextAlign': (1, ['HDC'], ['hdc'], 'UINT'), 'SetTextAlign': (2, ['HDC', 'UINT'], ['hdc', 'align'], 'UINT'), 'GetBkColor': (1, ['HDC'], ['hdc'], 'COLORREF'), 'SetBkColor': (2, ['HDC', 'COLORREF'], ['hdc', 'color'], 'COLORREF'), 'GetDCBrushColor': (1, ['HDC'], ['hdc'], 'COLORREF'), 'SetDCBrushColor': (2, ['HDC', 'COLORREF'], ['hdc', 'color'], 'COLORREF'), 'GetDCPenColor': (1, ['HDC'], ['hdc'], 'COLORREF'), 'SetDCPenColor': (2, ['HDC', 'COLORREF'], ['hdc', 'color'], 'COLORREF'), 'GetTextColor': (1, ['HDC'], ['hdc'], 'COLORREF'), 'SetTextColor': (2, ['HDC', 'COLORREF'], ['hdc', 'color'], 'COLORREF'), 'GetBkMode': (1, ['HDC'], ['hdc'], 'INT'), 'SetBkMode': (2, ['HDC', 'INT'], ['hdc', 'mode'], 'INT'), 'GetGraphicsMode': (1, ['HDC'], ['hdc'], 'INT'), 'SetGraphicsMode': (2, ['HDC', 'INT'], ['hdc', 'mode'], 'INT'), 'GetArcDirection': (1, ['HDC'], ['hdc'], 'INT'), 'SetArcDirection': (2, ['HDC', 'INT'], ['hdc', 'dir'], 'INT'), 'GetLayout': (1, ['HDC'], ['hdc'], 'DWORD'), 'SetLayout': (2, ['HDC', 'DWORD'], ['hdc', 'layout'], 'DWORD'), 'GetMapMode': (1, ['HDC'], ['hdc'], 'INT'), 'SetMapMode': (2, ['HDC', 'INT'], ['hdc', 'mode'], 'INT'), 'GetTextCharacterExtra': (1, ['HDC'], ['hdc'], 'INT'), 'SetTextCharacterExtra': (2, ['HDC', 'INT'], ['hdc', 'extra'], 'INT'), 'SetMapperFlags': (2, ['HDC', 'DWORD'], ['hdc', 'flags'], 'DWORD'), 'GetPolyFillMode': (1, ['HDC'], ['hdc'], 'INT'), 'SetPolyFillMode': (2, ['HDC', 'INT'], ['hdc', 'mode'], 'INT'), 'GetStretchBltMode': (1, ['HDC'], ['hdc'], 'INT'), 'GetBrushOrgEx': (2, ['HDC', 'POINT *'], ['hdc', 'point'], 'BOOL'), 'SetBrushOrgEx': (4, ['HDC', 'INT', 'INT', 'POINT *'], ['hdc', 'x', 'y', 'oldorg'], 'BOOL'), 'FixBrushOrgEx': (4, ['HDC', 'INT', 'INT', 'POINT *'], ['hdc', 'x', 'y', 'oldorg'], 'BOOL'), 'GetDCOrgEx': (2, ['HDC', 'POINT *'], ['hdc', 'point'], 'BOOL'), 'GetWindowExtEx': (2, ['HDC', 'SIZE *'], ['hdc', 'size'], 'BOOL'), 'SetWindowExtEx': (4, ['HDC', 'INT', 'INT', 'SIZE *'], ['hdc', 'x', 'y', 'size'], 'BOOL'), 'GetWindowOrgEx': (2, ['HDC', 'POINT *'], ['hdc', 'point'], 'BOOL'), 'SetWindowOrgEx': (4, ['HDC', 'INT', 'INT', 'POINT *'], ['hdc', 'x', 'y', 'point'], 'BOOL'), 'OffsetWindowOrgEx': (4, ['HDC', 'INT', 'INT', 'POINT *'], ['hdc', 'x', 'y', 'point'], 'BOOL'), 'GetViewportExtEx': (2, ['HDC', 'SIZE *'], ['hdc', 'size'], 'BOOL'), 'SetViewportExtEx': (4, ['HDC', 'INT', 'INT', 'LPSIZE'], ['hdc', 'x', 'y', 'size'], 'BOOL'), 'GetViewportOrgEx': (2, ['HDC', 'POINT *'], ['hdc', 'point'], 'BOOL'), 'SetViewportOrgEx': (4, ['HDC', 'INT', 'INT', 'POINT *'], ['hdc', 'x', 'y', 'point'], 'BOOL'), 'OffsetViewportOrgEx': (4, ['HDC', 'INT', 'INT', 'POINT *'], ['hdc', 'x', 'y', 'point'], 'BOOL'), 'GetWorldTransform': (2, ['HDC', 'XFORM *'], ['hdc', 'xform'], 'BOOL'), 'ModifyWorldTransform': (3, ['HDC', 'const XFORM *', 'DWORD'], ['hdc', 'xform', 'mode'], 'BOOL'), 'SetWorldTransform': (2, ['HDC', 'const XFORM *'], ['hdc', 'xform'], 'BOOL'), 'SetStretchBltMode': (2, ['HDC', 'INT'], ['hdc', 'mode'], 'INT'), 'GetCurrentPositionEx': (2, ['HDC', 'POINT *'], ['hdc', 'point'], 'BOOL'), 'GetROP2': (1, ['HDC'], ['hdc'], 'INT'), 'GetRelAbs': (2, ['HDC', 'DWORD'], ['hdc', 'ignore'], 'INT'), 'SetRelAbs': (2, ['HDC', 'INT'], ['hdc', 'mode'], 'INT'), 'SetROP2': (2, ['HDC', 'INT'], ['hdc', 'mode'], 'INT'), 'GetMiterLimit': (2, ['HDC', 'FLOAT *'], ['hdc', 'limit'], 'BOOL'), 'SetMiterLimit': (3, ['HDC', 'FLOAT', 'FLOAT *'], ['hdc', 'limit', 'old_limit'], 'BOOL'), 'SetPixel': (4, ['HDC', 'INT', 'INT', 'COLORREF'], ['hdc', 'x', 'y', 'color'], 'COLORREF'), 'SetPixelV': (4, ['HDC', 'INT', 'INT', 'COLORREF'], ['hdc', 'x', 'y', 'color'], 'BOOL'), 'LineTo': (3, ['HDC', 'INT', 'INT'], ['hdc', 'x', 'y'], 'BOOL'), 'MoveToEx': (4, ['HDC', 'INT', 'INT', 'POINT *'], ['hdc', 'x', 'y', 'pt'], 'BOOL'), 'Arc': (9, ['HDC', 'INT', 'INT', 'INT', 'INT', 'INT', 'INT', 'INT', 'INT'], ['hdc', 'left', 'top', 'right', 'bottom', 'xstart', 'ystart', 'xend', 'yend'], 'BOOL'), 'ArcTo': (9, ['HDC', 'INT', 'INT', 'INT', 'INT', 'INT', 'INT', 'INT', 'INT'], ['hdc', 'left', 'top', 'right', 'bottom', 'xstart', 'ystart', 'xend', 'yend'], 'BOOL'), 'Chord': (9, ['HDC', 'INT', 'INT', 'INT', 'INT', 'INT', 'INT', 'INT', 'INT'], ['hdc', 'left', 'top', 'right', 'bottom', 'xstart', 'ystart', 'xend', 'yend'], 'BOOL'), 'Pie': (9, ['HDC', 'INT', 'INT', 'INT', 'INT', 'INT', 'INT', 'INT', 'INT'], ['hdc', 'left', 'top', 'right', 'bottom', 'xstart', 'ystart', 'xend', 'yend'], 'BOOL'), 'AngleArc': (6, ['HDC', 'INT', 'INT', 'DWORD', 'FLOAT', 'FLOAT'], ['hdc', 'x', 'y', 'radius', 'start_angle', 'sweep_angle'], 'BOOL'), 'Ellipse': (5, ['HDC', 'INT', 'INT', 'INT', 'INT'], ['hdc', 'left', 'top', 'right', 'bottom'], 'BOOL'), 'Rectangle': (5, ['HDC', 'INT', 'INT', 'INT', 'INT'], ['hdc', 'left', 'top', 'right', 'bottom'], 'BOOL'), 'RoundRect': (7, ['HDC', 'INT', 'INT', 'INT', 'INT', 'INT', 'INT'], ['hdc', 'left', 'top', 'right', 'bottom', 'ell_width', 'ell_height'], 'BOOL'), 'Polygon': (3, ['HDC', 'const POINT *', 'INT'], ['hdc', 'points', 'count'], 'BOOL'), 'PolyPolygon': (4, ['HDC', 'const POINT *', 'const INT *', 'UINT'], ['hdc', 'points', 'counts', 'polygons'], 'BOOL'), 'Polyline': (3, ['HDC', 'const POINT *', 'INT'], ['hdc', 'points', 'count'], 'BOOL'), 'PolyPolyline': (4, ['HDC', 'const POINT *', 'const DWORD *', 'DWORD'], ['hdc', 'points', 'counts', 'polylines'], 'BOOL'), 'PolyBezier': (3, ['HDC', 'const POINT *', 'DWORD'], ['hdc', 'points', 'count'], 'BOOL'), 'PolyBezierTo': (3, ['HDC', 'const POINT *', 'DWORD'], ['hdc', 'points', 'count'], 'BOOL'), 'PolylineTo': (3, ['HDC', 'const POINT *', 'DWORD'], ['hdc', 'points', 'count'], 'BOOL'), 'PolyDraw': (4, ['HDC', 'const POINT *', 'const BYTE *', 'DWORD'], ['hdc', 'points', 'types', 'count'], 'BOOL'), 'FillRgn': (3, ['HDC', 'HRGN', 'HBRUSH'], ['hdc', 'hrgn', 'hbrush'], 'BOOL'), 'PaintRgn': (2, ['HDC', 'HRGN'], ['hdc', 'hrgn'], 'BOOL'), 'FrameRgn': (5, ['HDC', 'HRGN', 'HBRUSH', 'INT', 'INT'], ['hdc', 'hrgn', 'hbrush', 'width', 'height'], 'BOOL'), 'InvertRgn': (2, ['HDC', 'HRGN'], ['hdc', 'hrgn'], 'BOOL'), 'ExtFloodFill': (5, ['HDC', 'INT', 'INT', 'COLORREF', 'UINT'], ['hdc', 'x', 'y', 'color', 'fill_type'], 'BOOL'), 'FloodFill': (4, ['HDC', 'INT', 'INT', 'COLORREF'], ['hdc', 'x', 'y', 'color'], 'BOOL'), 'GdiGradientFill': (6, ['HDC', 'TRIVERTEX *', 'ULONG', 'void *', 'ULONG', 'ULONG'], ['hdc', 'vert_array', 'nvert', 'grad_array', 'ngrad', 'mode'], 'BOOL'), 'SetTextJustification': (3, ['HDC', 'INT', 'INT'], ['hdc', 'extra', 'breaks'], 'BOOL'), 'PatBlt': (6, ['HDC', 'INT', 'INT', 'INT', 'INT', 'DWORD'], ['hdc', 'left', 'top', 'width', 'height', 'rop'], 'BOOL'), 'StretchBlt': (11, ['HDC', 'INT', 'INT', 'INT', 'INT', 'HDC', 'INT', 'INT', 'INT', 'INT', 'DWORD'], ['hdc', 'x_dst', 'y_dst', 'width_dst', 'height_dst', 'hdc_src', 'x_src', 'y_src', 'width_src', 'height_src', 'rop'], 'BOOL'), 'MaskBlt': (12, ['HDC', 'INT', 'INT', 'INT', 'INT', 'HDC', 'INT', 'INT', 'HBITMAP', 'INT', 'INT', 'DWORD'], ['hdc', 'x_dst', 'y_dst', 'width_dst', 'height_dst', 'hdc_src', 'x_src', 'y_src', 'mask', 'x_mask', 'y_mask', 'rop'], 'BOOL'), 'PlgBlt': (10, ['HDC', 'const POINT *', 'HDC', 'INT', 'INT', 'INT', 'INT', 'HBITMAP', 'INT', 'INT'], ['hdc', 'points', 'hdc_src', 'x_src', 'y_src', 'width', 'height', 'mask', 'x_mask', 'y_mask'], 'BOOL'), 'GdiTransparentBlt': (11, ['HDC', 'int', 'int', 'int', 'int', 'HDC', 'int', 'int', 'int', 'int', 'UINT'], ['hdc', 'x_dst', 'y_dst', 'width_dst', 'height_dst', 'hdc_src', 'x_src', 'y_src', 'width_src', 'height_src', 'color'], 'BOOL'), 'GdiAlphaBlend': (11, ['HDC', 'int', 'int', 'int', 'int', 'HDC', 'int', 'int', 'int', 'int', 'BLENDFUNCTION'], ['hdc_dst', 'x_dst', 'y_dst', 'width_dst', 'height_dst', 'hdc_src', 'x_src', 'y_src', 'width_src', 'height_src', 'blend_function'], 'BOOL'), 'SetDIBitsToDevice': (12, ['HDC', 'INT', 'INT', 'DWORD', 'DWORD', 'INT', 'INT', 'UINT', 'UINT', 'const void *', 'const BITMAPINFO *', 'UINT'], ['hdc', 'x_dst', 'y_dst', 'cx', 'cy', 'x_src', 'y_src', 'startscan', 'lines', 'bits', 'bmi', 'coloruse'], 'INT'), 'BeginPath': (1, ['HDC'], ['hdc'], 'BOOL'), 'EndPath': (1, ['HDC'], ['hdc'], 'BOOL'), 'AbortPath': (1, ['HDC'], ['hdc'], 'BOOL'), 'CloseFigure': (1, ['HDC'], ['hdc'], 'BOOL'), 'FillPath': (1, ['HDC'], ['hdc'], 'BOOL'), 'StrokeAndFillPath': (1, ['HDC'], ['hdc'], 'BOOL'), 'StrokePath': (1, ['HDC'], ['hdc'], 'BOOL'), 'FlattenPath': (1, ['HDC'], ['hdc'], 'BOOL'), 'WidenPath': (1, ['HDC'], ['hdc'], 'BOOL'), 'SelectClipPath': (2, ['HDC', 'INT'], ['hdc', 'mode'], 'BOOL'), 'GetClipRgn': (2, ['HDC', 'HRGN'], ['hdc', 'rgn'], 'INT'), 'GetMetaRgn': (2, ['HDC', 'HRGN'], ['hdc', 'rgn'], 'INT'), 'IntersectClipRect': (5, ['HDC', 'INT', 'INT', 'INT', 'INT'], ['hdc', 'left', 'top', 'right', 'bottom'], 'INT'), 'OffsetClipRgn': (3, ['HDC', 'INT', 'INT'], ['hdc', 'x', 'y'], 'INT'), 'ExcludeClipRect': (5, ['HDC', 'INT', 'INT', 'INT', 'INT'], ['hdc', 'left', 'top', 'right', 'bottom'], 'INT'), 'ExtSelectClipRgn': (3, ['HDC', 'HRGN', 'INT'], ['hdc', 'hrgn', 'mode'], 'INT'), 'SelectClipRgn': (2, ['HDC', 'HRGN'], ['hdc', 'hrgn'], 'INT'), 'SetMetaRgn': (1, ['HDC'], ['hdc'], 'INT'), 'DPtoLP': (3, ['HDC', 'POINT *', 'INT'], ['hdc', 'points', 'count'], 'BOOL'), 'LPtoDP': (3, ['HDC', 'POINT *', 'INT'], ['hdc', 'points', 'count'], 'BOOL'), 'ScaleViewportExtEx': (6, ['HDC', 'INT', 'INT', 'INT', 'INT', 'SIZE *'], ['hdc', 'x_num', 'x_denom', 'y_num', 'y_denom', 'size'], 'BOOL'), 'ScaleWindowExtEx': (6, ['HDC', 'INT', 'INT', 'INT', 'INT', 'SIZE *'], ['hdc', 'x_num', 'x_denom', 'y_num', 'y_denom', 'size'], 'BOOL'), 'GDISelectPalette': (3, ['HDC', 'HPALETTE', 'WORD'], ['hdc', 'hpal', 'wBkg'], 'HPALETTE'), 'GDIRealizePalette': (1, ['HDC'], ['hdc'], 'UINT'), 'SelectPalette': (3, ['HDC', 'HPALETTE', 'BOOL'], ['hdc', 'palette', 'force_background'], 'HPALETTE'), 'RealizePalette': (1, ['HDC'], ['hdc'], 'UINT'), 'GdiSetPixelFormat': (3, ['HDC', 'INT', 'const PIXELFORMATDESCRIPTOR *'], ['hdc', 'format', 'descr'], 'BOOL'), 'CancelDC': (1, ['HDC'], ['hdc'], 'BOOL'), 'StartDocW': (2, ['HDC', 'const DOCINFOW *'], ['hdc', 'doc'], 'INT'), 'StartDocA': (2, ['HDC', 'const DOCINFOA *'], ['hdc', 'doc'], 'INT'), 'StartPage': (1, ['HDC'], ['hdc'], 'INT'), 'EndPage': (1, ['HDC'], ['hdc'], 'INT'), 'EndDoc': (1, ['HDC'], ['hdc'], 'INT'), 'AbortDoc': (1, ['HDC'], ['hdc'], 'INT'), 'SetAbortProc': (2, ['HDC', 'ABORTPROC'], ['hdc', 'abrtprc'], 'INT'), 'SetICMMode': (2, ['HDC', 'INT'], ['hdc', 'mode'], 'INT'), 'GdiIsMetaPrintDC': (1, ['HDC'], ['hdc'], 'BOOL'), 'GdiIsMetaFileDC': (1, ['HDC'], ['hdc'], 'BOOL'), 'GdiIsPlayMetafileDC': (1, ['HDC'], ['hdc'], 'BOOL'), 'DrawEscape': (4, ['HDC', 'INT', 'INT', 'const char *'], ['hdc', 'escape', 'input_size', 'input'], 'INT'), 'NamedEscape': (7, ['HDC', 'const WCHAR *', 'INT', 'INT', 'const char *', 'INT', 'char *'], ['hdc', 'driver', 'escape', 'input_size', 'input', 'output_size', 'output'], 'INT'), 'DdQueryDisplaySettingsUniqueness': (0, [], [], 'ULONG'), 'GdiComment': (3, ['HDC', 'UINT', 'const BYTE *'], ['hdc', 'bytes', 'buffer'], 'BOOL'), 'CreateEnhMetaFileA': (4, ['HDC', 'const char *', 'const RECT *', 'const char *'], ['hdc', 'filename', 'rect', 'description'], 'HDC'), 'CreateEnhMetaFileW': (4, ['HDC', 'const WCHAR *', 'const RECT *', 'const WCHAR *'], ['hdc', 'filename', 'rect', 'description'], 'HDC'), 'CloseEnhMetaFile': (1, ['HDC'], ['hdc'], 'HENHMETAFILE'), 'GetEnhMetaFileW': (1, ['LPCWSTR'], ['lpszMetaFile'], 'HENHMETAFILE'), 'SetEnhMetaFileBits': (2, ['UINT', 'const BYTE *'], ['bufsize', 'buf'], 'HENHMETAFILE'), 'GetEnhMetaFileBits': (3, ['HENHMETAFILE', 'UINT', 'LPBYTE'], ['hmf', 'bufsize', 'buf'], 'UINT'), 'DeleteEnhMetaFile': (1, ['HENHMETAFILE'], ['hmf'], 'BOOL'), 'CopyEnhMetaFileA': (2, ['HENHMETAFILE', 'LPCSTR'], ['hmfSrc', 'file'], 'HENHMETAFILE'), 'CopyEnhMetaFileW': (2, ['HENHMETAFILE', 'LPCWSTR'], ['hmfSrc', 'file'], 'HENHMETAFILE'), 'GetEnhMetaFilePaletteEntries': (3, ['HENHMETAFILE', 'UINT', 'LPPALETTEENTRY'], ['hEmf', 'cEntries', 'lpPe'], 'UINT'), 'SetWinMetaFileBits': (4, ['UINT', 'const BYTE *', 'HDC', 'const METAFILEPICT *'], ['cbBuffer', 'lpbBuffer', 'hdcRef', 'lpmfp'], 'HENHMETAFILE'), 'EnumICMProfilesA': (3, ['HDC', 'ICMENUMPROCA', 'LPARAM'], ['hdc', 'func', 'lparam'], 'INT'), 'EnumICMProfilesW': (3, ['HDC', 'ICMENUMPROCW', 'LPARAM'], ['hdc', 'func', 'lparam'], 'INT'), 'GetICMProfileA': (3, ['HDC', 'LPDWORD', 'LPSTR'], ['hdc', 'size', 'filename'], 'BOOL'), 'GetICMProfileW': (3, ['HDC', 'LPDWORD', 'LPWSTR'], ['hdc', 'size', 'filename'], 'BOOL'), 'GetLogColorSpaceA': (3, ['HCOLORSPACE', 'LPLOGCOLORSPACEA', 'DWORD'], ['colorspace', 'buffer', 'size'], 'BOOL'), 'GetLogColorSpaceW': (3, ['HCOLORSPACE', 'LPLOGCOLORSPACEW', 'DWORD'], ['colorspace', 'buffer', 'size'], 'BOOL'), 'SetICMProfileA': (2, ['HDC', 'LPSTR'], ['hdc', 'filename'], 'BOOL'), 'SetICMProfileW': (2, ['HDC', 'LPWSTR'], ['hdc', 'filename'], 'BOOL'), 'UpdateICMRegKeyA': (4, ['DWORD', 'LPSTR', 'LPSTR', 'UINT'], ['reserved', 'cmid', 'filename', 'command'], 'BOOL'), 'UpdateICMRegKeyW': (4, ['DWORD', 'LPWSTR', 'LPWSTR', 'UINT'], ['reserved', 'cmid', 'filename', 'command'], 'BOOL'), 'CreateMetaFileW': (1, ['const WCHAR *'], ['filename'], 'HDC'), 'CreateMetaFileA': (1, ['const char *'], ['filename'], 'HDC'), 'CloseMetaFile': (1, ['HDC'], ['hdc'], 'HMETAFILE'), 'DeleteMetaFile': (1, ['HMETAFILE'], ['hmf'], 'BOOL'), 'GetMetaFileA': (1, ['LPCSTR'], ['lpFilename'], 'HMETAFILE'), 'GetMetaFileW': (1, ['LPCWSTR'], ['lpFilename'], 'HMETAFILE'), 'CopyMetaFileW': (2, ['HMETAFILE', 'LPCWSTR'], ['hSrcMetaFile', 'lpFilename'], 'HMETAFILE'), 'CopyMetaFileA': (2, ['HMETAFILE', 'LPCSTR'], ['hSrcMetaFile', 'lpFilename'], 'HMETAFILE'), 'PlayMetaFile': (2, ['HDC', 'HMETAFILE'], ['hdc', 'hmf'], 'BOOL'), 'EnumMetaFile': (4, ['HDC', 'HMETAFILE', 'MFENUMPROC', 'LPARAM'], ['hdc', 'hmf', 'lpEnumFunc', 'lpData'], 'BOOL'), 'PlayMetaFileRecord': (4, ['HDC', 'HANDLETABLE *', 'METARECORD *', 'UINT'], ['hdc', 'ht', 'mr', 'handles'], 'BOOL'), 'SetMetaFileBitsEx': (2, ['UINT', 'const BYTE *'], ['size', 'lpData'], 'HMETAFILE'), 'GetMetaFileBitsEx': (3, ['HMETAFILE', 'UINT', 'void *'], ['hmf', 'buf_size', 'buf'], 'UINT'), 'GetWinMetaFileBits': (5, ['HENHMETAFILE', 'UINT', 'LPBYTE', 'INT', 'HDC'], ['hemf', 'cbBuffer', 'lpbBuffer', 'map_mode', 'hdcRef'], 'UINT'), 'DllMain': (3, ['HINSTANCE', 'DWORD', 'LPVOID'], ['inst', 'reason', 'reserved'], 'BOOL'), 'GetObjectType': (1, ['HGDIOBJ'], ['handle'], 'DWORD'), 'DeleteObject': (1, ['HGDIOBJ'], ['obj'], 'BOOL'), 'SelectObject': (2, ['HDC', 'HGDIOBJ'], ['hdc', 'obj'], 'HGDIOBJ'), 'GetObjectW': (3, ['HGDIOBJ', 'INT', 'void *'], ['handle', 'count', 'buffer'], 'INT'), 'GetCurrentObject': (2, ['HDC', 'UINT'], ['hdc', 'type'], 'HGDIOBJ'), 'GetStockObject': (1, ['INT'], ['obj'], 'HGDIOBJ'), 'GetObjectA': (3, ['HGDIOBJ', 'INT', 'void *'], ['handle', 'count', 'buffer'], 'INT'), 'CreatePenIndirect': (1, ['const LOGPEN *'], ['pen'], 'HPEN'), 'CreatePen': (3, ['INT', 'INT', 'COLORREF'], ['style', 'width', 'color'], 'HPEN'), 'ExtCreatePen': (5, ['DWORD', 'DWORD', 'const LOGBRUSH *', 'DWORD', 'const DWORD *'], ['style', 'width', 'brush', 'style_count', 'style_bits'], 'HPEN'), 'CreateBrushIndirect': (1, ['const LOGBRUSH *'], ['brush'], 'HBRUSH'), 'CreateSolidBrush': (1, ['COLORREF'], ['color'], 'HBRUSH'), 'CreateHatchBrush': (2, ['INT', 'COLORREF'], ['style', 'color'], 'HBRUSH'), 'CreatePatternBrush': (1, ['HBITMAP'], ['bitmap'], 'HBRUSH'), 'CreateDIBPatternBrush': (2, ['HGLOBAL', 'UINT'], ['hbitmap', 'coloruse'], 'HBRUSH'), 'CreateDIBPatternBrushPt': (2, ['const void *', 'UINT'], ['data', 'coloruse'], 'HBRUSH'), 'CreateBitmapIndirect': (1, ['const BITMAP *'], ['bmp'], 'HBITMAP'), 'CreateBitmap': (5, ['INT', 'INT', 'UINT', 'UINT', 'const void *'], ['width', 'height', 'planes', 'bpp', 'bits'], 'HBITMAP'), 'CreateCompatibleBitmap': (3, ['HDC', 'INT', 'INT'], ['hdc', 'width', 'height'], 'HBITMAP'), 'CreateDiscardableBitmap': (3, ['HDC', 'INT', 'INT'], ['hdc', 'width', 'height'], 'HBITMAP'), 'ExtCreateRegion': (3, ['const XFORM *', 'DWORD', 'const RGNDATA *'], ['xform', 'count', 'data'], 'HRGN'), 'CreatePolyPolygonRgn': (4, ['const POINT *', 'const INT *', 'INT', 'INT'], ['points', 'counts', 'count', 'mode'], 'HRGN'), 'CreateRectRgnIndirect': (1, ['const RECT*'], ['rect'], 'HRGN'), 'CreateEllipticRgnIndirect': (1, ['const RECT *'], ['rect'], 'HRGN'), 'CreatePolygonRgn': (3, ['const POINT *', 'INT', 'INT'], ['points', 'count', 'mode'], 'HRGN'), 'CreateColorSpaceA': (1, ['LOGCOLORSPACEA *'], ['cs'], 'HCOLORSPACE'), 'CreateColorSpaceW': (1, ['LOGCOLORSPACEW *'], ['cs'], 'HCOLORSPACE'), 'DeleteColorSpace': (1, ['HCOLORSPACE'], ['cs'], 'BOOL'), 'GetColorSpace': (1, ['HDC'], ['hdc'], 'HCOLORSPACE'), 'SetColorSpace': (2, ['HDC', 'HCOLORSPACE'], ['hdc', 'cs'], 'HCOLORSPACE'), 'CreatePalette': (1, ['const LOGPALETTE *'], ['palette'], 'HPALETTE'), 'GetPaletteEntries': (4, ['HPALETTE', 'UINT', 'UINT', 'PALETTEENTRY *'], ['palette', 'start', 'count', 'entries'], 'UINT'), 'SetPaletteEntries': (4, ['HPALETTE', 'UINT', 'UINT', 'const PALETTEENTRY *'], ['palette', 'start', 'count', 'entries'], 'UINT'), 'AnimatePalette': (4, ['HPALETTE', 'UINT', 'UINT', 'const PALETTEENTRY *'], ['palette', 'start', 'count', 'entries'], 'BOOL'), 'GetSystemPaletteEntries': (4, ['HDC', 'UINT', 'UINT', 'PALETTEENTRY *'], ['hdc', 'start', 'count', 'entries'], 'UINT'), 'CreateDIBitmap': (6, ['HDC', 'const BITMAPINFOHEADER *', 'DWORD', 'const void *', 'const BITMAPINFO *', 'UINT'], ['hdc', 'header', 'init', 'bits', 'data', 'coloruse'], 'HBITMAP'), 'GetDIBColorTable': (4, ['HDC', 'UINT', 'UINT', 'RGBQUAD *'], ['hdc', 'start', 'count', 'colors'], 'UINT'), 'SetDIBColorTable': (4, ['HDC', 'UINT', 'UINT', 'const RGBQUAD *'], ['hdc', 'start', 'count', 'colors'], 'UINT'), 'D3DKMTOpenAdapterFromGdiDisplayName': (1, ['D3DKMT_OPENADAPTERFROMGDIDISPLAYNAME *'], ['desc'], 'NTSTATUS'), 'SetObjectOwner': (2, ['HGDIOBJ', 'HANDLE'], ['handle', 'owner'], 'void'), 'GdiInitializeLanguagePack': (1, ['DWORD'], ['arg'], 'DWORD'), 'GdiGetBatchLimit': (0, [], [], 'DWORD'), 'GdiSetBatchLimit': (1, ['DWORD'], ['limit'], 'DWORD'), 'EnumObjects': (4, ['HDC', 'INT', 'GOBJENUMPROC', 'LPARAM'], ['hdc', 'type', 'enum_func', 'param'], 'INT'), 'CombineTransform': (3, ['XFORM *', 'const XFORM *', 'const XFORM *'], ['result', 'xform1', 'xform2'], 'BOOL'), 'LineDDA': (6, ['INT', 'INT', 'INT', 'INT', 'LINEDDAPROC', 'LPARAM'], ['x_start', 'y_start', 'x_end', 'y_end', 'callback', 'lparam'], 'BOOL'), 'GdiDllInitialize': (3, ['HINSTANCE', 'DWORD', 'LPVOID'], ['inst', 'reason', 'reserved'], 'BOOL'), 'ChoosePixelFormat': (2, ['HDC', 'const PIXELFORMATDESCRIPTOR *'], ['hdc', 'pfd'], 'INT'), 'DescribePixelFormat': (4, ['HDC', 'INT', 'UINT', 'PIXELFORMATDESCRIPTOR *'], ['hdc', 'fmt', 'size', 'pfd'], 'INT'), 'GetPixelFormat': (1, ['HDC'], ['hdc'], 'INT'), 'SetPixelFormat': (3, ['HDC', 'INT', 'const PIXELFORMATDESCRIPTOR *'], ['hdc', 'fmt', 'pfd'], 'BOOL'), 'SwapBuffers': (1, ['HDC'], ['hdc'], 'BOOL'), 'GdiGetCodePage': (1, ['HDC'], ['hdc'], 'DWORD'), 'CreateFontIndirectExA': (1, ['const ENUMLOGFONTEXDVA *'], ['enumexA'], 'HFONT'), 'CreateFontIndirectExW': (1, ['const ENUMLOGFONTEXDVW *'], ['enumex'], 'HFONT'), 'CreateFontIndirectA': (1, ['const LOGFONTA *'], ['lfA'], 'HFONT'), 'CreateFontIndirectW': (1, ['const LOGFONTW *'], ['lf'], 'HFONT'), 'CreateFontA': (14, ['INT', 'INT', 'INT', 'INT', 'INT', 'DWORD', 'DWORD', 'DWORD', 'DWORD', 'DWORD', 'DWORD', 'DWORD', 'DWORD', 'const char *'], ['height', 'width', 'esc', 'orient', 'weight', 'italic', 'underline', 'strikeout', 'charset', 'outpres', 'clippres', 'quality', 'pitch', 'name'], 'HFONT'), 'CreateFontW': (14, ['INT', 'INT', 'INT', 'INT', 'INT', 'DWORD', 'DWORD', 'DWORD', 'DWORD', 'DWORD', 'DWORD', 'DWORD', 'DWORD', 'const WCHAR *'], ['height', 'width', 'esc', 'orient', 'weight', 'italic', 'underline', 'strikeout', 'charset', 'outpres', 'clippres', 'quality', 'pitch', 'name'], 'HFONT'), 'ExtTextOutW': (8, ['HDC', 'INT', 'INT', 'UINT', 'const RECT *', 'const WCHAR *', 'UINT', 'const INT *'], ['hdc', 'x', 'y', 'flags', 'rect', 'str', 'count', 'dx'], 'BOOL'), 'ExtTextOutA': (8, ['HDC', 'INT', 'INT', 'UINT', 'const RECT *', 'const char *', 'UINT', 'const INT *'], ['hdc', 'x', 'y', 'flags', 'rect', 'str', 'count', 'dx'], 'BOOL'), 'TextOutA': (5, ['HDC', 'INT', 'INT', 'const char *', 'INT'], ['hdc', 'x', 'y', 'str', 'count'], 'BOOL'), 'TextOutW': (5, ['HDC', 'INT', 'INT', 'const WCHAR *', 'INT'], ['hdc', 'x', 'y', 'str', 'count'], 'BOOL'), 'PolyTextOutA': (3, ['HDC', 'const POLYTEXTA *', 'INT'], ['hdc', 'pt', 'count'], 'BOOL'), 'PolyTextOutW': (3, ['HDC', 'const POLYTEXTW *', 'INT'], ['hdc', 'pt', 'count'], 'BOOL'), 'GetCharacterPlacementW': (6, ['HDC', 'const WCHAR *', 'INT', 'INT', 'GCP_RESULTSW *', 'DWORD'], ['hdc', 'str', 'count', 'max_extent', 'result', 'flags'], 'DWORD'), 'GetCharacterPlacementA': (6, ['HDC', 'const char *', 'INT', 'INT', 'GCP_RESULTSA *', 'DWORD'], ['hdc', 'str', 'count', 'max_extent', 'result', 'flags'], 'DWORD'), 'GetTextFaceA': (3, ['HDC', 'INT', 'char *'], ['hdc', 'count', 'name'], 'INT'), 'GetTextFaceW': (3, ['HDC', 'INT', 'WCHAR *'], ['hdc', 'count', 'name'], 'INT'), 'GetTextExtentExPointW': (7, ['HDC', 'const WCHAR *', 'INT', 'INT', 'INT *', 'INT *', 'SIZE *'], ['hdc', 'str', 'count', 'max_ext', 'nfit', 'dxs', 'size'], 'BOOL'), 'GetTextExtentExPointI': (7, ['HDC', 'const WORD *', 'INT', 'INT', 'INT *', 'INT *', 'SIZE *'], ['hdc', 'indices', 'count', 'max_ext', 'nfit', 'dxs', 'size'], 'BOOL'), 'GetTextExtentExPointA': (7, ['HDC', 'const char *', 'INT', 'INT', 'INT *', 'INT *', 'SIZE *'], ['hdc', 'str', 'count', 'max_ext', 'nfit', 'dxs', 'size'], 'BOOL'), 'GetTextExtentPoint32W': (4, ['HDC', 'const WCHAR *', 'INT', 'SIZE *'], ['hdc', 'str', 'count', 'size'], 'BOOL'), 'GetTextExtentPoint32A': (4, ['HDC', 'const char *', 'INT', 'SIZE *'], ['hdc', 'str', 'count', 'size'], 'BOOL'), 'GetTextExtentPointI': (4, ['HDC', 'const WORD *', 'INT', 'SIZE *'], ['hdc', 'indices', 'count', 'size'], 'BOOL'), 'GetTextExtentPointA': (4, ['HDC', 'const char *', 'INT', 'SIZE *'], ['hdc', 'str', 'count', 'size'], 'BOOL'), 'GetTextExtentPointW': (4, ['HDC', 'const WCHAR *', 'INT', 'SIZE *'], ['hdc', 'str', 'count', 'size'], 'BOOL'), 'GetTextMetricsW': (2, ['HDC', 'TEXTMETRICW *'], ['hdc', 'metrics'], 'BOOL'), 'GetTextMetricsA': (2, ['HDC', 'TEXTMETRICA *'], ['hdc', 'metrics'], 'BOOL'), 'GetOutlineTextMetricsA': (3, ['HDC', 'UINT', 'OUTLINETEXTMETRICA *'], ['hdc', 'size', 'otm'], 'UINT'), 'GetOutlineTextMetricsW': (3, ['HDC', 'UINT', 'OUTLINETEXTMETRICW *'], ['hdc', 'size', 'otm'], 'UINT'), 'GetCharWidth32W': (4, ['HDC', 'UINT', 'UINT', 'INT *'], ['hdc', 'first', 'last', 'buffer'], 'BOOL'), 'GetCharWidth32A': (4, ['HDC', 'UINT', 'UINT', 'INT *'], ['hdc', 'first', 'last', 'buffer'], 'BOOL'), 'GetCharWidthFloatW': (4, ['HDC', 'UINT', 'UINT', 'float *'], ['hdc', 'first', 'last', 'buffer'], 'BOOL'), 'GetCharWidthFloatA': (4, ['HDC', 'UINT', 'UINT', 'float *'], ['hdc', 'first', 'last', 'buffer'], 'BOOL'), 'GetCharWidthI': (5, ['HDC', 'UINT', 'UINT', 'WORD *', 'INT *'], ['hdc', 'first', 'count', 'glyphs', 'buffer'], 'BOOL'), 'GetCharABCWidthsW': (4, ['HDC', 'UINT', 'UINT', 'ABC *'], ['hdc', 'first', 'last', 'abc'], 'BOOL'), 'GetCharABCWidthsA': (4, ['HDC', 'UINT', 'UINT', 'ABC *'], ['hdc', 'first', 'last', 'abc'], 'BOOL'), 'GetCharABCWidthsFloatW': (4, ['HDC', 'UINT', 'UINT', 'ABCFLOAT *'], ['hdc', 'first', 'last', 'abcf'], 'BOOL'), 'GetCharABCWidthsFloatA': (4, ['HDC', 'UINT', 'UINT', 'ABCFLOAT *'], ['hdc', 'first', 'last', 'abcf'], 'BOOL'), 'GetCharABCWidthsI': (5, ['HDC', 'UINT', 'UINT', 'WORD *', 'ABC *'], ['hdc', 'first', 'count', 'glyphs', 'buffer'], 'BOOL'), 'GetGlyphOutlineA': (7, ['HDC', 'UINT', 'UINT', 'GLYPHMETRICS *', 'DWORD', 'void *', 'const MAT2 *'], ['hdc', 'ch', 'format', 'metrics', 'size', 'buffer', 'mat2'], 'DWORD'), 'GetGlyphOutlineW': (7, ['HDC', 'UINT', 'UINT', 'GLYPHMETRICS *', 'DWORD', 'void *', 'const MAT2 *'], ['hdc', 'ch', 'format', 'metrics', 'size', 'buffer', 'mat2'], 'DWORD'), 'GetKerningPairsA': (3, ['HDC', 'DWORD', 'KERNINGPAIR *'], ['hdc', 'count', 'kern_pairA'], 'DWORD'), 'GetFontLanguageInfo': (1, ['HDC'], ['hdc'], 'DWORD'), 'GetGlyphIndicesA': (5, ['HDC', 'const char *', 'INT', 'WORD *', 'DWORD'], ['hdc', 'str', 'count', 'indices', 'flags'], 'DWORD'), 'GetAspectRatioFilterEx': (2, ['HDC', 'SIZE *'], ['hdc', 'aspect_ratio'], 'BOOL'), 'GetTextCharset': (1, ['HDC'], ['hdc'], 'UINT'), 'GdiGetCharDimensions': (3, ['HDC', 'TEXTMETRICW *', 'LONG *'], ['hdc', 'metric', 'height'], 'LONG'), 'EnableEUDC': (1, ['BOOL'], ['enable'], 'BOOL'), 'GetFontFileData': (5, ['DWORD', 'DWORD', 'UINT64', 'void *', 'DWORD'], ['instance_id', 'file_index', 'offset', 'buff', 'buff_size'], 'BOOL'), 'GdiRealizationInfo': (2, ['HDC', 'struct realization_info *'], ['hdc', 'info'], 'BOOL'), 'EnumFontFamiliesExW': (5, ['HDC', 'LOGFONTW *', 'FONTENUMPROCW', 'LPARAM', 'DWORD'], ['hdc', 'lf', 'efproc', 'lparam', 'flags'], 'INT'), 'EnumFontFamiliesExA': (5, ['HDC', 'LOGFONTA *', 'FONTENUMPROCA', 'LPARAM', 'DWORD'], ['hdc', 'lf', 'efproc', 'lparam', 'flags'], 'INT'), 'EnumFontFamiliesA': (4, ['HDC', 'const char *', 'FONTENUMPROCA', 'LPARAM'], ['hdc', 'family', 'efproc', 'data'], 'INT'), 'EnumFontFamiliesW': (4, ['HDC', 'const WCHAR *', 'FONTENUMPROCW', 'LPARAM'], ['hdc', 'family', 'efproc', 'data'], 'INT'), 'EnumFontsA': (4, ['HDC', 'const char *', 'FONTENUMPROCA', 'LPARAM'], ['hdc', 'name', 'efproc', 'data'], 'INT'), 'EnumFontsW': (4, ['HDC', 'const WCHAR *', 'FONTENUMPROCW', 'LPARAM'], ['hdc', 'name', 'efproc', 'data'], 'INT'), 'CreateScalableFontResourceA': (4, ['DWORD', 'const char *', 'const char *', 'const char *'], ['hidden', 'resource_file', 'font_file', 'current_path'], 'BOOL'), 'AddFontResourceA': (1, ['const char *'], ['str'], 'INT'), 'AddFontResourceW': (1, ['const WCHAR *'], ['str'], 'INT'), 'AddFontResourceExA': (3, ['const char *', 'DWORD', 'void *'], ['str', 'fl', 'pdv'], 'INT'), 'RemoveFontResourceA': (1, ['const char *'], ['str'], 'BOOL'), 'RemoveFontResourceW': (1, ['const WCHAR *'], ['str'], 'BOOL'), 'RemoveFontResourceExA': (3, ['const char *', 'DWORD', 'void *'], ['str', 'fl', 'pdv'], 'BOOL'), 'AddFontResourceExW': (3, ['const WCHAR *', 'DWORD', 'void *'], ['str', 'flags', 'dv'], 'INT'), 'RemoveFontResourceExW': (3, ['const WCHAR *', 'DWORD', 'void *'], ['str', 'flags', 'dv'], 'BOOL'), 'GetFontResourceInfoW': (4, ['const WCHAR *', 'DWORD *', 'void *', 'DWORD'], ['str', 'size', 'buffer', 'type'], 'BOOL'), 'AddFontMemResourceEx': (4, ['void *', 'DWORD', 'void *', 'DWORD *'], ['ptr', 'size', 'dv', 'count'], 'HANDLE'), 'CreateScalableFontResourceW': (4, ['DWORD', 'const WCHAR *', 'const WCHAR *', 'const WCHAR *'], ['hidden', 'resource_file', 'font_file', 'font_path'], 'BOOL'), 'TranslateCharsetInfo': (3, ['DWORD *', 'CHARSETINFO *', 'DWORD'], ['src', 'cs', 'flags'], 'BOOL')}


dictRS_gdi32 =  {'PlayMetaFile': 'True', 'SetMetaFileBitsEx': 'handle'}


dict4_gdiplus =  {'NotificationHook': (1, ['ULONG_PTR *'], ['token'], 'Status'), 'NotificationUnhook': (1, ['ULONG_PTR'], ['token'], 'void'), 'DllMain': (3, ['HINSTANCE', 'DWORD', 'LPVOID'], ['hinst', 'reason', 'reserved'], 'BOOL'), 'GdiplusStartup': (3, ['ULONG_PTR *', 'const struct GdiplusStartupInput *', 'struct GdiplusStartupOutput *'], ['token', 'input', 'output'], 'Status'), 'GdiplusNotificationHook': (1, ['ULONG_PTR *'], ['token'], 'GpStatus'), 'GdiplusNotificationUnhook': (1, ['ULONG_PTR'], ['token'], 'void')}


dictRS_gdiplus =  {}


dict4_imm32 =  {'User32InitializeImmEntryTable': (0, [], [], 'BOOL'), 'DllMain': (3, ['HINSTANCE', 'DWORD', 'LPVOID'], ['hInstDLL', 'fdwReason', 'lpReserved'], 'BOOL'), 'ImmSetActiveContext': (3, ['HWND', 'HIMC', 'BOOL'], ['hwnd', 'himc', 'activate'], 'BOOL'), 'ImmAssociateContext': (2, ['HWND', 'HIMC'], ['hWnd', 'hIMC'], 'HIMC'), 'ImmAssociateContextEx': (3, ['HWND', 'HIMC', 'DWORD'], ['hWnd', 'hIMC', 'dwFlags'], 'BOOL'), 'ImmConfigureIMEA': (4, ['HKL', 'HWND', 'DWORD', 'LPVOID'], ['hKL', 'hWnd', 'dwMode', 'lpData'], 'BOOL'), 'ImmConfigureIMEW': (4, ['HKL', 'HWND', 'DWORD', 'LPVOID'], ['hKL', 'hWnd', 'dwMode', 'lpData'], 'BOOL'), 'ImmCreateContext': (0, [], [], 'HIMC'), 'ImmDestroyContext': (1, ['HIMC'], ['hIMC'], 'BOOL'), 'ImmDisableIME': (1, ['DWORD'], ['idThread'], 'BOOL'), 'ImmEnumRegisterWordA': (6, ['HKL', 'REGISTERWORDENUMPROCA', 'LPCSTR', 'DWORD', 'LPCSTR', 'LPVOID'], ['hKL', 'lpfnEnumProc', 'lpszReading', 'dwStyle', 'lpszRegister', 'lpData'], 'UINT'), 'ImmEnumRegisterWordW': (6, ['HKL', 'REGISTERWORDENUMPROCW', 'LPCWSTR', 'DWORD', 'LPCWSTR', 'LPVOID'], ['hKL', 'lpfnEnumProc', 'lpszReading', 'dwStyle', 'lpszRegister', 'lpData'], 'UINT'), 'ImmEscapeA': (4, ['HKL', 'HIMC', 'UINT', 'LPVOID'], ['hKL', 'hIMC', 'uEscape', 'lpData'], 'LRESULT'), 'ImmEscapeW': (4, ['HKL', 'HIMC', 'UINT', 'LPVOID'], ['hKL', 'hIMC', 'uEscape', 'lpData'], 'LRESULT'), 'ImmGetCandidateListA': (4, ['HIMC', 'DWORD', 'LPCANDIDATELIST', 'DWORD'], ['hIMC', 'dwIndex', 'lpCandList', 'dwBufLen'], 'DWORD'), 'ImmGetCandidateListCountA': (2, ['HIMC', 'LPDWORD'], ['hIMC', 'lpdwListCount'], 'DWORD'), 'ImmGetCandidateListCountW': (2, ['HIMC', 'LPDWORD'], ['hIMC', 'lpdwListCount'], 'DWORD'), 'ImmGetCandidateListW': (4, ['HIMC', 'DWORD', 'LPCANDIDATELIST', 'DWORD'], ['hIMC', 'dwIndex', 'lpCandList', 'dwBufLen'], 'DWORD'), 'ImmGetCandidateWindow': (3, ['HIMC', 'DWORD', 'LPCANDIDATEFORM'], ['hIMC', 'dwIndex', 'lpCandidate'], 'BOOL'), 'ImmGetCompositionFontA': (2, ['HIMC', 'LPLOGFONTA'], ['hIMC', 'lplf'], 'BOOL'), 'ImmGetCompositionFontW': (2, ['HIMC', 'LPLOGFONTW'], ['hIMC', 'lplf'], 'BOOL'), 'ImmGetCompositionStringA': (4, ['HIMC', 'DWORD', 'LPVOID', 'DWORD'], ['hIMC', 'dwIndex', 'lpBuf', 'dwBufLen'], 'LONG'), 'ImmGetCompositionStringW': (4, ['HIMC', 'DWORD', 'LPVOID', 'DWORD'], ['hIMC', 'dwIndex', 'lpBuf', 'dwBufLen'], 'LONG'), 'ImmGetCompositionWindow': (2, ['HIMC', 'LPCOMPOSITIONFORM'], ['hIMC', 'lpCompForm'], 'BOOL'), 'ImmGetContext': (1, ['HWND'], ['hWnd'], 'HIMC'), 'ImmGetConversionListA': (6, ['HKL', 'HIMC', 'LPCSTR', 'LPCANDIDATELIST', 'DWORD', 'UINT'], ['hKL', 'hIMC', 'pSrc', 'lpDst', 'dwBufLen', 'uFlag'], 'DWORD'), 'ImmGetConversionListW': (6, ['HKL', 'HIMC', 'LPCWSTR', 'LPCANDIDATELIST', 'DWORD', 'UINT'], ['hKL', 'hIMC', 'pSrc', 'lpDst', 'dwBufLen', 'uFlag'], 'DWORD'), 'ImmGetConversionStatus': (3, ['HIMC', 'LPDWORD', 'LPDWORD'], ['hIMC', 'lpfdwConversion', 'lpfdwSentence'], 'BOOL'), 'ImmGetDefaultIMEWnd': (1, ['HWND'], ['hWnd'], 'HWND'), 'ImmGetDescriptionA': (3, ['HKL', 'LPSTR', 'UINT'], ['hKL', 'lpszDescription', 'uBufLen'], 'UINT'), 'ImmGetDescriptionW': (3, ['HKL', 'LPWSTR', 'UINT'], ['hKL', 'lpszDescription', 'uBufLen'], 'UINT'), 'ImmGetGuideLineA': (4, ['HIMC', 'DWORD', 'LPSTR', 'DWORD'], ['hIMC', 'dwIndex', 'lpBuf', 'dwBufLen'], 'DWORD'), 'ImmGetGuideLineW': (4, ['HIMC', 'DWORD', 'LPWSTR', 'DWORD'], ['hIMC', 'dwIndex', 'lpBuf', 'dwBufLen'], 'DWORD'), 'ImmGetIMEFileNameA': (3, ['HKL', 'LPSTR', 'UINT'], ['hKL', 'lpszFileName', 'uBufLen'], 'UINT'), 'ImmGetIMEFileNameW': (3, ['HKL', 'LPWSTR', 'UINT'], ['hKL', 'lpszFileName', 'uBufLen'], 'UINT'), 'ImmGetOpenStatus': (1, ['HIMC'], ['hIMC'], 'BOOL'), 'ImmGetProperty': (2, ['HKL', 'DWORD'], ['hKL', 'fdwIndex'], 'DWORD'), 'ImmGetRegisterWordStyleA': (3, ['HKL', 'UINT', 'LPSTYLEBUFA'], ['hKL', 'nItem', 'lpStyleBuf'], 'UINT'), 'ImmGetRegisterWordStyleW': (3, ['HKL', 'UINT', 'LPSTYLEBUFW'], ['hKL', 'nItem', 'lpStyleBuf'], 'UINT'), 'ImmGetStatusWindowPos': (2, ['HIMC', 'LPPOINT'], ['hIMC', 'lpptPos'], 'BOOL'), 'ImmGetVirtualKey': (1, ['HWND'], ['hWnd'], 'UINT'), 'ImmInstallIMEA': (2, ['LPCSTR', 'LPCSTR'], ['lpszIMEFileName', 'lpszLayoutText'], 'HKL'), 'ImmInstallIMEW': (2, ['LPCWSTR', 'LPCWSTR'], ['lpszIMEFileName', 'lpszLayoutText'], 'HKL'), 'ImmIsIME': (1, ['HKL'], ['hKL'], 'BOOL'), 'ImmIsUIMessageA': (4, ['HWND', 'UINT', 'WPARAM', 'LPARAM'], ['hWndIME', 'msg', 'wParam', 'lParam'], 'BOOL'), 'ImmIsUIMessageW': (4, ['HWND', 'UINT', 'WPARAM', 'LPARAM'], ['hWndIME', 'msg', 'wParam', 'lParam'], 'BOOL'), 'ImmNotifyIME': (4, ['HIMC', 'DWORD', 'DWORD', 'DWORD'], ['hIMC', 'dwAction', 'dwIndex', 'dwValue'], 'BOOL'), 'ImmRegisterWordA': (4, ['HKL', 'LPCSTR', 'DWORD', 'LPCSTR'], ['hKL', 'lpszReading', 'dwStyle', 'lpszRegister'], 'BOOL'), 'ImmRegisterWordW': (4, ['HKL', 'LPCWSTR', 'DWORD', 'LPCWSTR'], ['hKL', 'lpszReading', 'dwStyle', 'lpszRegister'], 'BOOL'), 'ImmReleaseContext': (2, ['HWND', 'HIMC'], ['hWnd', 'hIMC'], 'BOOL'), 'ImmRequestMessageA': (3, ['HIMC', 'WPARAM', 'LPARAM'], ['hIMC', 'wParam', 'lParam'], 'LRESULT'), 'ImmRequestMessageW': (3, ['HIMC', 'WPARAM', 'LPARAM'], ['hIMC', 'wParam', 'lParam'], 'LRESULT'), 'ImmSetCandidateWindow': (2, ['HIMC', 'LPCANDIDATEFORM'], ['hIMC', 'lpCandidate'], 'BOOL'), 'ImmSetCompositionFontA': (2, ['HIMC', 'LPLOGFONTA'], ['hIMC', 'lplf'], 'BOOL'), 'ImmSetCompositionFontW': (2, ['HIMC', 'LPLOGFONTW'], ['hIMC', 'lplf'], 'BOOL'), 'ImmSetCompositionStringA': (6, ['HIMC', 'DWORD', 'LPCVOID', 'DWORD', 'LPCVOID', 'DWORD'], ['hIMC', 'dwIndex', 'lpComp', 'dwCompLen', 'lpRead', 'dwReadLen'], 'BOOL'), 'ImmSetCompositionStringW': (6, ['HIMC', 'DWORD', 'LPCVOID', 'DWORD', 'LPCVOID', 'DWORD'], ['hIMC', 'dwIndex', 'lpComp', 'dwCompLen', 'lpRead', 'dwReadLen'], 'BOOL'), 'ImmSetCompositionWindow': (2, ['HIMC', 'LPCOMPOSITIONFORM'], ['hIMC', 'lpCompForm'], 'BOOL'), 'ImmSetConversionStatus': (3, ['HIMC', 'DWORD', 'DWORD'], ['hIMC', 'fdwConversion', 'fdwSentence'], 'BOOL'), 'ImmSetOpenStatus': (2, ['HIMC', 'BOOL'], ['hIMC', 'fOpen'], 'BOOL'), 'ImmSetStatusWindowPos': (2, ['HIMC', 'LPPOINT'], ['hIMC', 'lpptPos'], 'BOOL'), 'ImmCreateSoftKeyboard': (4, ['UINT', 'UINT', 'int', 'int'], ['uType', 'hOwner', 'x', 'y'], 'HWND'), 'ImmDestroySoftKeyboard': (1, ['HWND'], ['hSoftWnd'], 'BOOL'), 'ImmShowSoftKeyboard': (2, ['HWND', 'int'], ['hSoftWnd', 'nCmdShow'], 'BOOL'), 'ImmSimulateHotKey': (2, ['HWND', 'DWORD'], ['hWnd', 'dwHotKeyID'], 'BOOL'), 'ImmUnregisterWordA': (4, ['HKL', 'LPCSTR', 'DWORD', 'LPCSTR'], ['hKL', 'lpszReading', 'dwStyle', 'lpszUnregister'], 'BOOL'), 'ImmUnregisterWordW': (4, ['HKL', 'LPCWSTR', 'DWORD', 'LPCWSTR'], ['hKL', 'lpszReading', 'dwStyle', 'lpszUnregister'], 'BOOL'), 'ImmGetImeMenuItemsA': (6, ['HIMC', 'DWORD', 'DWORD', 'LPIMEMENUITEMINFOA', 'LPIMEMENUITEMINFOA', 'DWORD'], ['hIMC', 'dwFlags', 'dwType', 'lpImeParentMenu', 'lpImeMenu', 'dwSize'], 'DWORD'), 'ImmGetImeMenuItemsW': (6, ['HIMC', 'DWORD', 'DWORD', 'LPIMEMENUITEMINFOW', 'LPIMEMENUITEMINFOW', 'DWORD'], ['hIMC', 'dwFlags', 'dwType', 'lpImeParentMenu', 'lpImeMenu', 'dwSize'], 'DWORD'), 'ImmLockIMC': (1, ['HIMC'], ['hIMC'], 'LPINPUTCONTEXT'), 'ImmUnlockIMC': (1, ['HIMC'], ['hIMC'], 'BOOL'), 'ImmGetIMCLockCount': (1, ['HIMC'], ['hIMC'], 'DWORD'), 'ImmDestroyIMCC': (1, ['HIMCC'], ['block'], 'HIMCC'), 'ImmLockIMCC': (1, ['HIMCC'], ['imcc'], 'LPVOID'), 'ImmUnlockIMCC': (1, ['HIMCC'], ['imcc'], 'BOOL'), 'ImmGetIMCCLockCount': (1, ['HIMCC'], ['imcc'], 'DWORD'), 'ImmGetIMCCSize': (1, ['HIMCC'], ['imcc'], 'DWORD'), 'ImmGenerateMessage': (1, ['HIMC'], ['hIMC'], 'BOOL'), 'ImmTranslateMessage': (4, ['HWND', 'UINT', 'WPARAM', 'LPARAM'], ['hwnd', 'msg', 'wParam', 'lKeyData'], 'BOOL'), 'ImmProcessKey': (5, ['HWND', 'HKL', 'UINT', 'LPARAM', 'DWORD'], ['hwnd', 'hKL', 'vKey', 'lKeyData', 'unknown'], 'BOOL'), 'ImmDisableTextFrameService': (1, ['DWORD'], ['idThread'], 'BOOL'), 'ImmEnumInputContext': (3, ['DWORD', 'IMCENUMPROC', 'LPARAM'], ['idThread', 'lpfn', 'lParam'], 'BOOL'), 'ImmGetHotKey': (4, ['DWORD', 'UINT *', 'UINT *', 'HKL'], ['hotkey', 'modifiers', 'key', 'hkl'], 'BOOL'), 'ImmDisableLegacyIME': (0, [], [], 'BOOL')}


dictRS_imm32 =  {}


dict4_kernel32 =  {'InitAtomTable': (1, ['DWORD'], ['entries'], 'BOOL'), 'GlobalAddAtomW': (1, ['LPCWSTR'], ['str'], 'ATOM'), 'AddAtomW': (1, ['LPCWSTR'], ['str'], 'ATOM'), 'GlobalFindAtomW': (1, ['LPCWSTR'], ['str'], 'ATOM'), 'FindAtomW': (1, ['LPCWSTR'], ['str'], 'ATOM'), 'GlobalGetAtomNameW': (3, ['ATOM', 'LPWSTR', 'INT'], ['atom', 'buffer', 'count'], 'UINT'), 'GetAtomNameW': (3, ['ATOM', 'LPWSTR', 'INT'], ['atom', 'buffer', 'count'], 'UINT'), 'SetDefaultCommConfigW': (3, ['LPCWSTR', 'LPCOMMCONFIG', 'DWORD'], ['lpszDevice', 'lpCommConfig', 'dwSize'], 'BOOL'), 'SetDefaultCommConfigA': (3, ['LPCSTR', 'LPCOMMCONFIG', 'DWORD'], ['lpszDevice', 'lpCommConfig', 'dwSize'], 'BOOL'), 'GetComputerNameW': (2, ['LPWSTR', 'LPDWORD'], ['name', 'size'], 'BOOL'), 'GetComputerNameA': (2, ['LPSTR', 'LPDWORD'], ['name', 'size'], 'BOOL'), 'DnsHostnameToComputerNameA': (3, ['LPCSTR', 'LPSTR', 'LPDWORD'], ['hostname', 'computername', 'size'], 'BOOL'), 'DnsHostnameToComputerNameW': (3, ['LPCWSTR', 'LPWSTR', 'LPDWORD'], ['hostname', 'computername', 'size'], 'BOOL'), 'GetConsoleWindow': (0, [], [], 'HWND'), 'OpenConsoleW': (4, ['LPCWSTR', 'DWORD', 'BOOL', 'DWORD'], ['name', 'access', 'inherit', 'creation'], 'HANDLE'), 'VerifyConsoleIoHandle': (1, ['HANDLE'], ['handle'], 'BOOL'), 'DuplicateConsoleHandle': (4, ['HANDLE', 'DWORD', 'BOOL', 'DWORD'], ['handle', 'access', 'inherit', 'options'], 'HANDLE'), 'CloseConsoleHandle': (1, ['HANDLE'], ['handle'], 'BOOL'), 'GetConsoleInputWaitHandle': (0, [], [], 'HANDLE'), 'SetConsoleTitleA': (1, ['LPCSTR'], ['title'], 'BOOL'), 'GetConsoleKeyboardLayoutNameA': (1, ['LPSTR'], ['layoutName'], 'BOOL'), 'GetConsoleKeyboardLayoutNameW': (1, ['LPWSTR'], ['layoutName'], 'BOOL'), 'GetConsoleTitleA': (2, ['LPSTR', 'DWORD'], ['title', 'size'], 'DWORD'), 'GetNumberOfConsoleMouseButtons': (1, ['LPDWORD'], ['nrofbuttons'], 'BOOL'), 'GetConsoleDisplayMode': (1, ['LPDWORD'], ['lpModeFlags'], 'BOOL'), 'SetConsoleDisplayMode': (3, ['HANDLE', 'DWORD', 'COORD *'], ['hConsoleOutput', 'dwFlags', 'lpNewScreenBufferDimensions'], 'BOOL'), 'GetConsoleAliasW': (4, ['LPWSTR', 'LPWSTR', 'DWORD', 'LPWSTR'], ['lpSource', 'lpTargetBuffer', 'TargetBufferLength', 'lpExename'], 'DWORD'), 'GetConsoleProcessList': (2, ['LPDWORD', 'DWORD'], ['processlist', 'processcount'], 'DWORD'), 'GetConsoleCommandHistoryA': (3, ['DWORD', 'DWORD', 'DWORD'], ['unknown1', 'unknown2', 'unknown3'], 'DWORD'), 'GetConsoleCommandHistoryW': (3, ['DWORD', 'DWORD', 'DWORD'], ['unknown1', 'unknown2', 'unknown3'], 'DWORD'), 'GetConsoleCommandHistoryLengthA': (1, ['LPCSTR'], ['unknown'], 'DWORD'), 'GetConsoleCommandHistoryLengthW': (1, ['LPCWSTR'], ['unknown'], 'DWORD'), 'GetConsoleAliasesLengthA': (0, [], [], 'DWORD'), 'GetConsoleAliasesLengthW': (0, [], [], 'DWORD'), 'GetConsoleAliasExesLengthA': (0, [], [], 'DWORD'), 'GetConsoleAliasExesLengthW': (0, [], [], 'DWORD'), 'ExpungeConsoleCommandHistoryA': (0, [], [], 'VOID'), 'ExpungeConsoleCommandHistoryW': (0, [], [], 'VOID'), 'AddConsoleAliasA': (0, [], [], 'BOOL'), 'AddConsoleAliasW': (0, [], [], 'BOOL'), 'SetConsoleIcon': (0, [], [], 'BOOL'), 'GetNumberOfConsoleFonts': (0, [], [], 'DWORD'), 'SetConsoleFont': (0, [], [], 'BOOL'), 'SetConsoleKeyShortcuts': (4, ['BOOL', 'BYTE', 'VOID *', 'DWORD'], ['set', 'keys', 'a', 'b'], 'BOOL'), 'GetCurrentConsoleFontEx': (0, [], [], 'BOOL'), 'GetCurrentConsoleFont': (0, [], [], 'BOOL'), 'GetConsoleFontSize': (0, [], [], 'COORD'), 'GetConsoleFontInfo': (4, ['HANDLE', 'BOOL', 'DWORD', 'CONSOLE_FONT_INFO *'], ['hConsole', 'maximize', 'numfonts', 'info'], 'BOOL'), 'SetCurrentConsoleFontEx': (3, ['HANDLE', 'BOOL', 'CONSOLE_FONT_INFOEX *'], ['hConsole', 'maxwindow', 'cfix'], 'BOOL'), 'DebugBreakProcess': (1, ['HANDLE'], ['process'], 'BOOL'), 'DebugSetProcessKillOnExit': (1, ['BOOL'], ['kill'], 'BOOL'), 'SetFileCompletionNotificationModes': (2, ['HANDLE', 'UCHAR'], ['file', 'flags'], 'BOOL'), 'SetHandleCount': (1, ['UINT'], ['count'], 'UINT'), 'DosDateTimeToFileTime': (3, ['WORD', 'WORD', 'FILETIME *'], ['fatdate', 'fattime', 'ft'], 'BOOL'), 'FileTimeToDosDateTime': (3, ['const FILETIME *', 'WORD *', 'WORD *'], ['ft', 'fatdate', 'fattime'], 'BOOL'), 'ReplaceFileA': (6, ['LPCSTR', 'LPCSTR', 'LPCSTR', 'DWORD', 'LPVOID', 'LPVOID'], ['lpReplacedFileName', 'lpReplacementFileName', 'lpBackupFileName', 'dwReplaceFlags', 'lpExclude', 'lpReserved'], 'BOOL'), 'OpenVxDHandle': (1, ['HANDLE'], ['hHandleRing3'], 'HANDLE'), 'OpenFile': (3, ['LPCSTR', 'OFSTRUCT *', 'UINT'], ['name', 'ofs', 'mode'], 'HFILE'), 'GlobalLock': (1, ['HGLOBAL'], ['hmem'], 'LPVOID'), 'GlobalUnlock': (1, ['HGLOBAL'], ['hmem'], 'BOOL'), 'GlobalReAlloc': (3, ['HGLOBAL', 'SIZE_T', 'UINT'], ['hmem', 'size', 'flags'], 'HGLOBAL'), 'GlobalSize': (1, ['HGLOBAL'], ['hmem'], 'SIZE_T'), 'GlobalWire': (1, ['HGLOBAL'], ['hmem'], 'LPVOID'), 'GlobalUnWire': (1, ['HGLOBAL'], ['hmem'], 'BOOL'), 'GlobalFix': (1, ['HGLOBAL'], ['hmem'], 'VOID'), 'GlobalUnfix': (1, ['HGLOBAL'], ['hmem'], 'VOID'), 'GlobalFlags': (1, ['HGLOBAL'], ['hmem'], 'UINT'), 'GlobalCompact': (1, ['DWORD'], ['minfree'], 'SIZE_T'), 'LocalCompact': (1, ['UINT'], ['minfree'], 'SIZE_T'), 'LocalShrink': (2, ['HGLOBAL', 'UINT'], ['handle', 'newsize'], 'SIZE_T'), 'GlobalMemoryStatus': (1, ['LPMEMORYSTATUS'], ['lpBuffer'], 'VOID'), 'GetStartupInfoA': (1, ['LPSTARTUPINFOA'], ['info'], 'VOID'), 'DllMain': (3, ['HINSTANCE', 'DWORD', 'LPVOID'], ['hinst', 'reason', 'reserved'], 'BOOL'), 'MulDiv': (3, ['INT', 'INT', 'INT'], ['nMultiplicand', 'nMultiplier', 'nDivisor'], 'INT'), 'GetSystemRegistryQuota': (2, ['PDWORD', 'PDWORD'], ['pdwQuotaAllowed', 'pdwQuotaUsed'], 'BOOL'), 'GetDateFormatA': (6, ['LCID', 'DWORD', 'const SYSTEMTIME*', 'LPCSTR', 'LPSTR', 'INT'], ['lcid', 'dwFlags', 'lpTime', 'lpFormat', 'lpDateStr', 'cchOut'], 'INT'), 'GetDateFormatEx': (7, ['LPCWSTR', 'DWORD', 'const SYSTEMTIME*', 'LPCWSTR', 'LPWSTR', 'INT', 'LPCWSTR'], ['localename', 'flags', 'date', 'format', 'outbuf', 'bufsize', 'calendar'], 'INT'), 'GetDateFormatW': (6, ['LCID', 'DWORD', 'const SYSTEMTIME*', 'LPCWSTR', 'LPWSTR', 'INT'], ['lcid', 'dwFlags', 'lpTime', 'lpFormat', 'lpDateStr', 'cchOut'], 'INT'), 'GetTimeFormatA': (6, ['LCID', 'DWORD', 'const SYSTEMTIME*', 'LPCSTR', 'LPSTR', 'INT'], ['lcid', 'dwFlags', 'lpTime', 'lpFormat', 'lpTimeStr', 'cchOut'], 'INT'), 'GetTimeFormatEx': (6, ['LPCWSTR', 'DWORD', 'const SYSTEMTIME*', 'LPCWSTR', 'LPWSTR', 'INT'], ['localename', 'flags', 'time', 'format', 'outbuf', 'bufsize'], 'INT'), 'GetTimeFormatW': (6, ['LCID', 'DWORD', 'const SYSTEMTIME*', 'LPCWSTR', 'LPWSTR', 'INT'], ['lcid', 'dwFlags', 'lpTime', 'lpFormat', 'lpTimeStr', 'cchOut'], 'INT'), 'GetNumberFormatA': (6, ['LCID', 'DWORD', 'LPCSTR', 'const NUMBERFMTA *', 'LPSTR', 'int'], ['lcid', 'dwFlags', 'lpszValue', 'lpFormat', 'lpNumberStr', 'cchOut'], 'INT'), 'GetNumberFormatW': (6, ['LCID', 'DWORD', 'LPCWSTR', 'const NUMBERFMTW *', 'LPWSTR', 'int'], ['lcid', 'dwFlags', 'lpszValue', 'lpFormat', 'lpNumberStr', 'cchOut'], 'INT'), 'GetNumberFormatEx': (6, ['LPCWSTR', 'DWORD', 'LPCWSTR', 'const NUMBERFMTW *', 'LPWSTR', 'int'], ['name', 'flags', 'value', 'format', 'number', 'numout'], 'INT'), 'GetCurrencyFormatA': (6, ['LCID', 'DWORD', 'LPCSTR', 'const CURRENCYFMTA *', 'LPSTR', 'int'], ['lcid', 'dwFlags', 'lpszValue', 'lpFormat', 'lpCurrencyStr', 'cchOut'], 'INT'), 'GetCurrencyFormatW': (6, ['LCID', 'DWORD', 'LPCWSTR', 'const CURRENCYFMTW *', 'LPWSTR', 'int'], ['lcid', 'dwFlags', 'lpszValue', 'lpFormat', 'lpCurrencyStr', 'cchOut'], 'INT'), 'GetCurrencyFormatEx': (6, ['LPCWSTR', 'DWORD', 'LPCWSTR', 'const CURRENCYFMTW *', 'LPWSTR', 'int'], ['localename', 'flags', 'value', 'format', 'str', 'len'], 'int'), 'GetCalendarInfoA': (6, ['LCID', 'CALID', 'CALTYPE', 'LPSTR', 'int', 'DWORD *'], ['lcid', 'id', 'type', 'data', 'size', 'val'], 'int'), 'SetCalendarInfoA': (4, ['LCID', 'CALID', 'CALTYPE', 'LPCSTR'], ['lcid', 'id', 'type', 'data'], 'int'), 'SetLocaleInfoA': (3, ['LCID', 'LCTYPE', 'LPCSTR'], ['lcid', 'lctype', 'data'], 'BOOL'), 'SetCPGlobal': (1, ['UINT'], ['acp'], 'UINT'), 'GetCPInfoExA': (3, ['UINT', 'DWORD', 'LPCPINFOEXA'], ['codepage', 'dwFlags', 'cpinfo'], 'BOOL'), 'GetDaylightFlag': (0, [], [], 'BOOL'), 'EnumSystemCodePagesA': (2, ['CODEPAGE_ENUMPROCA', 'DWORD'], ['proc', 'flags'], 'BOOL'), 'GetStringTypeExA': (5, ['LCID', 'DWORD', 'LPCSTR', 'INT', 'LPWORD'], ['locale', 'type', 'src', 'count', 'chartype'], 'BOOL'), 'FoldStringA': (5, ['DWORD', 'LPCSTR', 'INT', 'LPSTR', 'INT'], ['dwFlags', 'src', 'srclen', 'dst', 'dstlen'], 'INT'), 'EnumSystemLanguageGroupsA': (3, ['LANGUAGEGROUP_ENUMPROCA', 'DWORD', 'LONG_PTR'], ['proc', 'flags', 'param'], 'BOOL'), 'EnumLanguageGroupLocalesA': (4, ['LANGGROUPLOCALE_ENUMPROCA', 'LGRPID', 'DWORD', 'LONG_PTR'], ['proc', 'id', 'flags', 'param'], 'BOOL'), 'EnumCalendarInfoA': (4, ['CALINFO_ENUMPROCA', 'LCID', 'CALID', 'CALTYPE'], ['proc', 'lcid', 'id', 'type'], 'BOOL'), 'EnumCalendarInfoExA': (4, ['CALINFO_ENUMPROCEXA', 'LCID', 'CALID', 'CALTYPE'], ['proc', 'lcid', 'id', 'type'], 'BOOL'), 'EnumDateFormatsExA': (3, ['DATEFMT_ENUMPROCEXA', 'LCID', 'DWORD'], ['proc', 'lcid', 'flags'], 'BOOL'), 'EnumDateFormatsA': (3, ['DATEFMT_ENUMPROCA', 'LCID', 'DWORD'], ['proc', 'lcid', 'flags'], 'BOOL'), 'EnumTimeFormatsA': (3, ['TIMEFMT_ENUMPROCA', 'LCID', 'DWORD'], ['proc', 'lcid', 'flags'], 'BOOL'), 'InvalidateNLSCache': (0, [], [], 'BOOL'), 'EnumUILanguagesA': (3, ['UILANGUAGE_ENUMPROCA', 'DWORD', 'LONG_PTR'], ['proc', 'flags', 'param'], 'BOOL'), 'GetGeoInfoA': (5, ['GEOID', 'GEOTYPE', 'LPSTR', 'int', 'LANGID'], ['geoid', 'geotype', 'data', 'data_len', 'lang'], 'INT'), 'LZStart': (0, [], [], 'INT'), 'LZInit': (1, ['HFILE'], ['hfSrc'], 'HFILE'), 'LZDone': (0, [], [], 'void'), 'GetExpandedNameA': (2, ['LPSTR', 'LPSTR'], ['in', 'out'], 'INT'), 'GetExpandedNameW': (2, ['LPWSTR', 'LPWSTR'], ['in', 'out'], 'INT'), 'LZRead': (3, ['HFILE', 'LPSTR', 'INT'], ['fd', 'vbuf', 'toread'], 'INT'), 'LZSeek': (3, ['HFILE', 'LONG', 'INT'], ['fd', 'off', 'type'], 'LONG'), 'LZCopy': (2, ['HFILE', 'HFILE'], ['src', 'dest'], 'LONG'), 'LZOpenFileA': (3, ['LPSTR', 'LPOFSTRUCT', 'WORD'], ['fn', 'ofs', 'mode'], 'HFILE'), 'LZOpenFileW': (3, ['LPWSTR', 'LPOFSTRUCT', 'WORD'], ['fn', 'ofs', 'mode'], 'HFILE'), 'LZClose': (1, ['HFILE'], ['fd'], 'void'), 'GetDllDirectoryA': (2, ['DWORD', 'LPSTR'], ['buf_len', 'buffer'], 'DWORD'), 'GetDllDirectoryW': (2, ['DWORD', 'LPWSTR'], ['buf_len', 'buffer'], 'DWORD'), 'SetDllDirectoryA': (1, ['LPCSTR'], ['dir'], 'BOOL'), 'SetDllDirectoryW': (1, ['LPCWSTR'], ['dir'], 'BOOL'), 'GetBinaryTypeW': (2, ['LPCWSTR', 'LPDWORD'], ['name', 'type'], 'BOOL'), 'GetBinaryTypeA': (2, ['LPCSTR', 'LPDWORD'], ['lpApplicationName', 'lpBinaryType'], 'BOOL'), 'GetProcAddress': (2, ['HMODULE', 'LPCSTR'], ['hModule', 'function'], 'FARPROC'), 'GetShortPathNameA': (3, ['LPCSTR', 'LPSTR', 'DWORD'], ['longpath', 'shortpath', 'shortlen'], 'DWORD'), 'CopyFileA': (3, ['LPCSTR', 'LPCSTR', 'BOOL'], ['source', 'dest', 'fail_if_exists'], 'BOOL'), 'CopyFileExA': (6, ['LPCSTR', 'LPCSTR', 'LPPROGRESS_ROUTINE', 'LPVOID', 'LPBOOL', 'DWORD'], ['sourceFilename', 'destFilename', 'progressRoutine', 'appData', 'cancelFlagPointer', 'copyFlags'], 'BOOL'), 'MoveFileTransactedA': (6, ['const char *', 'const char *', 'LPPROGRESS_ROUTINE', 'void *', 'DWORD', 'HANDLE'], ['source', 'dest', 'progress', 'data', 'flags', 'handle'], 'BOOL'), 'MoveFileTransactedW': (6, ['const WCHAR *', 'const WCHAR *', 'LPPROGRESS_ROUTINE', 'void *', 'DWORD', 'HANDLE'], ['source', 'dest', 'progress', 'data', 'flags', 'handle'], 'BOOL'), 'MoveFileWithProgressA': (5, ['LPCSTR', 'LPCSTR', 'LPPROGRESS_ROUTINE', 'LPVOID', 'DWORD'], ['source', 'dest', 'fnProgress', 'param', 'flag'], 'BOOL'), 'MoveFileExA': (3, ['LPCSTR', 'LPCSTR', 'DWORD'], ['source', 'dest', 'flag'], 'BOOL'), 'MoveFileW': (2, ['LPCWSTR', 'LPCWSTR'], ['source', 'dest'], 'BOOL'), 'MoveFileA': (2, ['LPCSTR', 'LPCSTR'], ['source', 'dest'], 'BOOL'), 'CreateDirectoryExA': (3, ['LPCSTR', 'LPCSTR', 'LPSECURITY_ATTRIBUTES'], ['template', 'path', 'sa'], 'BOOL'), 'GetSystemDirectoryW': (2, ['LPWSTR', 'UINT'], ['path', 'count'], 'UINT'), 'GetSystemDirectoryA': (2, ['LPSTR', 'UINT'], ['path', 'count'], 'UINT'), 'CreateSymbolicLinkA': (3, ['LPCSTR', 'LPCSTR', 'DWORD'], ['link', 'target', 'flags'], 'BOOLEAN'), 'CreateHardLinkTransactedA': (4, ['LPCSTR', 'LPCSTR', 'LPSECURITY_ATTRIBUTES', 'HANDLE'], ['link', 'target', 'sa', 'transaction'], 'BOOL'), 'CreateHardLinkTransactedW': (4, ['LPCWSTR', 'LPCWSTR', 'LPSECURITY_ATTRIBUTES', 'HANDLE'], ['link', 'target', 'sa', 'transaction'], 'BOOL'), 'CheckNameLegalDOS8Dot3A': (5, ['const char *', 'char *', 'DWORD', 'BOOL *', 'BOOL *'], ['name', 'oemname', 'oemname_len', 'contains_spaces', 'is_legal'], 'BOOL'), 'CheckNameLegalDOS8Dot3W': (5, ['const WCHAR *', 'char *', 'DWORD', 'BOOL *', 'BOOL *'], ['name', 'oemname', 'oemname_len', 'contains_spaces_ret', 'is_legal'], 'BOOL'), 'SetSearchPathMode': (1, ['DWORD'], ['flags'], 'BOOL'), 'GetDevicePowerState': (2, ['HANDLE', 'BOOL*'], ['hDevice', 'pfOn'], 'BOOL'), 'GetSystemPowerStatus': (1, ['LPSYSTEM_POWER_STATUS'], ['ps'], 'BOOL'), 'IsSystemResumeAutomatic': (0, [], [], 'BOOL'), 'RequestWakeupLatency': (1, ['LATENCY_TIME'], ['latency'], 'BOOL'), 'RequestDeviceWakeup': (1, ['HANDLE'], ['device'], 'BOOL'), 'SetSystemPowerState': (2, ['BOOL', 'BOOL'], ['suspend_or_hibernate', 'force_flag'], 'BOOL'), 'SetThreadExecutionState': (1, ['EXECUTION_STATE'], ['flags'], 'EXECUTION_STATE'), 'PowerCreateRequest': (1, ['REASON_CONTEXT *'], ['context'], 'HANDLE'), 'PowerSetRequest': (2, ['HANDLE', 'POWER_REQUEST_TYPE'], ['request', 'type'], 'BOOL'), 'PowerClearRequest': (2, ['HANDLE', 'POWER_REQUEST_TYPE'], ['request', 'type'], 'BOOL'), 'LoadModule': (2, ['LPCSTR', 'LPVOID'], ['name', 'paramBlock'], 'DWORD'), 'ExitProcess': (1, ['DWORD'], ['status'], 'void'), 'GetExitCodeProcess': (2, ['HANDLE', 'LPDWORD'], ['hProcess', 'lpExitCode'], 'BOOL'), 'FatalExit': (1, ['int'], ['code'], 'void'), 'GetProcessFlags': (1, ['DWORD'], ['processid'], 'DWORD'), 'ConvertToGlobalHandle': (1, ['HANDLE'], ['hSrc'], 'HANDLE'), 'SetHandleContext': (2, ['HANDLE', 'DWORD'], ['hnd', 'context'], 'BOOL'), 'GetHandleContext': (1, ['HANDLE'], ['hnd'], 'DWORD'), 'CreateSocketHandle': (0, [], [], 'HANDLE'), 'SetProcessAffinityMask': (2, ['HANDLE', 'DWORD_PTR'], ['hProcess', 'affmask'], 'BOOL'), 'GetProcessAffinityMask': (3, ['HANDLE', 'PDWORD_PTR', 'PDWORD_PTR'], ['hProcess', 'process_mask', 'system_mask'], 'BOOL'), 'SetProcessWorkingSetSize': (3, ['HANDLE', 'SIZE_T', 'SIZE_T'], ['process', 'minset', 'maxset'], 'BOOL'), 'GetProcessWorkingSetSize': (3, ['HANDLE', 'SIZE_T *', 'SIZE_T *'], ['process', 'minset', 'maxset'], 'BOOL'), 'GetProcessIoCounters': (2, ['HANDLE', 'PIO_COUNTERS'], ['hProcess', 'ioc'], 'BOOL'), 'RegisterServiceProcess': (2, ['DWORD', 'DWORD'], ['dwProcessId', 'dwType'], 'DWORD'), 'FindActCtxSectionStringA': (5, ['DWORD', 'const GUID *', 'ULONG', 'const char *', 'ACTCTX_SECTION_KEYED_DATA *'], ['flags', 'guid', 'id', 'search', 'info'], 'BOOL'), 'CmdBatNotification': (1, ['BOOL'], ['bBatchRunning'], 'BOOL'), 'RegisterApplicationRestart': (2, ['PCWSTR', 'DWORD'], ['pwzCommandLine', 'dwFlags'], 'HRESULT'), 'WTSGetActiveConsoleSessionId': (0, [], [], 'DWORD'), 'GetSystemDEPPolicy': (0, [], [], 'DEP_SYSTEM_POLICY_TYPE'), 'SetProcessDEPPolicy': (1, ['DWORD'], ['flags'], 'BOOL'), 'ApplicationRecoveryFinished': (1, ['BOOL'], ['success'], 'VOID'), 'ApplicationRecoveryInProgress': (1, ['PBOOL'], ['canceled'], 'HRESULT'), 'RegisterApplicationRecoveryCallback': (4, ['APPLICATION_RECOVERY_CALLBACK', 'PVOID', 'DWORD', 'DWORD'], ['callback', 'param', 'pingint', 'flags'], 'HRESULT'), 'GetActiveProcessorGroupCount': (0, [], [], 'WORD'), 'GetActiveProcessorCount': (1, ['WORD'], ['group'], 'DWORD'), 'GetMaximumProcessorCount': (1, ['WORD'], ['group'], 'DWORD'), 'GetMaximumProcessorGroupCount': (0, [], [], 'WORD'), 'GetFirmwareEnvironmentVariableA': (4, ['LPCSTR', 'LPCSTR', 'PVOID', 'DWORD'], ['name', 'guid', 'buffer', 'size'], 'DWORD'), 'GetFirmwareEnvironmentVariableW': (4, ['LPCWSTR', 'LPCWSTR', 'PVOID', 'DWORD'], ['name', 'guid', 'buffer', 'size'], 'DWORD'), 'SetFirmwareEnvironmentVariableW': (4, ['const WCHAR *', 'const WCHAR *', 'void *', 'DWORD'], ['name', 'guid', 'buffer', 'size'], 'BOOL'), 'GetNumaNodeProcessorMask': (2, ['UCHAR', 'PULONGLONG'], ['node', 'mask'], 'BOOL'), 'GetNumaAvailableMemoryNode': (2, ['UCHAR', 'PULONGLONG'], ['node', 'available_bytes'], 'BOOL'), 'GetNumaAvailableMemoryNodeEx': (2, ['USHORT', 'PULONGLONG'], ['node', 'available_bytes'], 'BOOL'), 'GetNumaProcessorNode': (2, ['UCHAR', 'PUCHAR'], ['processor', 'node'], 'BOOL'), 'GetNumaProcessorNodeEx': (2, ['PPROCESSOR_NUMBER', 'PUSHORT'], ['processor', 'node_number'], 'BOOL'), 'GetNumaProximityNode': (2, ['ULONG ', 'PUCHAR'], ['proximity_id', 'node_number'], 'BOOL'), 'GetProcessDEPPolicy': (3, ['HANDLE', 'LPDWORD', 'PBOOL'], ['process', 'flags', 'permanent'], 'BOOL'), 'UnregisterApplicationRestart': (0, [], [], 'HRESULT'), 'CreateUmsCompletionList': (1, ['PUMS_COMPLETION_LIST *'], ['list'], 'BOOL'), 'CreateUmsThreadContext': (1, ['PUMS_CONTEXT *'], ['ctx'], 'BOOL'), 'DeleteUmsCompletionList': (1, ['PUMS_COMPLETION_LIST'], ['list'], 'BOOL'), 'DeleteUmsThreadContext': (1, ['PUMS_CONTEXT'], ['ctx'], 'BOOL'), 'DequeueUmsCompletionListItems': (3, ['void *', 'DWORD', 'PUMS_CONTEXT *'], ['list', 'timeout', 'ctx'], 'BOOL'), 'EnterUmsSchedulingMode': (1, ['UMS_SCHEDULER_STARTUP_INFO *'], ['info'], 'BOOL'), 'ExecuteUmsThread': (1, ['PUMS_CONTEXT'], ['ctx'], 'BOOL'), 'GetCurrentUmsThread': (0, [], [], 'PUMS_CONTEXT'), 'GetNextUmsListItem': (1, ['PUMS_CONTEXT'], ['ctx'], 'PUMS_CONTEXT'), 'GetUmsCompletionListEvent': (2, ['PUMS_COMPLETION_LIST', 'HANDLE *'], ['list', 'event'], 'BOOL'), 'QueryUmsThreadInformation': (5, ['PUMS_CONTEXT', 'UMS_THREAD_INFO_CLASS', 'void *', 'ULONG', 'ULONG *'], ['ctx', 'class', 'buf', 'length', 'ret_length'], 'BOOL'), 'SetUmsThreadInformation': (4, ['PUMS_CONTEXT', 'UMS_THREAD_INFO_CLASS', 'void *', 'ULONG'], ['ctx', 'class', 'buf', 'length'], 'BOOL'), 'UmsThreadYield': (0, [], [], 'BOOL'), 'GetProfileIntA': (3, ['LPCSTR', 'LPCSTR', 'INT'], ['section', 'entry', 'def_val'], 'UINT'), 'GetProfileIntW': (3, ['LPCWSTR', 'LPCWSTR', 'INT'], ['section', 'entry', 'def_val'], 'UINT'), 'GetPrivateProfileStringW': (6, ['LPCWSTR', 'LPCWSTR', 'LPCWSTR', 'LPWSTR', 'UINT', 'LPCWSTR'], ['section', 'entry', 'def_val', 'buffer', 'len', 'filename'], 'INT'), 'GetPrivateProfileStringA': (6, ['LPCSTR', 'LPCSTR', 'LPCSTR', 'LPSTR', 'UINT', 'LPCSTR'], ['section', 'entry', 'def_val', 'buffer', 'len', 'filename'], 'INT'), 'GetProfileStringA': (5, ['LPCSTR', 'LPCSTR', 'LPCSTR', 'LPSTR', 'UINT'], ['section', 'entry', 'def_val', 'buffer', 'len'], 'INT'), 'GetProfileStringW': (5, ['LPCWSTR', 'LPCWSTR', 'LPCWSTR', 'LPWSTR', 'UINT'], ['section', 'entry', 'def_val', 'buffer', 'len'], 'INT'), 'WriteProfileStringA': (3, ['LPCSTR', 'LPCSTR', 'LPCSTR'], ['section', 'entry', 'string'], 'BOOL'), 'WriteProfileStringW': (3, ['LPCWSTR', 'LPCWSTR', 'LPCWSTR'], ['section', 'entry', 'string'], 'BOOL'), 'GetPrivateProfileIntW': (4, ['LPCWSTR', 'LPCWSTR', 'INT', 'LPCWSTR'], ['section', 'entry', 'def_val', 'filename'], 'UINT'), 'GetPrivateProfileIntA': (4, ['LPCSTR', 'LPCSTR', 'INT', 'LPCSTR'], ['section', 'entry', 'def_val', 'filename'], 'UINT'), 'GetPrivateProfileSectionW': (4, ['LPCWSTR', 'LPWSTR', 'DWORD', 'LPCWSTR'], ['section', 'buffer', 'len', 'filename'], 'INT'), 'GetPrivateProfileSectionA': (4, ['LPCSTR', 'LPSTR', 'DWORD', 'LPCSTR'], ['section', 'buffer', 'len', 'filename'], 'INT'), 'GetProfileSectionA': (3, ['LPCSTR', 'LPSTR', 'DWORD'], ['section', 'buffer', 'len'], 'INT'), 'GetProfileSectionW': (3, ['LPCWSTR', 'LPWSTR', 'DWORD'], ['section', 'buffer', 'len'], 'INT'), 'WritePrivateProfileStringW': (4, ['LPCWSTR', 'LPCWSTR', 'LPCWSTR', 'LPCWSTR'], ['section', 'entry', 'string', 'filename'], 'BOOL'), 'WritePrivateProfileSectionW': (3, ['LPCWSTR', 'LPCWSTR', 'LPCWSTR'], ['section', 'string', 'filename'], 'BOOL'), 'WritePrivateProfileSectionA': (3, ['LPCSTR', 'LPCSTR', 'LPCSTR'], ['section', 'string', 'filename'], 'BOOL'), 'WriteProfileSectionA': (2, ['LPCSTR', 'LPCSTR'], ['section', 'keys_n_values'], 'BOOL'), 'WriteProfileSectionW': (2, ['LPCWSTR', 'LPCWSTR'], ['section', 'keys_n_values'], 'BOOL'), 'GetPrivateProfileSectionNamesW': (3, ['LPWSTR', 'DWORD', 'LPCWSTR'], ['buffer', 'size', 'filename'], 'DWORD'), 'GetPrivateProfileSectionNamesA': (3, ['LPSTR', 'DWORD', 'LPCSTR'], ['buffer', 'size', 'filename'], 'DWORD'), 'OpenProfileUserMapping': (0, [], [], 'BOOL'), 'CloseProfileUserMapping': (0, [], [], 'BOOL'), 'FindResourceExA': (4, ['HMODULE', 'LPCSTR', 'LPCSTR', 'WORD'], ['module', 'type', 'name', 'lang'], 'HRSRC'), 'FindResourceA': (3, ['HMODULE', 'LPCSTR', 'LPCSTR'], ['hModule', 'name', 'type'], 'HRSRC'), 'EnumResourceTypesA': (3, ['HMODULE', 'ENUMRESTYPEPROCA', 'LONG_PTR'], ['hmod', 'lpfun', 'lparam'], 'BOOL'), 'EnumResourceTypesW': (3, ['HMODULE', 'ENUMRESTYPEPROCW', 'LONG_PTR'], ['hmod', 'lpfun', 'lparam'], 'BOOL'), 'EnumResourceNamesA': (4, ['HMODULE', 'LPCSTR', 'ENUMRESNAMEPROCA', 'LONG_PTR'], ['hmod', 'type', 'lpfun', 'lparam'], 'BOOL'), 'EnumResourceLanguagesA': (5, ['HMODULE', 'LPCSTR', 'LPCSTR', 'ENUMRESLANGPROCA', 'LONG_PTR'], ['hmod', 'type', 'name', 'lpfun', 'lparam'], 'BOOL'), 'EnumResourceLanguagesW': (5, ['HMODULE', 'LPCWSTR', 'LPCWSTR', 'ENUMRESLANGPROCW', 'LONG_PTR'], ['hmod', 'type', 'name', 'lpfun', 'lparam'], 'BOOL'), 'BeginUpdateResourceW': (2, ['LPCWSTR', 'BOOL'], ['pFileName', 'bDeleteExistingResources'], 'HANDLE'), 'BeginUpdateResourceA': (2, ['LPCSTR', 'BOOL'], ['pFileName', 'bDeleteExistingResources'], 'HANDLE'), 'EndUpdateResourceW': (2, ['HANDLE', 'BOOL'], ['hUpdate', 'fDiscard'], 'BOOL'), 'EndUpdateResourceA': (2, ['HANDLE', 'BOOL'], ['hUpdate', 'fDiscard'], 'BOOL'), 'UpdateResourceW': (6, ['HANDLE', 'LPCWSTR', 'LPCWSTR', 'WORD', 'LPVOID', 'DWORD'], ['hUpdate', 'lpType', 'lpName', 'wLanguage', 'lpData', 'cbData'], 'BOOL'), 'UpdateResourceA': (6, ['HANDLE', 'LPCSTR', 'LPCSTR', 'WORD', 'LPVOID', 'DWORD'], ['hUpdate', 'lpType', 'lpName', 'wLanguage', 'lpData', 'cbData'], 'BOOL'), 'RegisterWaitForSingleObject': (6, ['HANDLE *', 'HANDLE', 'WAITORTIMERCALLBACK', 'void *', 'ULONG', 'ULONG'], ['wait', 'object', 'callback', 'context', 'timeout', 'flags'], 'BOOL'), 'UnregisterWait': (1, ['HANDLE'], ['handle'], 'BOOL'), 'MakeCriticalSectionGlobal': (1, ['CRITICAL_SECTION *'], ['crit'], 'void'), 'ReinitializeCriticalSection': (1, ['CRITICAL_SECTION *'], ['crit'], 'void'), 'UninitializeCriticalSection': (1, ['CRITICAL_SECTION *'], ['crit'], 'void'), 'CreateJobObjectW': (2, ['LPSECURITY_ATTRIBUTES', 'LPCWSTR'], ['sa', 'name'], 'HANDLE'), 'CreateJobObjectA': (2, ['LPSECURITY_ATTRIBUTES', 'LPCSTR'], ['attr', 'name'], 'HANDLE'), 'OpenJobObjectW': (3, ['DWORD', 'BOOL', 'LPCWSTR'], ['access', 'inherit', 'name'], 'HANDLE'), 'OpenJobObjectA': (3, ['DWORD', 'BOOL', 'LPCSTR'], ['access', 'inherit', 'name'], 'HANDLE'), 'TerminateJobObject': (2, ['HANDLE', 'UINT'], ['job', 'exit_code'], 'BOOL'), 'QueryInformationJobObject': (5, ['HANDLE', 'JOBOBJECTINFOCLASS', 'LPVOID', 'DWORD', 'DWORD *'], ['job', 'class', 'info', 'len', 'ret_len'], 'BOOL'), 'SetInformationJobObject': (4, ['HANDLE', 'JOBOBJECTINFOCLASS', 'LPVOID', 'DWORD'], ['job', 'class', 'info', 'len'], 'BOOL'), 'AssignProcessToJobObject': (2, ['HANDLE', 'HANDLE'], ['job', 'process'], 'BOOL'), 'CreateWaitableTimerA': (3, ['SECURITY_ATTRIBUTES *', 'BOOL', 'LPCSTR'], ['sa', 'manual', 'name'], 'HANDLE'), 'CreateWaitableTimerExA': (4, ['SECURITY_ATTRIBUTES *', 'LPCSTR', 'DWORD', 'DWORD'], ['sa', 'name', 'flags', 'access'], 'HANDLE'), 'OpenWaitableTimerA': (3, ['DWORD', 'BOOL', 'LPCSTR'], ['access', 'inherit', 'name'], 'HANDLE'), 'DeleteTimerQueue': (1, ['HANDLE'], ['TimerQueue'], 'BOOL'), 'CancelTimerQueueTimer': (2, ['HANDLE', 'HANDLE'], ['queue', 'timer'], 'BOOL'), 'CreateFileMappingA': (6, ['HANDLE', 'SECURITY_ATTRIBUTES *', 'DWORD', 'DWORD', 'DWORD', 'LPCSTR'], ['file', 'sa', 'protect', 'size_high', 'size_low', 'name'], 'HANDLE'), 'OpenFileMappingA': (3, ['DWORD', 'BOOL', 'LPCSTR'], ['access', 'inherit', 'name'], 'HANDLE'), 'CreateNamedPipeA': (8, ['LPCSTR', 'DWORD', 'DWORD', 'DWORD', 'DWORD', 'DWORD', 'DWORD', 'LPSECURITY_ATTRIBUTES'], ['name', 'dwOpenMode', 'dwPipeMode', 'nMaxInstances', 'nOutBufferSize', 'nInBufferSize', 'nDefaultTimeOut', 'attr'], 'HANDLE'), 'GetNamedPipeClientProcessId': (2, ['HANDLE', 'ULONG *'], ['pipe', 'id'], 'BOOL'), 'GetNamedPipeServerProcessId': (2, ['HANDLE', 'ULONG *'], ['pipe', 'id'], 'BOOL'), 'GetNamedPipeClientSessionId': (2, ['HANDLE', 'ULONG *'], ['pipe', 'id'], 'BOOL'), 'GetNamedPipeServerSessionId': (2, ['HANDLE', 'ULONG *'], ['pipe', 'id'], 'BOOL'), 'GetNamedPipeHandleStateA': (7, ['HANDLE', 'LPDWORD', 'LPDWORD', 'LPDWORD', 'LPDWORD', 'LPSTR', 'DWORD'], ['hNamedPipe', 'lpState', 'lpCurInstances', 'lpMaxCollectionCount', 'lpCollectDataTimeout', 'lpUsername', 'nUsernameMaxSize'], 'BOOL'), 'CallNamedPipeA': (7, ['LPCSTR', 'LPVOID', 'DWORD', 'LPVOID', 'DWORD', 'LPDWORD', 'DWORD'], ['lpNamedPipeName', 'lpInput', 'dwInputSize', 'lpOutput', 'dwOutputSize', 'lpBytesRead', 'nTimeout'], 'BOOL'), 'CreateMailslotA': (4, ['LPCSTR', 'DWORD', 'DWORD', 'LPSECURITY_ATTRIBUTES'], ['lpName', 'nMaxMessageSize', 'lReadTimeout', 'sa'], 'HANDLE'), 'CreateMailslotW': (4, ['LPCWSTR', 'DWORD', 'DWORD', 'LPSECURITY_ATTRIBUTES'], ['lpName', 'nMaxMessageSize', 'lReadTimeout', 'sa'], 'HANDLE'), 'GetMailslotInfo': (5, ['HANDLE', 'LPDWORD', 'LPDWORD', 'LPDWORD', 'LPDWORD'], ['hMailslot', 'lpMaxMessageSize', 'lpNextSize', 'lpMessageCount', 'lpReadTimeout'], 'BOOL'), 'SetMailslotInfo': (2, ['HANDLE', 'DWORD'], ['hMailslot', 'dwReadTimeout'], 'BOOL'), 'BindIoCompletionCallback': (3, ['HANDLE', 'LPOVERLAPPED_COMPLETION_ROUTINE', 'ULONG'], ['handle', 'func', 'flags'], 'BOOL'), 'InterlockedCompareExchange': (0, [], [], 'LONG'), 'InterlockedExchange': (0, [], [], 'LONG'), 'InterlockedExchangeAdd': (0, [], [], 'LONG'), 'InterlockedIncrement': (0, [], [], 'LONG'), 'BackupRead': (7, ['HANDLE', 'LPBYTE', 'DWORD', 'LPDWORD', 'BOOL', 'BOOL', 'LPVOID *'], ['file', 'buffer', 'to_read', 'read', 'abort', 'security', 'context'], 'BOOL'), 'BackupSeek': (6, ['HANDLE', 'DWORD', 'DWORD', 'LPDWORD', 'LPDWORD', 'LPVOID *'], ['file', 'seek_low', 'seek_high', 'seeked_low', 'seeked_high', 'context'], 'BOOL'), 'BackupWrite': (7, ['HANDLE', 'LPBYTE', 'DWORD', 'LPDWORD', 'BOOL', 'BOOL', 'LPVOID *'], ['file', 'buffer', 'to_write', 'written', 'abort', 'security', 'context'], 'BOOL'), 'CreateTapePartition': (4, ['HANDLE', 'DWORD', 'DWORD', 'DWORD'], ['device', 'method', 'count', 'size'], 'DWORD'), 'EraseTape': (3, ['HANDLE', 'DWORD', 'BOOL'], ['device', 'type', 'immediate'], 'DWORD'), 'GetTapeParameters': (4, ['HANDLE', 'DWORD', 'LPDWORD', 'LPVOID'], ['device', 'operation', 'size', 'info'], 'DWORD'), 'GetTapePosition': (5, ['HANDLE', 'DWORD', 'LPDWORD', 'LPDWORD', 'LPDWORD'], ['device', 'type', 'partition', 'offset_low', 'offset_high'], 'DWORD'), 'GetTapeStatus': (1, ['HANDLE'], ['device'], 'DWORD'), 'PrepareTape': (3, ['HANDLE', 'DWORD', 'BOOL'], ['device', 'operation', 'immediate'], 'DWORD'), 'SetTapeParameters': (3, ['HANDLE', 'DWORD', 'LPVOID'], ['device', 'operation', 'info'], 'DWORD'), 'SetTapePosition': (6, ['HANDLE', 'DWORD', 'DWORD', 'DWORD', 'DWORD', 'BOOL'], ['device', 'method', 'partition', 'offset_low', 'offset_high', 'immediate'], 'DWORD'), 'WriteTapemark': (4, ['HANDLE', 'DWORD', 'DWORD', 'BOOL'], ['device', 'type', 'count', 'immediate'], 'DWORD'), 'FreeLibraryAndExitThread': (2, ['HINSTANCE', 'DWORD'], ['hLibModule', 'dwExitCode'], 'void'), 'Wow64SetThreadContext': (2, ['HANDLE', 'const WOW64_CONTEXT *'], ['handle', 'context'], 'BOOL'), 'Wow64GetThreadContext': (2, ['HANDLE', 'WOW64_CONTEXT *'], ['handle', 'context'], 'BOOL'), 'Wow64GetThreadSelectorEntry': (3, ['HANDLE', 'DWORD', 'WOW64_LDT_ENTRY *'], ['thread', 'selector', 'selector_entry'], 'BOOL'), 'SetThreadAffinityMask': (2, ['HANDLE', 'DWORD_PTR'], ['thread', 'mask'], 'DWORD_PTR'), 'GetThreadSelectorEntry': (3, ['HANDLE', 'DWORD', 'LDT_ENTRY *'], ['thread', 'sel', 'ldtent'], 'BOOL'), 'CreateToolhelp32Snapshot': (2, ['DWORD', 'DWORD'], ['flags', 'process'], 'HANDLE'), 'Thread32First': (2, ['HANDLE', 'LPTHREADENTRY32'], ['hSnapShot', 'lpte'], 'BOOL'), 'Thread32Next': (2, ['HANDLE', 'LPTHREADENTRY32'], ['hSnapShot', 'lpte'], 'BOOL'), 'Process32First': (2, ['HANDLE', 'LPPROCESSENTRY32'], ['hSnapshot', 'lppe'], 'BOOL'), 'Process32Next': (2, ['HANDLE', 'LPPROCESSENTRY32'], ['hSnapshot', 'lppe'], 'BOOL'), 'Process32FirstW': (2, ['HANDLE', 'LPPROCESSENTRY32W'], ['hSnapshot', 'lppe'], 'BOOL'), 'Process32NextW': (2, ['HANDLE', 'LPPROCESSENTRY32W'], ['hSnapshot', 'lppe'], 'BOOL'), 'Module32FirstW': (2, ['HANDLE', 'LPMODULEENTRY32W'], ['hSnapshot', 'lpme'], 'BOOL'), 'Module32NextW': (2, ['HANDLE', 'LPMODULEENTRY32W'], ['hSnapshot', 'lpme'], 'BOOL'), 'Module32First': (2, ['HANDLE', 'LPMODULEENTRY32'], ['hSnapshot', 'lpme'], 'BOOL'), 'Module32Next': (2, ['HANDLE', 'LPMODULEENTRY32'], ['hSnapshot', 'lpme'], 'BOOL'), 'Heap32ListFirst': (2, ['HANDLE', 'LPHEAPLIST32'], ['hSnapshot', 'lphl'], 'BOOL'), 'Toolhelp32ReadProcessMemory': (5, ['DWORD', 'const void*', 'void*', 'SIZE_T', 'SIZE_T*'], ['pid', 'base', 'buf', 'len', 'r'], 'BOOL'), 'VerifyVersionInfoA': (3, ['LPOSVERSIONINFOEXA', 'DWORD', 'DWORDLONG'], ['lpVersionInfo', 'dwTypeMask', 'dwlConditionMask'], 'BOOL'), 'VerifyVersionInfoW': (3, ['LPOSVERSIONINFOEXW', 'DWORD', 'DWORDLONG'], ['info', 'dwTypeMask', 'dwlConditionMask'], 'BOOL'), 'TermsrvAppInstallMode': (0, [], [], 'BOOL'), 'SetTermsrvAppInstallMode': (1, ['BOOL'], ['bInstallMode'], 'DWORD'), 'IsBadReadPtr': (2, ['LPCVOID', 'UINT_PTR'], ['ptr', 'size'], 'BOOL'), 'IsBadWritePtr': (2, ['LPVOID', 'UINT_PTR'], ['ptr', 'size'], 'BOOL'), 'IsBadHugeReadPtr': (2, ['LPCVOID', 'UINT_PTR'], ['ptr', 'size'], 'BOOL'), 'IsBadHugeWritePtr': (2, ['LPVOID', 'UINT_PTR'], ['ptr', 'size'], 'BOOL'), 'IsBadCodePtr': (1, ['FARPROC'], ['ptr'], 'BOOL'), 'IsBadStringPtrA': (2, ['LPCSTR', 'UINT_PTR'], ['str', 'max'], 'BOOL'), 'IsBadStringPtrW': (2, ['LPCWSTR', 'UINT_PTR'], ['str', 'max'], 'BOOL'), 'lstrcatA': (2, ['LPSTR', 'LPCSTR'], ['dst', 'src'], 'LPSTR'), 'lstrcatW': (2, ['LPWSTR', 'LPCWSTR'], ['dst', 'src'], 'LPWSTR'), 'lstrcpyA': (2, ['LPSTR', 'LPCSTR'], ['dst', 'src'], 'LPSTR'), 'lstrcpyW': (2, ['LPWSTR', 'LPCWSTR'], ['dst', 'src'], 'LPWSTR'), 'SetVolumeLabelW': (2, ['LPCWSTR', 'LPCWSTR'], ['root', 'label'], 'BOOL'), 'SetVolumeLabelA': (2, ['LPCSTR', 'LPCSTR'], ['root', 'volname'], 'BOOL'), 'GetVolumeNameForVolumeMountPointA': (3, ['LPCSTR', 'LPSTR', 'DWORD'], ['path', 'volume', 'size'], 'BOOL'), 'DefineDosDeviceA': (3, ['DWORD', 'LPCSTR', 'LPCSTR'], ['flags', 'devname', 'targetpath'], 'BOOL'), 'QueryDosDeviceA': (3, ['LPCSTR', 'LPSTR', 'DWORD'], ['devname', 'target', 'bufsize'], 'DWORD'), 'GetLogicalDriveStringsA': (2, ['UINT', 'LPSTR'], ['len', 'buffer'], 'UINT'), 'GetVolumePathNameA': (3, ['LPCSTR', 'LPSTR', 'DWORD'], ['filename', 'volumepathname', 'buflen'], 'BOOL'), 'GetVolumePathNamesForVolumeNameA': (4, ['LPCSTR', 'LPSTR', 'DWORD', 'PDWORD'], ['volumename', 'volumepathname', 'buflen', 'returnlen'], 'BOOL'), 'FindFirstVolumeA': (2, ['LPSTR', 'DWORD'], ['volume', 'len'], 'HANDLE'), 'FindNextVolumeA': (3, ['HANDLE', 'LPSTR', 'DWORD'], ['handle', 'volume', 'len'], 'BOOL'), 'FindFirstVolumeMountPointA': (3, ['LPCSTR', 'LPSTR', 'DWORD'], ['root', 'mount_point', 'len'], 'HANDLE'), 'FindFirstVolumeMountPointW': (3, ['LPCWSTR', 'LPWSTR', 'DWORD'], ['root', 'mount_point', 'len'], 'HANDLE'), 'FindVolumeMountPointClose': (1, ['HANDLE'], ['h'], 'BOOL'), 'DeleteVolumeMountPointA': (1, ['LPCSTR'], ['mountpoint'], 'BOOL'), 'SetVolumeMountPointA': (2, ['LPCSTR', 'LPCSTR'], ['path', 'volume'], 'BOOL'), 'SetVolumeMountPointW': (2, ['LPCWSTR', 'LPCWSTR'], ['path', 'volume'], 'BOOL')}


dictRS_kernel32 =  {'InitAtomTable': 'True', 'SetDefaultCommConfigW': 'True', 'GlobalLock': 'pointer', 'GlobalUnlock': 'Object is still locked', 'GlobalSize': 'Size in Bytes of the global memory object', 'GlobalFlags': 'Value specifying allocation flags and lock count', 'GetDateFormatA': '10', 'GetDateFormatEx': '10', 'GetTimeFormatA': '10', 'GetTimeFormatEx': '10', 'GetNumberFormatA': '10', 'GetCurrencyFormatA': '10', 'SetLocaleInfoA': 'True', 'GetCPInfoExA': 'True', 'GetStringTypeExA': 'True', 'FoldStringA': 'The length of the string written to dst including the terminating NUL', 'GetExitCodeProcess': 'True', 'SetProcessWorkingSetSize': 'True', 'CreateMailslotW': 'handle', 'GetMailslotInfo': 'True', 'SetMailslotInfo': 'True', 'IsBadReadPtr': 'True', 'IsBadWritePtr': 'True', 'IsBadHugeReadPtr': 'True', 'IsBadHugeWritePtr': 'True', 'IsBadCodePtr': 'True', 'IsBadStringPtrA': 'True'}


dict4_kernelbase =  {'AllocConsole': (0, [], [], 'BOOL'), 'CtrlRoutine': (0, [], [], 'DWORD'), 'ReadConsoleInputA': (4, ['HANDLE', 'INPUT_RECORD *', 'DWORD', 'DWORD *'], ['handle', 'buffer', 'length', 'count'], 'BOOL'), 'ReadConsoleInputW': (4, ['HANDLE', 'INPUT_RECORD *', 'DWORD', 'DWORD *'], ['handle', 'buffer', 'length', 'count'], 'BOOL'), 'ReadConsoleA': (5, ['HANDLE', 'void *', 'DWORD', 'DWORD *', 'void *'], ['handle', 'buffer', 'length', 'count', 'reserved'], 'BOOL'), 'ReadConsoleW': (5, ['HANDLE', 'void *', 'DWORD', 'DWORD *', 'void *'], ['handle', 'buffer', 'length', 'count', 'reserved'], 'BOOL'), 'FlushConsoleInputBuffer': (1, ['HANDLE'], ['handle'], 'BOOL'), 'Beep': (2, ['DWORD', 'DWORD'], ['frequency', 'duration'], 'BOOL'), 'CreatePseudoConsole': (5, ['COORD', 'HANDLE', 'HANDLE', 'DWORD', 'HPCON *'], ['size', 'input', 'output', 'flags', 'ret'], 'HRESULT'), 'ClosePseudoConsole': (1, ['HPCON'], ['handle'], 'void'), 'ResizePseudoConsole': (2, ['HPCON', 'COORD'], ['handle', 'size'], 'HRESULT'), 'DebugBreak': (0, [], [], 'void'), 'IsDebuggerPresent': (0, [], [], 'BOOL'), 'UnhandledExceptionFilter': (1, ['EXCEPTION_POINTERS *'], ['epointers'], 'LONG'), 'EnumDeviceDrivers': (3, ['void *', 'DWORD', 'DWORD *'], ['*image_base', 'count', 'needed'], 'BOOL'), 'EnumProcessModulesEx': (5, ['HANDLE', 'HMODULE *', 'DWORD', 'DWORD *', 'DWORD'], ['process', 'module', 'count', 'needed', 'filter'], 'BOOL'), 'EnumProcesses': (3, ['DWORD *', 'DWORD', 'DWORD *'], ['ids', 'count', 'used'], 'BOOL'), 'GetModuleInformation': (4, ['HANDLE', 'HMODULE', 'MODULEINFO *', 'DWORD'], ['process', 'module', 'modinfo', 'count'], 'BOOL'), 'QueryWorkingSetEx': (3, ['HANDLE', 'void *', 'DWORD'], ['process', 'buffer', 'size'], 'BOOL'), 'CopyFileExW': (6, ['const WCHAR *', 'const WCHAR *', 'LPPROGRESS_ROUTINE', 'void *', 'BOOL *', 'DWORD'], ['source', 'dest', 'progress', 'param', 'cancel_ptr', 'flags'], 'BOOL'), 'CreateHardLinkW': (3, ['LPCWSTR', 'LPCWSTR', 'SECURITY_ATTRIBUTES *'], ['dest', 'source', 'sec_attr'], 'BOOL'), 'FindFirstStreamW': (4, ['const WCHAR *', 'STREAM_INFO_LEVELS', 'void *', 'DWORD'], ['filename', 'level', 'data', 'flags'], 'HANDLE'), 'FindNextStreamW': (2, ['HANDLE', 'void *'], ['handle', 'data'], 'BOOL'), 'MoveFileExW': (3, ['const WCHAR *', 'const WCHAR *', 'DWORD'], ['source', 'dest', 'flag'], 'BOOL'), 'LoadAppInitDlls': (0, [], [], 'void'), 'CompareStringEx': (9, ['const WCHAR *', 'DWORD', 'const WCHAR *', 'int', 'const WCHAR *', 'int', 'NLSVERSIONINFO *', 'void *', 'LPARAM'], ['locale', 'flags', 'str1', 'len1', 'str2', 'len2', 'version', 'reserved', 'handle'], 'INT'), 'GetACP': (0, [], [], 'UINT'), 'GetCPInfoExW': (3, ['UINT', 'DWORD', 'CPINFOEXW *'], ['codepage', 'flags', 'cpinfo'], 'BOOL'), 'GetOEMCP': (0, [], [], 'UINT'), 'GetUserDefaultGeoName': (2, ['LPWSTR', 'int'], ['geo_name', 'count'], 'INT'), 'SetUserGeoName': (1, ['PWSTR'], ['geo_name'], 'BOOL'), 'DllMain': (3, ['HINSTANCE', 'DWORD', 'LPVOID'], ['hinst', 'reason', 'reserved'], 'BOOL'), 'DllMainCRTStartup': (3, ['HANDLE', 'DWORD', 'LPVOID'], ['inst', 'reason', 'reserved'], 'BOOL'), 'MulDiv': (3, ['INT', 'INT', 'INT'], ['a', 'b', 'c'], 'INT'), 'AppPolicyGetProcessTerminationMethod': (2, ['HANDLE', 'AppPolicyProcessTerminationMethod *'], ['token', 'policy'], 'LONG'), 'AppPolicyGetThreadInitializationType': (2, ['HANDLE', 'AppPolicyThreadInitializationType *'], ['token', 'policy'], 'LONG'), 'AppPolicyGetShowDeveloperDiagnostic': (2, ['HANDLE', 'AppPolicyShowDeveloperDiagnostic *'], ['token', 'policy'], 'LONG'), 'AppPolicyGetWindowingModel': (2, ['HANDLE', 'AppPolicyWindowingModel *'], ['token', 'policy'], 'LONG'), 'PerfCreateInstance': (4, ['HANDLE', 'LPCGUID', 'const WCHAR *', 'ULONG'], ['handle', 'guid', 'name', 'id'], 'PPERF_COUNTERSET_INSTANCE'), 'PerfDeleteInstance': (2, ['HANDLE', 'PPERF_COUNTERSET_INSTANCE'], ['provider', 'block'], 'ULONG'), 'PerfSetCounterSetInfo': (3, ['HANDLE', 'PPERF_COUNTERSET_INFO', 'ULONG'], ['handle', 'template', 'size'], 'ULONG'), 'PerfSetCounterRefValue': (4, ['HANDLE', 'PPERF_COUNTERSET_INSTANCE', 'ULONG', 'void *'], ['provider', 'instance', 'counterid', 'address'], 'ULONG'), 'PerfStartProvider': (3, ['GUID *', 'PERFLIBREQUEST', 'HANDLE *'], ['guid', 'callback', 'provider'], 'ULONG'), 'PerfStartProviderEx': (3, ['GUID *', 'PPERF_PROVIDER_CONTEXT', 'HANDLE *'], ['guid', 'context', 'provider'], 'ULONG'), 'PerfStopProvider': (1, ['HANDLE'], ['handle'], 'ULONG'), 'QuirkIsEnabled': (0, [], [], 'BOOL'), 'QuirkIsEnabled3': (2, ['void *', 'void *'], ['unk1', 'unk2'], 'BOOL'), 'QISearch': (0, [], [], 'HRESULT'), 'GetAcceptLanguagesA': (0, [], [], 'HRESULT'), 'GetAcceptLanguagesW': (2, ['WCHAR *', 'DWORD *'], ['langbuf', 'buflen'], 'HRESULT'), 'GetLargePageMinimum': (0, [], [], 'SIZE_T'), 'IsBadStringPtrA': (2, ['LPCSTR', 'UINT_PTR'], ['str', 'max'], 'BOOL'), 'IsBadStringPtrW': (2, ['LPCWSTR', 'UINT_PTR'], ['str', 'max'], 'BOOL'), 'HeapQueryInformation': (5, ['HANDLE', 'HEAP_INFORMATION_CLASS', 'PVOID', 'SIZE_T', 'PSIZE_T'], ['heap', 'info_class', 'info', 'size', 'size_out'], 'BOOL'), 'HeapSetInformation': (4, ['HANDLE', 'HEAP_INFORMATION_CLASS', 'PVOID', 'SIZE_T'], ['heap', 'infoclass', 'info', 'size'], 'BOOL'), 'HeapUnlock': (1, ['HANDLE'], ['heap'], 'BOOL'), 'GetSystemCpuSetInformation': (5, ['SYSTEM_CPU_SET_INFORMATION *', 'ULONG', 'ULONG *', 'HANDLE', 'ULONG'], ['info', 'buffer_length', 'return_length', 'process', 'flags'], 'BOOL'), 'SetThreadSelectedCpuSets': (3, ['HANDLE', 'const ULONG *', 'ULONG'], ['thread', 'cpu_set_ids', 'count'], 'BOOL'), 'InitializeContext2': (5, ['void *', 'DWORD', 'CONTEXT *', 'DWORD *', 'ULONG64'], ['buffer', 'context_flags', '*context', 'length', 'compaction_mask'], 'BOOL'), 'InitializeContext': (4, ['void *', 'DWORD', 'CONTEXT *', 'DWORD *'], ['buffer', 'context_flags', '*context', 'length'], 'BOOL'), 'CopyContext': (3, ['CONTEXT *', 'DWORD', 'CONTEXT *'], ['dst', 'context_flags', 'src'], 'BOOL'), 'SetXStateFeaturesMask': (2, ['CONTEXT *', 'DWORD64'], ['context', 'feature_mask'], 'BOOL'), 'GetXStateFeaturesMask': (2, ['CONTEXT *', 'DWORD64 *'], ['context', 'feature_mask'], 'BOOL'), 'EnumSystemFirmwareTables': (3, ['DWORD', 'void *', 'DWORD'], ['provider', 'buffer', 'size'], 'UINT'), 'GetSystemFirmwareTable': (4, ['DWORD', 'DWORD', 'void *', 'DWORD'], ['provider', 'id', 'buffer', 'size'], 'UINT'), 'PathAllocCanonicalize': (3, ['const WCHAR *', 'DWORD', 'WCHAR *'], ['path_in', 'flags', '*path_out'], 'HRESULT'), 'PathAllocCombine': (4, ['const WCHAR *', 'const WCHAR *', 'DWORD', 'WCHAR *'], ['path1', 'path2', 'flags', '*out'], 'HRESULT'), 'PathCchAddBackslash': (2, ['WCHAR *', 'SIZE_T'], ['path', 'size'], 'HRESULT'), 'PathCchAddBackslashEx': (0, [], [], 'HRESULT'), 'PathCchAddExtension': (0, [], [], 'HRESULT'), 'PathCchAppend': (3, ['WCHAR *', 'SIZE_T', 'const WCHAR *'], ['path1', 'size', 'path2'], 'HRESULT'), 'PathCchAppendEx': (0, [], [], 'HRESULT'), 'PathCchCanonicalize': (3, ['WCHAR *', 'SIZE_T', 'const WCHAR *'], ['out', 'size', 'in'], 'HRESULT'), 'PathCchCanonicalizeEx': (4, ['WCHAR *', 'SIZE_T', 'const WCHAR *', 'DWORD'], ['out', 'size', 'in', 'flags'], 'HRESULT'), 'PathCchCombine': (4, ['WCHAR *', 'SIZE_T', 'const WCHAR *', 'const WCHAR *'], ['out', 'size', 'path1', 'path2'], 'HRESULT'), 'PathCchCombineEx': (0, [], [], 'HRESULT'), 'PathCchFindExtension': (0, [], [], 'HRESULT'), 'PathCchIsRoot': (0, [], [], 'BOOL'), 'PathCchRemoveBackslash': (2, ['WCHAR *', 'SIZE_T'], ['path', 'path_size'], 'HRESULT'), 'PathCchRemoveBackslashEx': (0, [], [], 'HRESULT'), 'PathCchRemoveExtension': (2, ['WCHAR *', 'SIZE_T'], ['path', 'size'], 'HRESULT'), 'PathCchRemoveFileSpec': (0, [], [], 'HRESULT'), 'PathCchRenameExtension': (3, ['WCHAR *', 'SIZE_T', 'const WCHAR *'], ['path', 'size', 'extension'], 'HRESULT'), 'PathCchSkipRoot': (0, [], [], 'HRESULT'), 'PathCchStripPrefix': (2, ['WCHAR *', 'SIZE_T'], ['path', 'size'], 'HRESULT'), 'PathCchStripToRoot': (2, ['WCHAR *', 'SIZE_T'], ['path', 'size'], 'HRESULT'), 'PathIsUNCEx': (2, ['const WCHAR *', 'const WCHAR *'], ['path', '*server'], 'BOOL'), 'PathIsUNCA': (0, [], [], 'BOOL'), 'PathIsUNCW': (0, [], [], 'BOOL'), 'PathIsRelativeA': (0, [], [], 'BOOL'), 'PathIsRelativeW': (0, [], [], 'BOOL'), 'PathIsUNCServerShareA': (0, [], [], 'BOOL'), 'PathIsUNCServerShareW': (0, [], [], 'BOOL'), 'PathIsRootA': (0, [], [], 'BOOL'), 'PathIsRootW': (1, ['const WCHAR *'], ['path'], 'BOOL'), 'PathRemoveFileSpecA': (1, ['char *'], ['path'], 'BOOL'), 'PathRemoveFileSpecW': (1, ['WCHAR *'], ['path'], 'BOOL'), 'PathStripToRootA': (1, ['char *'], ['path'], 'BOOL'), 'PathStripToRootW': (0, [], [], 'BOOL'), 'PathAddBackslashA': (0, [], [], 'LPSTR'), 'PathAddBackslashW': (0, [], [], 'LPWSTR'), 'PathFindExtensionA': (0, [], [], 'LPSTR'), 'PathFindExtensionW': (0, [], [], 'LPWSTR'), 'PathAddExtensionA': (0, [], [], 'BOOL'), 'PathAddExtensionW': (0, [], [], 'BOOL'), 'PathCanonicalizeW': (0, [], [], 'BOOL'), 'PathCanonicalizeA': (2, ['char *', 'const char *'], ['buffer', 'path'], 'BOOL'), 'PathCombineA': (3, ['char *', 'const char *', 'const char *'], ['dst', 'dir', 'file'], 'LPSTR'), 'PathAppendA': (2, ['char *', 'const char *'], ['path', 'append'], 'BOOL'), 'PathAppendW': (0, [], [], 'BOOL'), 'PathCommonPrefixA': (0, [], [], 'int'), 'PathCommonPrefixW': (3, ['const WCHAR *', 'const WCHAR *', 'WCHAR *'], ['file1', 'file2', 'path'], 'int'), 'PathIsPrefixA': (2, ['const char *', 'const char *'], ['prefix', 'path'], 'BOOL'), 'PathIsPrefixW': (0, [], [], 'BOOL'), 'PathGetCharTypeW': (0, [], [], 'UINT'), 'PathGetCharTypeA': (1, ['UCHAR'], ['ch'], 'UINT'), 'PathGetDriveNumberA': (0, [], [], 'int'), 'PathGetDriveNumberW': (0, [], [], 'int'), 'PathIsFileSpecA': (0, [], [], 'BOOL'), 'PathIsFileSpecW': (0, [], [], 'BOOL'), 'PathIsUNCServerA': (0, [], [], 'BOOL'), 'PathIsUNCServerW': (0, [], [], 'BOOL'), 'PathRemoveBlanksA': (0, [], [], 'void'), 'PathRemoveBlanksW': (0, [], [], 'void'), 'PathRemoveExtensionA': (0, [], [], 'void'), 'PathRemoveExtensionW': (0, [], [], 'void'), 'PathRenameExtensionA': (0, [], [], 'BOOL'), 'PathRenameExtensionW': (0, [], [], 'BOOL'), 'PathUnquoteSpacesA': (0, [], [], 'void'), 'PathUnquoteSpacesW': (0, [], [], 'void'), 'PathIsLFNFileSpecA': (0, [], [], 'BOOL'), 'PathIsLFNFileSpecW': (1, ['const WCHAR *'], ['path'], 'BOOL'), 'PathIsValidCharA': (2, ['char', 'DWORD'], ['c', 'class'], 'BOOL'), 'PathIsValidCharW': (0, [], [], 'BOOL'), 'PathStripPathA': (1, ['char *'], ['path'], 'void'), 'PathStripPathW': (0, [], [], 'void'), 'PathSearchAndQualifyA': (0, [], [], 'BOOL'), 'PathSearchAndQualifyW': (0, [], [], 'BOOL'), 'PathRelativePathToA': (0, [], [], 'BOOL'), 'PathRelativePathToW': (0, [], [], 'BOOL'), 'PathMatchSpecA': (2, ['const char *', 'const char *'], ['path', 'mask'], 'BOOL'), 'PathMatchSpecW': (2, ['const WCHAR *', 'const WCHAR *'], ['path', 'mask'], 'BOOL'), 'PathQuoteSpacesA': (1, ['char *'], ['path'], 'void'), 'PathQuoteSpacesW': (0, [], [], 'void'), 'PathIsSameRootA': (0, [], [], 'BOOL'), 'PathIsSameRootW': (0, [], [], 'BOOL'), 'PathFileExistsA': (0, [], [], 'BOOL'), 'PathFileExistsW': (1, ['const WCHAR *'], ['path'], 'BOOL'), 'PathParseIconLocationA': (0, [], [], 'int'), 'PathParseIconLocationW': (0, [], [], 'int'), 'PathUnExpandEnvStringsA': (0, [], [], 'BOOL'), 'PathUnExpandEnvStringsW': (3, ['const WCHAR *', 'WCHAR *', 'UINT'], ['path', 'buffer', 'buf_len'], 'BOOL'), 'ParseURLA': (2, ['const char *', 'PARSEDURLA *'], ['url', 'result'], 'HRESULT'), 'ParseURLW': (0, [], [], 'HRESULT'), 'UrlUnescapeA': (0, [], [], 'HRESULT'), 'UrlUnescapeW': (4, ['WCHAR *', 'WCHAR *', 'DWORD *', 'DWORD'], ['url', 'unescaped', 'unescaped_len', 'flags'], 'HRESULT'), 'PathCreateFromUrlA': (4, ['const char *', 'char *', 'DWORD *', 'DWORD'], ['pszUrl', 'pszPath', 'pcchPath', 'dwReserved'], 'HRESULT'), 'PathCreateFromUrlW': (0, [], [], 'HRESULT'), 'PathCreateFromUrlAlloc': (3, ['const WCHAR *', 'WCHAR *', 'DWORD'], ['url', '*path', 'reserved'], 'HRESULT'), 'PathIsURLA': (1, ['const char *'], ['path'], 'BOOL'), 'PathIsURLW': (0, [], [], 'BOOL'), 'UrlEscapeA': (0, [], [], 'HRESULT'), 'UrlEscapeW': (0, [], [], 'HRESULT'), 'UrlCanonicalizeA': (4, ['const char *', 'char *', 'DWORD *', 'DWORD'], ['src_url', 'canonicalized', 'canonicalized_len', 'flags'], 'HRESULT'), 'UrlCanonicalizeW': (0, [], [], 'HRESULT'), 'UrlApplySchemeA': (4, ['const char *', 'char *', 'DWORD *', 'DWORD'], ['url', 'out', 'out_len', 'flags'], 'HRESULT'), 'UrlApplySchemeW': (4, ['const WCHAR *', 'WCHAR *', 'DWORD *', 'DWORD'], ['url', 'out', 'length', 'flags'], 'HRESULT'), 'UrlCompareA': (3, ['const char *', 'const char *', 'BOOL'], ['url1', 'url2', 'ignore_slash'], 'INT'), 'UrlCompareW': (0, [], [], 'INT'), 'UrlFixupW': (0, [], [], 'HRESULT'), 'UrlGetPartA': (5, ['const char *', 'char *', 'DWORD *', 'DWORD', 'DWORD'], ['url', 'out', 'out_len', 'part', 'flags'], 'HRESULT'), 'UrlGetPartW': (5, ['const WCHAR *', 'WCHAR *', 'DWORD *', 'DWORD', 'DWORD'], ['url', 'out', 'out_len', 'part', 'flags'], 'HRESULT'), 'UrlIsA': (0, [], [], 'BOOL'), 'UrlIsW': (2, ['const WCHAR *', 'URLIS'], ['url', 'Urlis'], 'BOOL'), 'UrlIsOpaqueA': (1, ['const char *'], ['url'], 'BOOL'), 'UrlIsOpaqueW': (0, [], [], 'BOOL'), 'UrlIsNoHistoryA': (0, [], [], 'BOOL'), 'UrlIsNoHistoryW': (0, [], [], 'BOOL'), 'UrlCreateFromPathA': (0, [], [], 'HRESULT'), 'UrlCreateFromPathW': (0, [], [], 'HRESULT'), 'UrlCombineA': (0, [], [], 'HRESULT'), 'UrlCombineW': (0, [], [], 'HRESULT'), 'HashData': (4, ['const unsigned char *', 'DWORD', 'unsigned char *', 'DWORD'], ['src', 'src_len', 'dest', 'dest_len'], 'HRESULT'), 'UrlHashA': (0, [], [], 'HRESULT'), 'UrlHashW': (0, [], [], 'HRESULT'), 'IsInternetESCEnabled': (0, [], [], 'BOOL'), 'BaseFlushAppcompatCache': (0, [], [], 'BOOL'), 'GetCommandLineA': (0, [], [], 'LPSTR'), 'GetCommandLineW': (0, [], [], 'LPWSTR'), 'RemapPredefinedHandleInternal': (2, ['HKEY', 'HKEY'], ['hkey', 'override'], 'NTSTATUS'), 'DisablePredefinedHandleTableInternal': (1, ['HKEY'], ['hkey'], 'NTSTATUS'), 'RegOpenCurrentUser': (2, ['REGSAM', 'PHKEY'], ['access', 'retkey'], 'LSTATUS'), 'RegEnumKeyExW': (8, ['HKEY', 'DWORD', 'LPWSTR', 'LPDWORD', 'LPDWORD', 'LPWSTR', 'LPDWORD', 'FILETIME *'], ['hkey', 'index', 'name', 'name_len', 'reserved', 'class', 'class_len', 'ft'], 'LSTATUS'), 'RegEnumKeyExA': (8, ['HKEY', 'DWORD', 'LPSTR', 'LPDWORD', 'LPDWORD', 'LPSTR', 'LPDWORD', 'FILETIME *'], ['hkey', 'index', 'name', 'name_len', 'reserved', 'class', 'class_len', 'ft'], 'LSTATUS'), 'RegQueryInfoKeyW': (12, ['HKEY', 'LPWSTR', 'LPDWORD', 'LPDWORD', 'LPDWORD', 'LPDWORD', 'LPDWORD', 'LPDWORD', 'LPDWORD', 'LPDWORD', 'LPDWORD', 'FILETIME *'], ['hkey', 'class', 'class_len', 'reserved', 'subkeys', 'max_subkey', 'max_class', 'values', 'max_value', 'max_data', 'security', 'modif'], 'LSTATUS'), 'RegQueryInfoKeyA': (12, ['HKEY', 'LPSTR', 'LPDWORD', 'LPDWORD', 'LPDWORD', 'LPDWORD', 'LPDWORD', 'LPDWORD', 'LPDWORD', 'LPDWORD', 'LPDWORD', 'FILETIME *'], ['hkey', 'class', 'class_len', 'reserved', 'subkeys', 'max_subkey', 'max_class', 'values', 'max_value', 'max_data', 'security', 'modif'], 'LSTATUS'), 'RegDeleteKeyExW': (4, ['HKEY', 'LPCWSTR', 'REGSAM', 'DWORD'], ['hkey', 'name', 'access', 'reserved'], 'LSTATUS'), 'RegDeleteKeyExA': (4, ['HKEY', 'LPCSTR', 'REGSAM', 'DWORD'], ['hkey', 'name', 'access', 'reserved'], 'LSTATUS'), 'RegSetKeyValueW': (6, ['HKEY', 'LPCWSTR', 'LPCWSTR', 'DWORD', 'const void *', 'DWORD'], ['hkey', 'subkey', 'name', 'type', 'data', 'len'], 'LONG'), 'RegSetKeyValueA': (6, ['HKEY', 'LPCSTR', 'LPCSTR', 'DWORD', 'const void *', 'DWORD'], ['hkey', 'subkey', 'name', 'type', 'data', 'len'], 'LONG'), 'RegGetValueW': (7, ['HKEY', 'LPCWSTR', 'LPCWSTR', 'DWORD', 'LPDWORD', 'PVOID', 'LPDWORD'], ['hKey', 'pszSubKey', 'pszValue', 'dwFlags', 'pdwType', 'pvData', 'pcbData'], 'LSTATUS'), 'RegGetValueA': (7, ['HKEY', 'LPCSTR', 'LPCSTR', 'DWORD', 'LPDWORD', 'PVOID', 'LPDWORD'], ['hKey', 'pszSubKey', 'pszValue', 'dwFlags', 'pdwType', 'pvData', 'pcbData'], 'LSTATUS'), 'RegEnumValueW': (8, ['HKEY', 'DWORD', 'LPWSTR', 'LPDWORD', 'LPDWORD', 'LPDWORD', 'LPBYTE', 'LPDWORD'], ['hkey', 'index', 'value', 'val_count', 'reserved', 'type', 'data', 'count'], 'LSTATUS'), 'RegEnumValueA': (8, ['HKEY', 'DWORD', 'LPSTR', 'LPDWORD', 'LPDWORD', 'LPDWORD', 'LPBYTE', 'LPDWORD'], ['hkey', 'index', 'value', 'val_count', 'reserved', 'type', 'data', 'count'], 'LSTATUS'), 'RegDeleteValueW': (2, ['HKEY', 'LPCWSTR'], ['hkey', 'name'], 'LSTATUS'), 'RegDeleteValueA': (2, ['HKEY', 'LPCSTR'], ['hkey', 'name'], 'LSTATUS'), 'RegDeleteKeyValueW': (3, ['HKEY', 'LPCWSTR', 'LPCWSTR'], ['hkey', 'subkey', 'name'], 'LONG'), 'RegDeleteKeyValueA': (3, ['HKEY', 'LPCSTR', 'LPCSTR'], ['hkey', 'subkey', 'name'], 'LONG'), 'RegLoadKeyW': (3, ['HKEY', 'LPCWSTR', 'LPCWSTR'], ['hkey', 'subkey', 'filename'], 'LSTATUS'), 'RegLoadKeyA': (3, ['HKEY', 'LPCSTR', 'LPCSTR'], ['hkey', 'subkey', 'filename'], 'LSTATUS'), 'RegSaveKeyExW': (4, ['HKEY', 'LPCWSTR', 'SECURITY_ATTRIBUTES *', 'DWORD'], ['hkey', 'file', 'sa', 'flags'], 'LSTATUS'), 'RegSaveKeyExA': (4, ['HKEY', 'LPCSTR', 'SECURITY_ATTRIBUTES *', 'DWORD'], ['hkey', 'file', 'sa', 'flags'], 'LSTATUS'), 'RegRestoreKeyW': (3, ['HKEY', 'LPCWSTR', 'DWORD'], ['hkey', 'lpFile', 'dwFlags'], 'LSTATUS'), 'RegRestoreKeyA': (3, ['HKEY', 'LPCSTR', 'DWORD'], ['hkey', 'lpFile', 'dwFlags'], 'LSTATUS'), 'RegUnLoadKeyW': (2, ['HKEY', 'LPCWSTR'], ['hkey', 'lpSubKey'], 'LSTATUS'), 'RegUnLoadKeyA': (2, ['HKEY', 'LPCSTR'], ['hkey', 'lpSubKey'], 'LSTATUS'), 'RegSetKeySecurity': (3, ['HKEY', 'SECURITY_INFORMATION', 'PSECURITY_DESCRIPTOR'], ['hkey', 'SecurityInfo', 'pSecurityDesc'], 'LSTATUS'), 'RegGetKeySecurity': (4, ['HKEY', 'SECURITY_INFORMATION', 'PSECURITY_DESCRIPTOR', 'LPDWORD'], ['hkey', 'SecurityInformation', 'pSecurityDescriptor', 'lpcbSecurityDescriptor'], 'LSTATUS'), 'RegFlushKey': (1, ['HKEY'], ['hkey'], 'LSTATUS'), 'RegNotifyChangeKeyValue': (5, ['HKEY', 'BOOL', 'DWORD', 'HANDLE', 'BOOL'], ['hkey', 'fWatchSubTree', 'fdwNotifyFilter', 'hEvent', 'fAsync'], 'LSTATUS'), 'RegOpenUserClassesRoot': (4, ['HANDLE', 'DWORD', 'REGSAM', 'PHKEY'], ['hToken', 'dwOptions', 'samDesired', 'phkResult'], 'LSTATUS'), 'RegLoadMUIStringW': (7, ['HKEY', 'LPCWSTR', 'LPWSTR', 'DWORD', 'LPDWORD', 'DWORD', 'LPCWSTR'], ['hKey', 'pwszValue', 'pwszBuffer', 'cbBuffer', 'pcbData', 'dwFlags', 'pwszBaseDir'], 'LSTATUS'), 'RegLoadMUIStringA': (7, ['HKEY', 'LPCSTR', 'LPSTR', 'DWORD', 'LPDWORD', 'DWORD', 'LPCSTR'], ['hKey', 'pszValue', 'pszBuffer', 'cbBuffer', 'pcbData', 'dwFlags', 'pszBaseDir'], 'LSTATUS'), 'RegDeleteTreeW': (2, ['HKEY', 'const WCHAR *'], ['hkey', 'subkey'], 'LSTATUS'), 'RegDeleteTreeA': (2, ['HKEY', 'const char *'], ['hkey', 'subkey'], 'LSTATUS'), 'RegCopyTreeW': (3, ['HKEY', 'const WCHAR *', 'HKEY'], ['hsrc', 'subkey', 'hdst'], 'LSTATUS'), 'RegLoadAppKeyA': (5, ['const char *', 'HKEY *', 'REGSAM', 'DWORD', 'DWORD'], ['file', 'result', 'sam', 'options', 'reserved'], 'LSTATUS'), 'RegLoadAppKeyW': (5, ['const WCHAR *', 'HKEY *', 'REGSAM', 'DWORD', 'DWORD'], ['file', 'result', 'sam', 'options', 'reserved'], 'LSTATUS'), 'GetComputerNameExA': (3, ['COMPUTER_NAME_FORMAT', 'char *', 'DWORD *'], ['type', 'name', 'len'], 'BOOL'), 'GetComputerNameExW': (3, ['COMPUTER_NAME_FORMAT', 'WCHAR *', 'DWORD *'], ['type', 'name', 'len'], 'BOOL'), 'SHRegCreateUSKeyA': (5, ['LPCSTR', 'REGSAM', 'HUSKEY', 'PHUSKEY', 'DWORD'], ['path', 'samDesired', 'relative_key', 'new_uskey', 'flags'], 'LONG'), 'SHRegCreateUSKeyW': (5, ['const WCHAR *', 'REGSAM', 'HUSKEY', 'PHUSKEY', 'DWORD'], ['path', 'samDesired', 'relative_key', 'new_uskey', 'flags'], 'LONG'), 'SHRegCloseUSKey': (0, [], [], 'LONG'), 'SHRegDeleteEmptyUSKeyA': (0, [], [], 'LONG'), 'SHRegDeleteEmptyUSKeyW': (0, [], [], 'LONG'), 'SHRegDeleteUSValueA': (0, [], [], 'LONG'), 'SHRegDeleteUSValueW': (0, [], [], 'LONG'), 'SHRegEnumUSValueA': (0, [], [], 'LONG'), 'SHRegEnumUSValueW': (0, [], [], 'LONG'), 'SHRegEnumUSKeyA': (0, [], [], 'LONG'), 'SHRegEnumUSKeyW': (0, [], [], 'LONG'), 'SHRegOpenUSKeyA': (0, [], [], 'LONG'), 'SHRegOpenUSKeyW': (0, [], [], 'LONG'), 'SHRegWriteUSValueA': (6, ['HUSKEY', 'const char *', 'DWORD', 'void *', 'DWORD', 'DWORD'], ['hUSKey', 'value', 'type', 'data', 'data_len', 'flags'], 'LONG'), 'SHRegWriteUSValueW': (0, [], [], 'LONG'), 'SHRegSetUSValueA': (6, ['const char *', 'const char *', 'DWORD', 'void *', 'DWORD', 'DWORD'], ['subkey', 'value', 'type', 'data', 'data_len', 'flags'], 'LONG'), 'SHRegSetUSValueW': (0, [], [], 'LONG'), 'SHRegQueryInfoUSKeyA': (0, [], [], 'LONG'), 'SHRegQueryInfoUSKeyW': (0, [], [], 'LONG'), 'SHRegQueryUSValueA': (0, [], [], 'LONG'), 'SHRegQueryUSValueW': (8, ['HUSKEY', 'const WCHAR *', 'DWORD *', 'void *', 'DWORD *', 'BOOL', 'void *', 'DWORD'], ['hUSKey', 'value', 'type', 'data', 'data_len', 'ignore_hkcu', 'default_data', 'default_data_len'], 'LONG'), 'SHRegGetUSValueA': (8, ['const char *', 'const char *', 'DWORD *', 'void *', 'DWORD *', 'BOOL', 'void *', 'DWORD'], ['subkey', 'value', 'type', 'data', 'data_len', 'ignore_hkcu', 'default_data', 'default_data_len'], 'LONG'), 'SHRegGetUSValueW': (8, ['const WCHAR *', 'const WCHAR *', 'DWORD *', 'void *', 'DWORD *', 'BOOL', 'void *', 'DWORD'], ['subkey', 'value', 'type', 'data', 'data_len', 'ignore_hkcu', 'default_data', 'default_data_len'], 'LONG'), 'SHRegGetBoolUSValueA': (4, ['const char *', 'const char *', 'BOOL', 'BOOL'], ['subkey', 'value', 'ignore_hkcu', 'default_value'], 'BOOL'), 'SHRegGetBoolUSValueW': (0, [], [], 'BOOL'), 'AllocateLocallyUniqueId': (1, ['PLUID'], ['luid'], 'BOOL'), 'CopySid': (3, ['DWORD', 'PSID', 'PSID'], ['len', 'dest', 'source'], 'BOOL'), 'EqualPrefixSid': (2, ['PSID', 'PSID'], ['sid1', 'sid2'], 'BOOL'), 'EqualSid': (2, ['PSID', 'PSID'], ['sid1', 'sid2'], 'BOOL'), 'EqualDomainSid': (3, ['PSID', 'PSID', 'BOOL *'], ['sid1', 'sid2', 'equal'], 'BOOL'), 'GetLengthSid': (1, ['PSID'], ['sid'], 'DWORD'), 'GetSidIdentifierAuthority': (1, ['PSID'], ['sid'], 'PSID_IDENTIFIER_AUTHORITY'), 'GetSidLengthRequired': (1, ['BYTE'], ['count'], 'DWORD'), 'GetSidSubAuthority': (2, ['PSID', 'DWORD'], ['sid', 'auth'], 'PDWORD'), 'GetSidSubAuthorityCount': (1, ['PSID'], ['sid'], 'PUCHAR'), 'GetWindowsAccountDomainSid': (3, ['PSID', 'PSID', 'DWORD *'], ['sid', 'domain_sid', 'size'], 'BOOL'), 'IsValidSid': (1, ['PSID'], ['sid'], 'BOOL'), 'CreateWellKnownSid': (4, ['WELL_KNOWN_SID_TYPE', 'PSID', 'PSID', 'DWORD *'], ['type', 'domain', 'sid', 'size'], 'BOOL'), 'IsWellKnownSid': (2, ['PSID', 'WELL_KNOWN_SID_TYPE'], ['sid', 'type'], 'BOOL'), 'AdjustTokenGroups': (6, ['HANDLE', 'BOOL', 'PTOKEN_GROUPS', 'DWORD', 'PTOKEN_GROUPS', 'PDWORD'], ['token', 'reset', 'new', 'len', 'prev', 'ret_len'], 'BOOL'), 'AdjustTokenPrivileges': (6, ['HANDLE', 'BOOL', 'PTOKEN_PRIVILEGES', 'DWORD', 'PTOKEN_PRIVILEGES', 'PDWORD'], ['token', 'disable', 'new', 'len', 'prev', 'ret_len'], 'BOOL'), 'CheckTokenMembership': (3, ['HANDLE', 'PSID', 'PBOOL'], ['token', 'sid_to_check', 'is_member'], 'BOOL'), 'CreateRestrictedToken': (9, ['HANDLE', 'DWORD', 'DWORD', 'SID_AND_ATTRIBUTES *', 'DWORD', 'LUID_AND_ATTRIBUTES *', 'DWORD', 'SID_AND_ATTRIBUTES *', 'HANDLE *'], ['token', 'flags', 'disable_sid_count', 'disable_sids', 'delete_priv_count', 'delete_privs', 'restrict_sid_count', 'restrict_sids', 'ret'], 'BOOL'), 'DuplicateToken': (3, ['HANDLE', 'SECURITY_IMPERSONATION_LEVEL', 'PHANDLE'], ['token', 'level', 'ret'], 'BOOL'), 'DuplicateTokenEx': (6, ['HANDLE', 'DWORD', 'LPSECURITY_ATTRIBUTES', 'SECURITY_IMPERSONATION_LEVEL', 'TOKEN_TYPE', 'PHANDLE'], ['token', 'access', 'sa', 'level', 'type', 'ret'], 'BOOL'), 'GetTokenInformation': (5, ['HANDLE', 'TOKEN_INFORMATION_CLASS', 'LPVOID', 'DWORD', 'LPDWORD'], ['token', 'class', 'info', 'len', 'retlen'], 'BOOL'), 'ImpersonateAnonymousToken': (1, ['HANDLE'], ['thread'], 'BOOL'), 'ImpersonateLoggedOnUser': (1, ['HANDLE'], ['token'], 'BOOL'), 'ImpersonateNamedPipeClient': (1, ['HANDLE'], ['pipe'], 'BOOL'), 'ImpersonateSelf': (1, ['SECURITY_IMPERSONATION_LEVEL'], ['level'], 'BOOL'), 'IsTokenRestricted': (1, ['HANDLE'], ['token'], 'BOOL'), 'OpenProcessToken': (3, ['HANDLE', 'DWORD', 'HANDLE *'], ['process', 'access', 'handle'], 'BOOL'), 'OpenThreadToken': (4, ['HANDLE', 'DWORD', 'BOOL', 'HANDLE *'], ['thread', 'access', 'self', 'handle'], 'BOOL'), 'PrivilegeCheck': (3, ['HANDLE', 'PPRIVILEGE_SET', 'LPBOOL'], ['token', 'privs', 'result'], 'BOOL'), 'RevertToSelf': (0, [], [], 'BOOL'), 'SetThreadToken': (2, ['PHANDLE', 'HANDLE'], ['thread', 'token'], 'BOOL'), 'SetTokenInformation': (4, ['HANDLE', 'TOKEN_INFORMATION_CLASS', 'LPVOID', 'DWORD'], ['token', 'class', 'info', 'len'], 'BOOL'), 'ConvertToAutoInheritPrivateObjectSecurity': (6, ['PSECURITY_DESCRIPTOR', 'PSECURITY_DESCRIPTOR', 'PSECURITY_DESCRIPTOR *', 'GUID *', 'BOOL', 'PGENERIC_MAPPING'], ['parent', 'current', 'descr', 'type', 'is_dir', 'mapping'], 'BOOL'), 'CreatePrivateObjectSecurity': (6, ['PSECURITY_DESCRIPTOR', 'PSECURITY_DESCRIPTOR', 'PSECURITY_DESCRIPTOR *', 'BOOL', 'HANDLE', 'PGENERIC_MAPPING'], ['parent', 'creator', 'descr', 'is_container', 'token', 'mapping'], 'BOOL'), 'CreatePrivateObjectSecurityEx': (8, ['PSECURITY_DESCRIPTOR', 'PSECURITY_DESCRIPTOR', 'PSECURITY_DESCRIPTOR *', 'GUID *', 'BOOL', 'ULONG', 'HANDLE', 'PGENERIC_MAPPING'], ['parent', 'creator', 'descr', 'type', 'is_container', 'flags', 'token', 'mapping'], 'BOOL'), 'CreatePrivateObjectSecurityWithMultipleInheritance': (9, ['PSECURITY_DESCRIPTOR', 'PSECURITY_DESCRIPTOR', 'PSECURITY_DESCRIPTOR *', 'GUID *', 'ULONG', 'BOOL', 'ULONG', 'HANDLE', 'PGENERIC_MAPPING'], ['parent', 'creator', 'descr', '*types', 'count', 'is_container', 'flags', 'token', 'mapping'], 'BOOL'), 'DestroyPrivateObjectSecurity': (1, ['PSECURITY_DESCRIPTOR *'], ['descr'], 'BOOL'), 'GetFileSecurityW': (5, ['LPCWSTR', 'SECURITY_INFORMATION', 'PSECURITY_DESCRIPTOR', 'DWORD', 'LPDWORD'], ['name', 'info', 'descr', 'len', 'ret_len'], 'BOOL'), 'GetKernelObjectSecurity': (5, ['HANDLE', 'SECURITY_INFORMATION', 'PSECURITY_DESCRIPTOR', 'DWORD', 'LPDWORD'], ['handle', 'info', 'descr', 'len', 'ret_len'], 'BOOL'), 'GetPrivateObjectSecurity': (5, ['PSECURITY_DESCRIPTOR', 'SECURITY_INFORMATION', 'PSECURITY_DESCRIPTOR', 'DWORD', 'PDWORD'], ['obj_descr', 'info', 'ret_descr', 'len', 'ret_len'], 'BOOL'), 'GetSecurityDescriptorControl': (3, ['PSECURITY_DESCRIPTOR', 'PSECURITY_DESCRIPTOR_CONTROL', 'LPDWORD'], ['descr', 'control', 'revision'], 'BOOL'), 'GetSecurityDescriptorDacl': (4, ['PSECURITY_DESCRIPTOR', 'LPBOOL', 'PACL *', 'LPBOOL'], ['descr', 'dacl_present', 'dacl', 'dacl_defaulted'], 'BOOL'), 'GetSecurityDescriptorGroup': (3, ['PSECURITY_DESCRIPTOR', 'PSID *', 'LPBOOL'], ['descr', 'group', 'group_defaulted'], 'BOOL'), 'GetSecurityDescriptorLength': (1, ['PSECURITY_DESCRIPTOR'], ['descr'], 'DWORD'), 'GetSecurityDescriptorOwner': (3, ['PSECURITY_DESCRIPTOR', 'PSID *', 'LPBOOL'], ['descr', 'owner', 'owner_defaulted'], 'BOOL'), 'GetSecurityDescriptorSacl': (4, ['PSECURITY_DESCRIPTOR', 'LPBOOL', 'PACL *', 'LPBOOL'], ['descr', 'sacl_present', 'sacl', 'sacl_defaulted'], 'BOOL'), 'InitializeSecurityDescriptor': (2, ['PSECURITY_DESCRIPTOR', 'DWORD'], ['descr', 'revision'], 'BOOL'), 'IsValidSecurityDescriptor': (1, ['PSECURITY_DESCRIPTOR'], ['descr'], 'BOOL'), 'MakeSelfRelativeSD': (3, ['PSECURITY_DESCRIPTOR', 'PSECURITY_DESCRIPTOR', 'LPDWORD'], ['abs_descr', 'rel_descr', 'len'], 'BOOL'), 'SetFileSecurityW': (3, ['LPCWSTR', 'SECURITY_INFORMATION', 'PSECURITY_DESCRIPTOR'], ['name', 'info', 'descr'], 'BOOL'), 'SetKernelObjectSecurity': (3, ['HANDLE', 'SECURITY_INFORMATION', 'PSECURITY_DESCRIPTOR'], ['handle', 'info', 'descr'], 'BOOL'), 'SetPrivateObjectSecurity': (5, ['SECURITY_INFORMATION', 'PSECURITY_DESCRIPTOR', 'PSECURITY_DESCRIPTOR *', 'PGENERIC_MAPPING', 'HANDLE'], ['info', 'descr', 'obj_descr', 'mapping', 'token'], 'BOOL'), 'SetPrivateObjectSecurityEx': (6, ['SECURITY_INFORMATION', 'PSECURITY_DESCRIPTOR', 'PSECURITY_DESCRIPTOR *', 'ULONG', 'PGENERIC_MAPPING', 'HANDLE'], ['info', 'descr', 'obj_descr', 'flags', 'mapping', 'token'], 'BOOL'), 'SetSecurityDescriptorControl': (3, ['PSECURITY_DESCRIPTOR', 'SECURITY_DESCRIPTOR_CONTROL', 'SECURITY_DESCRIPTOR_CONTROL'], ['descr', 'mask', 'set'], 'BOOL'), 'SetSecurityDescriptorDacl': (4, ['PSECURITY_DESCRIPTOR', 'BOOL', 'PACL', 'BOOL'], ['descr', 'present', 'dacl', 'defaulted'], 'BOOL'), 'SetSecurityDescriptorGroup': (3, ['PSECURITY_DESCRIPTOR', 'PSID', 'BOOL'], ['descr', 'group', 'defaulted'], 'BOOL'), 'SetSecurityDescriptorOwner': (3, ['PSECURITY_DESCRIPTOR', 'PSID', 'BOOL'], ['descr', 'owner', 'defaulted'], 'BOOL'), 'AccessCheck': (8, ['PSECURITY_DESCRIPTOR', 'HANDLE', 'DWORD', 'PGENERIC_MAPPING', 'PPRIVILEGE_SET', 'LPDWORD', 'LPDWORD', 'LPBOOL'], ['descr', 'token', 'access', 'mapping', 'priv', 'priv_len', 'granted', 'status'], 'BOOL'), 'AccessCheckAndAuditAlarmW': (11, ['LPCWSTR', 'LPVOID', 'LPWSTR', 'LPWSTR', 'PSECURITY_DESCRIPTOR', 'DWORD', 'PGENERIC_MAPPING', 'BOOL', 'LPDWORD', 'LPBOOL', 'LPBOOL'], ['subsystem', 'id', 'type_name', 'name', 'descr', 'access', 'mapping', 'creation', 'granted', 'status', 'on_close'], 'BOOL'), 'AccessCheckByType': (11, ['PSECURITY_DESCRIPTOR', 'PSID', 'HANDLE', 'DWORD', 'POBJECT_TYPE_LIST', 'DWORD', 'PGENERIC_MAPPING', 'PPRIVILEGE_SET', 'LPDWORD', 'LPDWORD', 'LPBOOL'], ['descr', 'sid', 'token', 'access', 'types', 'types_len', 'mapping', 'priv', 'priv_len', 'granted', 'status'], 'BOOL'), 'AddAccessAllowedAce': (4, ['PACL', 'DWORD', 'DWORD', 'PSID'], ['acl', 'rev', 'access', 'sid'], 'BOOL'), 'AddAccessAllowedAceEx': (5, ['PACL', 'DWORD', 'DWORD', 'DWORD', 'PSID'], ['acl', 'rev', 'flags', 'access', 'sid'], 'BOOL'), 'AddAccessAllowedObjectAce': (7, ['PACL', 'DWORD', 'DWORD', 'DWORD', 'GUID *', 'GUID *', 'PSID'], ['acl', 'rev', 'flags', 'access', 'type', 'inherit', 'sid'], 'BOOL'), 'AddAccessDeniedAce': (4, ['PACL', 'DWORD', 'DWORD', 'PSID'], ['acl', 'rev', 'access', 'sid'], 'BOOL'), 'AddAccessDeniedAceEx': (5, ['PACL', 'DWORD', 'DWORD', 'DWORD', 'PSID'], ['acl', 'rev', 'flags', 'access', 'sid'], 'BOOL'), 'AddAccessDeniedObjectAce': (7, ['PACL', 'DWORD', 'DWORD', 'DWORD', 'GUID *', 'GUID *', 'PSID'], ['acl', 'rev', 'flags', 'access', 'type', 'inherit', 'sid'], 'BOOL'), 'AddAce': (5, ['PACL', 'DWORD', 'DWORD', 'LPVOID', 'DWORD'], ['acl', 'rev', 'index', 'list', 'len'], 'BOOL'), 'AddAuditAccessAce': (6, ['PACL', 'DWORD', 'DWORD', 'PSID', 'BOOL', 'BOOL'], ['acl', 'rev', 'access', 'sid', 'success', 'failure'], 'BOOL'), 'AddAuditAccessAceEx': (7, ['PACL', 'DWORD', 'DWORD', 'DWORD', 'PSID', 'BOOL', 'BOOL'], ['acl', 'rev', 'flags', 'access', 'sid', 'success', 'failure'], 'BOOL'), 'AddAuditAccessObjectAce': (9, ['PACL', 'DWORD', 'DWORD', 'DWORD', 'GUID *', 'GUID *', 'PSID', 'BOOL', 'BOOL'], ['acl', 'rev', 'flags', 'access', 'type', 'inherit', 'sid', 'success', 'failure'], 'BOOL'), 'AddMandatoryAce': (5, ['PACL', 'DWORD', 'DWORD', 'DWORD', 'PSID'], ['acl', 'rev', 'flags', 'policy', 'sid'], 'BOOL'), 'AreAllAccessesGranted': (2, ['DWORD', 'DWORD'], ['granted', 'desired'], 'BOOL'), 'AreAnyAccessesGranted': (2, ['DWORD', 'DWORD'], ['granted', 'desired'], 'BOOL'), 'DeleteAce': (2, ['PACL', 'DWORD'], ['acl', 'index'], 'BOOL'), 'FindFirstFreeAce': (2, ['PACL', 'LPVOID *'], ['acl', 'ace'], 'BOOL'), 'GetAce': (3, ['PACL', 'DWORD', 'LPVOID *'], ['acl', 'index', 'ace'], 'BOOL'), 'GetAclInformation': (4, ['PACL', 'LPVOID', 'DWORD', 'ACL_INFORMATION_CLASS'], ['acl', 'info', 'len', 'class'], 'BOOL'), 'InitializeAcl': (3, ['PACL', 'DWORD', 'DWORD'], ['acl', 'size', 'rev'], 'BOOL'), 'IsValidAcl': (1, ['PACL'], ['acl'], 'BOOL'), 'MapGenericMask': (2, ['PDWORD', 'PGENERIC_MAPPING'], ['access', 'mapping'], 'void'), 'ObjectCloseAuditAlarmW': (3, ['LPCWSTR', 'LPVOID', 'BOOL'], ['subsystem', 'id', 'on_close'], 'BOOL'), 'ObjectDeleteAuditAlarmW': (3, ['LPCWSTR', 'LPVOID', 'BOOL'], ['subsystem', 'id', 'on_close'], 'BOOL'), 'ObjectOpenAuditAlarmW': (12, ['LPCWSTR', 'LPVOID', 'LPWSTR', 'LPWSTR', 'PSECURITY_DESCRIPTOR', 'HANDLE', 'DWORD', 'DWORD', 'PPRIVILEGE_SET', 'BOOL', 'BOOL', 'LPBOOL'], ['subsystem', 'id', 'type', 'name', 'descr', 'token', 'desired', 'granted', 'privs', 'creation', 'access', 'on_close'], 'BOOL'), 'ObjectPrivilegeAuditAlarmW': (6, ['LPCWSTR', 'LPVOID', 'HANDLE', 'DWORD', 'PPRIVILEGE_SET', 'BOOL'], ['subsystem', 'id', 'token', 'desired', 'privs', 'granted'], 'BOOL'), 'PrivilegedServiceAuditAlarmW': (5, ['LPCWSTR', 'LPCWSTR', 'HANDLE', 'PPRIVILEGE_SET', 'BOOL'], ['subsystem', 'service', 'token', 'privs', 'granted'], 'BOOL'), 'SetAclInformation': (4, ['PACL', 'LPVOID', 'DWORD', 'ACL_INFORMATION_CLASS'], ['acl', 'info', 'len', 'class'], 'BOOL'), 'lstrcmpA': (0, [], [], 'int'), 'lstrcmpW': (0, [], [], 'int'), 'lstrcmpiA': (0, [], [], 'int'), 'lstrcmpiW': (0, [], [], 'int'), 'StrCmpCA': (2, ['const char *', 'const char *'], ['str', 'cmp'], 'DWORD'), 'StrCmpCW': (0, [], [], 'DWORD'), 'StrCmpICA': (0, [], [], 'DWORD'), 'StrCmpICW': (0, [], [], 'DWORD'), 'StrCmpNICA': (0, [], [], 'DWORD'), 'StrCmpNICW': (0, [], [], 'DWORD'), 'ChrCmpIA': (0, [], [], 'BOOL'), 'ChrCmpIW': (0, [], [], 'BOOL'), 'StrCmpNIA': (0, [], [], 'int'), 'StrCmpNA': (0, [], [], 'int'), 'StrCmpNW': (0, [], [], 'int'), 'StrCmpNCA': (0, [], [], 'DWORD'), 'StrCmpNCW': (0, [], [], 'DWORD'), 'StrCmpNIW': (0, [], [], 'int'), 'StrCmpW': (0, [], [], 'int'), 'StrCmpIW': (0, [], [], 'int'), 'StrSpnA': (0, [], [], 'int'), 'StrSpnW': (0, [], [], 'int'), 'StrCSpnA': (0, [], [], 'int'), 'StrCSpnW': (0, [], [], 'int'), 'StrCSpnIA': (0, [], [], 'int'), 'StrCSpnIW': (0, [], [], 'int'), 'StrTrimA': (2, ['char *', 'const char *'], ['str', 'trim'], 'BOOL'), 'StrTrimW': (2, ['WCHAR *', 'const WCHAR *'], ['str', 'trim'], 'BOOL'), 'StrToInt64ExA': (3, ['const char *', 'DWORD', 'LONGLONG *'], ['str', 'flags', 'ret'], 'BOOL'), 'StrToInt64ExW': (3, ['const WCHAR *', 'DWORD', 'LONGLONG *'], ['str', 'flags', 'ret'], 'BOOL'), 'StrToIntExA': (3, ['const char *', 'DWORD', 'INT *'], ['str', 'flags', 'ret'], 'BOOL'), 'StrToIntExW': (0, [], [], 'BOOL'), 'StrToIntA': (0, [], [], 'int'), 'StrToIntW': (0, [], [], 'int'), 'CharLowerA': (0, [], [], 'LPSTR'), 'CharLowerBuffA': (0, [], [], 'DWORD'), 'CharLowerBuffW': (2, ['WCHAR *', 'DWORD'], ['str', 'len'], 'DWORD'), 'CharLowerW': (1, ['WCHAR *'], ['str'], 'LPWSTR'), 'CharNextA': (0, [], [], 'LPSTR'), 'CharNextExA': (0, [], [], 'LPSTR'), 'CharNextW': (0, [], [], 'LPWSTR'), 'CharPrevA': (0, [], [], 'LPSTR'), 'CharPrevExA': (0, [], [], 'LPSTR'), 'CharPrevW': (0, [], [], 'LPWSTR'), 'CharUpperA': (0, [], [], 'LPSTR'), 'CharUpperBuffA': (0, [], [], 'DWORD'), 'CharUpperBuffW': (2, ['WCHAR *', 'DWORD'], ['str', 'len'], 'DWORD'), 'CharUpperW': (1, ['WCHAR *'], ['str'], 'LPWSTR'), 'StrCmpLogicalW': (2, ['const WCHAR *', 'const WCHAR *'], ['str', 'comp'], 'int'), 'StrIsIntlEqualA': (4, ['BOOL', 'const char *', 'const char *', 'int'], ['case_sensitive', 'str', 'cmp', 'len'], 'BOOL'), 'StrIsIntlEqualW': (4, ['BOOL', 'const WCHAR *', 'const WCHAR *', 'int'], ['case_sensitive', 'str', 'cmp', 'len'], 'BOOL'), 'StrCatChainW': (4, ['WCHAR *', 'DWORD', 'DWORD', 'const WCHAR *'], ['str', 'max_len', 'at', 'cat'], 'DWORD'), 'SHTruncateString': (0, [], [], 'DWORD'), 'SHLoadIndirectString': (0, [], [], 'HRESULT'), 'BaseGetNamedObjectDirectory': (1, ['HANDLE *'], ['dir'], 'NTSTATUS'), 'SetThreadErrorMode': (2, ['DWORD', 'DWORD *'], ['mode', 'old'], 'BOOL'), 'GetFileVersionInfoSizeW': (2, ['LPCWSTR', 'LPDWORD'], ['filename', 'handle'], 'DWORD'), 'GetFileVersionInfoSizeA': (2, ['LPCSTR', 'LPDWORD'], ['filename', 'handle'], 'DWORD'), 'GetFileVersionInfoSizeExW': (3, ['DWORD', 'LPCWSTR', 'LPDWORD'], ['flags', 'filename', 'ret_handle'], 'DWORD'), 'GetFileVersionInfoSizeExA': (3, ['DWORD', 'LPCSTR', 'LPDWORD'], ['flags', 'filename', 'handle'], 'DWORD'), 'GetFileVersionInfoExW': (5, ['DWORD', 'LPCWSTR', 'DWORD', 'DWORD', 'LPVOID'], ['flags', 'filename', 'ignored', 'datasize', 'data'], 'BOOL'), 'GetFileVersionInfoExA': (5, ['DWORD', 'LPCSTR', 'DWORD', 'DWORD', 'LPVOID'], ['flags', 'filename', 'handle', 'datasize', 'data'], 'BOOL'), 'GetFileVersionInfoW': (4, ['LPCWSTR', 'DWORD', 'DWORD', 'LPVOID'], ['filename', 'handle', 'datasize', 'data'], 'BOOL'), 'GetFileVersionInfoA': (4, ['LPCSTR', 'DWORD', 'DWORD', 'LPVOID'], ['filename', 'handle', 'datasize', 'data'], 'BOOL'), 'VerQueryValueA': (4, ['LPCVOID', 'LPCSTR', 'LPVOID *', 'PUINT'], ['pBlock', 'lpSubBlock', 'lplpBuffer', 'puLen'], 'BOOL'), 'VerQueryValueW': (4, ['LPCVOID', 'LPCWSTR', 'LPVOID *', 'PUINT'], ['pBlock', 'lpSubBlock', 'lplpBuffer', 'puLen'], 'BOOL'), 'VerFindFileA': (8, ['DWORD', 'LPCSTR', 'LPCSTR', 'LPCSTR', 'LPSTR', 'PUINT', 'LPSTR', 'PUINT'], ['flags', 'filename', 'win_dir', 'app_dir', 'cur_dir', 'curdir_len', 'dest', 'dest_len'], 'DWORD'), 'VerFindFileW': (8, ['DWORD', 'LPCWSTR', 'LPCWSTR', 'LPCWSTR', 'LPWSTR', 'PUINT', 'LPWSTR', 'PUINT'], ['flags', 'filename', 'win_dir', 'app_dir', 'cur_dir', 'curdir_len', 'dest', 'dest_len'], 'DWORD'), 'GetVersion': (0, [], [], 'DWORD'), 'GetVersionExA': (1, ['OSVERSIONINFOA *'], ['info'], 'BOOL'), 'GetVersionExW': (1, ['OSVERSIONINFOW *'], ['info'], 'BOOL'), 'PackageIdFromFullName': (4, ['const WCHAR *', 'UINT32', 'UINT32 *', 'BYTE *'], ['full_name', 'flags', 'buffer_length', 'buffer'], 'LONG'), 'GetVolumeInformationA': (8, ['LPCSTR', 'LPSTR', 'DWORD', 'DWORD *', 'DWORD *', 'DWORD *', 'LPSTR', 'DWORD'], ['root', 'label', 'label_len', 'serial', 'filename_len', 'flags', 'fsname', 'fsname_len'], 'BOOL'), 'GetVolumeNameForVolumeMountPointW': (3, ['LPCWSTR', 'LPWSTR', 'DWORD'], ['path', 'volume', 'size'], 'BOOL'), 'QueryDosDeviceW': (3, ['LPCWSTR', 'LPWSTR', 'DWORD'], ['devname', 'target', 'bufsize'], 'DWORD'), 'GetVolumeInformationByHandleW': (8, ['HANDLE', 'WCHAR *', 'DWORD', 'DWORD *', 'DWORD *', 'DWORD *', 'WCHAR *', 'DWORD'], ['handle', 'label', 'label_len', 'serial', 'filename_len', 'flags', 'fsname', 'fsname_len'], 'BOOL')}


dictRS_kernelbase =  {'RegOpenCurrentUser': 'ERROR_SUCCESS', 'RegEnumKeyExW': 'ERROR_SUCCESS', 'RegQueryInfoKeyW': 'ERROR_SUCCESS', 'RegQueryInfoKeyA': 'ERROR_SUCCESS', 'RegGetValueW': 'ERROR_SUCCESS', 'RegEnumValueW': 'ERROR_SUCCESS', 'RegDeleteValueA': 'ERROR_SUCCESS', 'RegLoadKeyW': 'ERROR_SUCCESS', 'RegRestoreKeyW': 'ERROR_SUCCESS', 'RegUnLoadKeyW': 'ERROR_SUCCESS', 'RegSetKeySecurity': 'ERROR_SUCCESS', 'RegGetKeySecurity': 'ERROR_SUCCESS', 'RegFlushKey': 'ERROR_SUCCESS', 'RegNotifyChangeKeyValue': 'ERROR_SUCCESS', 'RegOpenUserClassesRoot': 'ERROR_SUCCESS', 'RegLoadMUIStringW': 'ERROR_SUCCESS'}


dict4_msvcrt =  {'wWinMain': (0, [], [], 'int'), 'DllMain': (3, ['HINSTANCE', 'DWORD', 'LPVOID'], ['hinstDLL', 'fdwReason', 'lpvReserved'], 'BOOL'), 'GetDaylightFlag': (0, [], [], 'BOOL')}


dictRS_msvcrt =  {}


dict4_netapi32 =  {'NetServerEnumEx': (9, ['LMCSTR', 'DWORD', 'LPBYTE *', 'DWORD', 'LPDWORD', 'LPDWORD', 'DWORD', 'LMCSTR', 'LMCSTR'], ['ServerName', 'Level', 'Bufptr', 'PrefMaxlen', 'EntriesRead', 'totalentries', 'servertype', 'domain', 'FirstNameToReturn'], 'NET_API_STATUS'), 'NetServerDiskEnum': (7, ['LMCSTR', 'DWORD', 'LPBYTE *', 'DWORD', 'LPDWORD', 'LPDWORD', 'LPDWORD'], ['ServerName', 'Level', 'Bufptr', 'PrefMaxlen', 'EntriesRead', 'totalentries', 'Resume_Handle'], 'NET_API_STATUS'), 'NetServerGetInfo': (3, ['LMSTR', 'DWORD', 'LPBYTE*'], ['servername', 'level', 'bufptr'], 'NET_API_STATUS'), 'NetStatisticsGet': (5, ['LMSTR', 'LMSTR', 'DWORD', 'DWORD', 'LPBYTE *'], ['server', 'service', 'level', 'options', 'bufptr'], 'NET_API_STATUS'), 'NetUseEnum': (7, ['LMSTR', 'DWORD', 'LPBYTE*', 'DWORD', 'LPDWORD', 'LPDWORD', 'LPDWORD'], ['server', 'level', 'bufptr', 'prefmaxsize', 'entriesread', 'totalentries', 'resumehandle'], 'NET_API_STATUS'), 'NetScheduleJobAdd': (3, ['LPCWSTR', 'LPBYTE', 'LPDWORD'], ['server', 'bufptr', 'jobid'], 'NET_API_STATUS'), 'NetScheduleJobDel': (3, ['LPCWSTR', 'DWORD', 'DWORD'], ['server', 'minjobid', 'maxjobid'], 'NET_API_STATUS'), 'NetScheduleJobEnum': (6, ['LPCWSTR', 'LPBYTE*', 'DWORD', 'LPDWORD', 'LPDWORD', 'LPDWORD'], ['server', 'bufptr', 'prefmaxsize', 'entriesread', 'totalentries', 'resumehandle'], 'NET_API_STATUS'), 'NetScheduleJobGetInfo': (3, ['LPCWSTR', 'DWORD', 'LPBYTE *'], ['server', 'jobid', 'bufptr'], 'NET_API_STATUS'), 'NetUseGetInfo': (4, ['LMSTR', 'LMSTR', 'DWORD', 'LPBYTE *'], ['server', 'name', 'level', 'bufptr'], 'NET_API_STATUS'), 'NetApiBufferAllocate': (2, ['DWORD', 'LPVOID*'], ['ByteCount', 'Buffer'], 'NET_API_STATUS'), 'NetApiBufferFree': (1, ['LPVOID'], ['Buffer'], 'NET_API_STATUS'), 'NetApiBufferReallocate': (3, ['LPVOID', 'DWORD', 'LPVOID*'], ['OldBuffer', 'NewByteCount', 'NewBuffer'], 'NET_API_STATUS'), 'NetApiBufferSize': (2, ['LPVOID', 'LPDWORD'], ['Buffer', 'ByteCount'], 'NET_API_STATUS'), 'NetSessionEnum': (9, ['LMSTR', 'LMSTR', 'LMSTR', 'DWORD', 'LPBYTE*', 'DWORD', 'LPDWORD', 'LPDWORD', 'LPDWORD'], ['servername', 'UncClientName', 'username', 'level', 'bufptr', 'prefmaxlen', 'entriesread', 'totalentries', 'resume_handle'], 'NET_API_STATUS'), 'NetShareEnum': (7, ['LMSTR', 'DWORD', 'LPBYTE*', 'DWORD', 'LPDWORD', 'LPDWORD', 'LPDWORD'], ['servername', 'level', 'bufptr', 'prefmaxlen', 'entriesread', 'totalentries', 'resume_handle'], 'NET_API_STATUS'), 'NetShareDel': (3, ['LMSTR', 'LMSTR', 'DWORD'], ['servername', 'netname', 'reserved'], 'NET_API_STATUS'), 'NetShareGetInfo': (4, ['LMSTR', 'LMSTR', 'DWORD', 'LPBYTE *'], ['servername', 'netname', 'level', 'bufptr'], 'NET_API_STATUS'), 'NetShareAdd': (4, ['LMSTR', 'DWORD', 'LPBYTE', 'LPDWORD'], ['servername', 'level', 'buf', 'parm_err'], 'NET_API_STATUS'), 'NetFileEnum': (9, ['LPWSTR', 'LPWSTR', 'LPWSTR', 'DWORD', 'LPBYTE*', 'DWORD', 'LPDWORD', 'LPDWORD', 'PDWORD_PTR'], ['ServerName', 'BasePath', 'UserName', 'Level', 'BufPtr', 'PrefMaxLen', 'EntriesRead', 'TotalEntries', 'ResumeHandle'], 'NET_API_STATUS'), 'NetWkstaTransportEnum': (7, ['LMSTR', 'DWORD', 'PBYTE*', 'DWORD', 'LPDWORD', 'PDWORD', 'PDWORD'], ['ServerName', 'level', 'pbuf', 'prefmaxlen', 'read_entries', 'total_entries', 'hresume'], 'NET_API_STATUS'), 'NetWkstaUserGetInfo': (3, ['LMSTR', 'DWORD', 'PBYTE*'], ['reserved', 'level', 'bufptr'], 'NET_API_STATUS'), 'NetWkstaUserEnum': (7, ['LMSTR', 'DWORD', 'LPBYTE*', 'DWORD', 'LPDWORD', 'LPDWORD', 'LPDWORD'], ['servername', 'level', 'bufptr', 'prefmaxlen', 'entriesread', 'totalentries', 'resumehandle'], 'NET_API_STATUS'), 'NetpGetComputerName': (1, ['LPWSTR *'], ['Buffer'], 'NET_API_STATUS'), 'NetWkstaGetInfo': (3, ['LMSTR', 'DWORD', 'LPBYTE*'], ['servername', 'level', 'bufptr'], 'NET_API_STATUS'), 'NetUserAdd': (4, ['LPCWSTR', 'DWORD', 'LPBYTE', 'LPDWORD'], ['servername', 'level', 'bufptr', 'parm_err'], 'NET_API_STATUS'), 'NetUserDel': (2, ['LPCWSTR', 'LPCWSTR'], ['servername', 'username'], 'NET_API_STATUS'), 'NetUserGetInfo': (4, ['LPCWSTR', 'LPCWSTR', 'DWORD', 'LPBYTE*'], ['servername', 'username', 'level', 'bufptr'], 'NET_API_STATUS'), 'NetUserGetLocalGroups': (8, ['LPCWSTR', 'LPCWSTR', 'DWORD', 'DWORD', 'LPBYTE*', 'DWORD', 'LPDWORD', 'LPDWORD'], ['servername', 'username', 'level', 'flags', 'bufptr', 'prefmaxlen', 'entriesread', 'totalentries'], 'NET_API_STATUS'), 'NetUserEnum': (8, ['LPCWSTR', 'DWORD', 'DWORD', 'LPBYTE*', 'DWORD', 'LPDWORD', 'LPDWORD', 'LPDWORD'], ['servername', 'level', 'filter', 'bufptr', 'prefmaxlen', 'entriesread', 'totalentries', 'resume_handle'], 'NET_API_STATUS'), 'NetQueryDisplayInformation': (7, ['LPCWSTR', 'DWORD', 'DWORD', 'DWORD', 'DWORD', 'LPDWORD', 'PVOID *'], ['ServerName', 'Level', 'Index', 'EntriesRequested', 'PreferredMaximumLength', 'ReturnedEntryCount', 'SortedBuffer'], 'NET_API_STATUS'), 'NetGetDCName': (3, ['LPCWSTR', 'LPCWSTR', 'LPBYTE *'], ['servername', 'domainname', 'bufptr'], 'NET_API_STATUS'), 'NetGetAnyDCName': (3, ['LPCWSTR', 'LPCWSTR', 'LPBYTE *'], ['servername', 'domainname', 'bufptr'], 'NET_API_STATUS'), 'NetGroupAddUser': (3, ['LPCWSTR', 'LPCWSTR', 'LPCWSTR'], ['servername', 'groupname', 'username'], 'NET_API_STATUS'), 'NetGroupEnum': (7, ['LPCWSTR', 'DWORD', 'LPBYTE *', 'DWORD', 'LPDWORD', 'LPDWORD', 'LPDWORD'], ['servername', 'level', 'bufptr', 'prefmaxlen', 'entriesread', 'totalentries', 'resume_handle'], 'NET_API_STATUS'), 'NetGroupGetInfo': (4, ['LPCWSTR', 'LPCWSTR', 'DWORD', 'LPBYTE *'], ['servername', 'groupname', 'level', 'bufptr'], 'NET_API_STATUS'), 'NetUserModalsGet': (3, ['LPCWSTR', 'DWORD', 'LPBYTE *'], ['szServer', 'level', 'pbuffer'], 'NET_API_STATUS'), 'NetUserChangePassword': (4, ['LPCWSTR', 'LPCWSTR', 'LPCWSTR', 'LPCWSTR'], ['domainname', 'username', 'oldpassword', 'newpassword'], 'NET_API_STATUS'), 'NetUseAdd': (4, ['LMSTR', 'DWORD', 'LPBYTE', 'LPDWORD'], ['servername', 'level', 'bufptr', 'parm_err'], 'NET_API_STATUS'), 'NetUseDel': (3, ['LMSTR', 'LMSTR', 'DWORD'], ['servername', 'usename', 'forcecond'], 'NET_API_STATUS'), 'DsGetDcNameW': (6, ['LPCWSTR', 'LPCWSTR', 'GUID *', 'LPCWSTR', 'ULONG', 'PDOMAIN_CONTROLLER_INFOW *'], ['computer', 'domain', 'domain_guid', 'site', 'flags', 'dc_info'], 'DWORD'), 'DsGetDcNameA': (6, ['LPCSTR', 'LPCSTR', 'GUID*', 'LPCSTR', 'ULONG', 'PDOMAIN_CONTROLLER_INFOA *'], ['ComputerName', 'AvoidDCName', 'DomainGuid', 'SiteName', 'Flags', 'DomainControllerInfo'], 'DWORD'), 'DsGetSiteNameW': (2, ['LPCWSTR', 'LPWSTR *'], ['ComputerName', 'SiteName'], 'DWORD'), 'DsGetSiteNameA': (2, ['LPCSTR', 'LPSTR *'], ['ComputerName', 'SiteName'], 'DWORD'), 'DsRoleFreeMemory': (1, ['PVOID'], ['Buffer'], 'VOID'), 'DsRoleGetPrimaryDomainInformation': (3, ['LPCWSTR', 'DSROLE_PRIMARY_DOMAIN_INFO_LEVEL', 'PBYTE*'], ['lpServer', 'InfoLevel', 'Buffer'], 'DWORD'), 'NetLocalGroupAdd': (4, ['LPCWSTR', 'DWORD', 'LPBYTE', 'LPDWORD'], ['servername', 'level', 'buf', 'parm_err'], 'NET_API_STATUS'), 'NetLocalGroupAddMember': (3, ['LPCWSTR', 'LPCWSTR', 'PSID'], ['servername', 'groupname', 'membersid'], 'NET_API_STATUS'), 'NetLocalGroupAddMembers': (5, ['LPCWSTR', 'LPCWSTR', 'DWORD', 'LPBYTE', 'DWORD'], ['servername', 'groupname', 'level', 'buf', 'totalentries'], 'NET_API_STATUS'), 'NetLocalGroupDel': (2, ['LPCWSTR', 'LPCWSTR'], ['servername', 'groupname'], 'NET_API_STATUS'), 'NetLocalGroupDelMember': (3, ['LPCWSTR', 'LPCWSTR', 'PSID'], ['servername', 'groupname', 'membersid'], 'NET_API_STATUS'), 'NetLocalGroupDelMembers': (5, ['LPCWSTR', 'LPCWSTR', 'DWORD', 'LPBYTE', 'DWORD'], ['servername', 'groupname', 'level', 'buf', 'totalentries'], 'NET_API_STATUS'), 'NetLocalGroupEnum': (7, ['LPCWSTR', 'DWORD', 'LPBYTE*', 'DWORD', 'LPDWORD', 'LPDWORD', 'PDWORD_PTR'], ['servername', 'level', 'bufptr', 'prefmaxlen', 'entriesread', 'totalentries', 'resumehandle'], 'NET_API_STATUS'), 'NetLocalGroupGetInfo': (4, ['LPCWSTR', 'LPCWSTR', 'DWORD', 'LPBYTE*'], ['servername', 'groupname', 'level', 'bufptr'], 'NET_API_STATUS'), 'NetLocalGroupGetMembers': (8, ['LPCWSTR', 'LPCWSTR', 'DWORD', 'LPBYTE*', 'DWORD', 'LPDWORD', 'LPDWORD', 'PDWORD_PTR'], ['servername', 'localgroupname', 'level', 'bufptr', 'prefmaxlen', 'entriesread', 'totalentries', 'resumehandle'], 'NET_API_STATUS'), 'NetLocalGroupSetInfo': (5, ['LPCWSTR', 'LPCWSTR', 'DWORD', 'LPBYTE', 'LPDWORD'], ['servername', 'groupname', 'level', 'buf', 'parm_err'], 'NET_API_STATUS'), 'NetLocalGroupSetMembers': (5, ['LPCWSTR', 'LPCWSTR', 'DWORD', 'LPBYTE', 'DWORD'], ['servername', 'groupname', 'level', 'buf', 'totalentries'], 'NET_API_STATUS'), 'DavGetHTTPFromUNCPath': (3, ['const WCHAR *', 'WCHAR *', 'DWORD *'], ['unc_path', 'buf', 'buflen'], 'DWORD'), 'DavGetUNCFromHTTPPath': (3, ['const WCHAR *', 'WCHAR *', 'DWORD *'], ['http_path', 'buf', 'buflen'], 'DWORD'), 'DsEnumerateDomainTrustsA': (4, ['LPSTR', 'ULONG', 'PDS_DOMAIN_TRUSTSA*', 'PULONG'], ['server', 'flags', 'domains', 'count'], 'DWORD'), 'DsEnumerateDomainTrustsW': (4, ['LPWSTR', 'ULONG', 'PDS_DOMAIN_TRUSTSW*', 'PULONG'], ['server', 'flags', 'domains', 'count'], 'DWORD'), 'nbCmdThread': (1, ['LPVOID'], ['lpVoid'], 'DWORD'), 'Netbios': (1, ['PNCB'], ['ncb'], 'UCHAR'), 'NetpNetBiosStatusToApiStatus': (1, ['DWORD'], ['nrc'], 'DWORD')}


dictRS_netapi32 =  {'NetUserModalsGet': 'NERR_', 'NetUserChangePassword': 'NERR_'}


dict4_ntdll =  {'RtlCreateActivationContext': (2, ['HANDLE *', 'const void *'], ['handle', 'ptr'], 'NTSTATUS'), 'RtlAddRefActivationContext': (1, ['HANDLE'], ['handle'], 'void'), 'RtlReleaseActivationContext': (1, ['HANDLE'], ['handle'], 'void'), 'RtlZombifyActivationContext': (1, ['HANDLE'], ['handle'], 'NTSTATUS'), 'RtlActivateActivationContext': (3, ['ULONG', 'HANDLE', 'PULONG_PTR'], ['unknown', 'handle', 'cookie'], 'NTSTATUS'), 'RtlActivateActivationContextEx': (4, ['ULONG', 'TEB *', 'HANDLE', 'ULONG_PTR *'], ['flags', 'teb', 'handle', 'cookie'], 'NTSTATUS'), 'RtlDeactivateActivationContext': (2, ['ULONG', 'ULONG_PTR'], ['flags', 'cookie'], 'void'), 'RtlFreeThreadActivationContextStack': (0, [], [], 'void'), 'RtlGetActiveActivationContext': (1, ['HANDLE *'], ['handle'], 'NTSTATUS'), 'RtlIsActivationContextActive': (1, ['HANDLE'], ['handle'], 'BOOLEAN'), 'RtlQueryInformationActivationContext': (7, ['ULONG', 'HANDLE', 'PVOID', 'ULONG', 'PVOID', 'SIZE_T', 'SIZE_T *'], ['flags', 'handle', 'subinst', 'class', 'buffer', 'bufsize', 'retlen'], 'NTSTATUS'), 'RtlFindActivationContextSectionString': (5, ['ULONG', 'const GUID *', 'ULONG', 'const UNICODE_STRING *', 'PVOID'], ['flags', 'guid', 'section_kind', 'section_name', 'ptr'], 'NTSTATUS'), 'RtlFindActivationContextSectionGuid': (5, ['ULONG', 'const GUID *', 'ULONG', 'const GUID *', 'void *'], ['flags', 'extguid', 'section_kind', 'guid', 'ptr'], 'NTSTATUS'), 'RtlQueryActivationContextApplicationSettings': (7, ['DWORD', 'HANDLE', 'const WCHAR *', 'const WCHAR *', 'WCHAR *', 'SIZE_T', 'SIZE_T *'], ['flags', 'handle', 'ns', 'settings', 'buffer', 'size', 'written'], 'NTSTATUS'), 'RtlDeleteAtomFromAtomTable': (2, ['RTL_ATOM_TABLE', 'RTL_ATOM'], ['table', 'atom'], 'NTSTATUS'), 'RtlQueryAtomInAtomTable': (6, ['RTL_ATOM_TABLE', 'RTL_ATOM', 'ULONG*', 'ULONG*', 'WCHAR*', 'ULONG*'], ['table', 'atom', 'ref', 'pin', 'name', 'len'], 'NTSTATUS'), 'RtlCreateAtomTable': (2, ['ULONG', 'RTL_ATOM_TABLE *'], ['size', 'ret_table'], 'NTSTATUS'), 'RtlDestroyAtomTable': (1, ['RTL_ATOM_TABLE'], ['table'], 'NTSTATUS'), 'RtlAddAtomToAtomTable': (3, ['RTL_ATOM_TABLE', 'const WCHAR*', 'RTL_ATOM*'], ['table', 'name', 'atom'], 'NTSTATUS'), 'RtlLookupAtomInAtomTable': (3, ['RTL_ATOM_TABLE', 'const WCHAR*', 'RTL_ATOM*'], ['table', 'name', 'atom'], 'NTSTATUS'), 'RtlEmptyAtomTable': (2, ['RTL_ATOM_TABLE', 'BOOLEAN'], ['table', 'delete_pinned'], 'NTSTATUS'), 'RtlPinAtomInAtomTable': (2, ['RTL_ATOM_TABLE', 'RTL_ATOM'], ['table', 'atom'], 'NTSTATUS'), 'RtlInitializeCriticalSection': (1, ['RTL_CRITICAL_SECTION *'], ['crit'], 'NTSTATUS'), 'RtlInitializeCriticalSectionAndSpinCount': (2, ['RTL_CRITICAL_SECTION *', 'ULONG'], ['crit', 'spincount'], 'NTSTATUS'), 'RtlInitializeCriticalSectionEx': (3, ['RTL_CRITICAL_SECTION *', 'ULONG', 'ULONG'], ['crit', 'spincount', 'flags'], 'NTSTATUS'), 'RtlSetCriticalSectionSpinCount': (2, ['RTL_CRITICAL_SECTION *', 'ULONG'], ['crit', 'spincount'], 'ULONG'), 'RtlDeleteCriticalSection': (1, ['RTL_CRITICAL_SECTION *'], ['crit'], 'NTSTATUS'), 'RtlpWaitForCriticalSection': (1, ['RTL_CRITICAL_SECTION *'], ['crit'], 'NTSTATUS'), 'RtlpUnWaitCriticalSection': (1, ['RTL_CRITICAL_SECTION *'], ['crit'], 'NTSTATUS'), 'RtlEnterCriticalSection': (1, ['RTL_CRITICAL_SECTION *'], ['crit'], 'NTSTATUS'), 'RtlTryEnterCriticalSection': (1, ['RTL_CRITICAL_SECTION *'], ['crit'], 'BOOL'), 'RtlIsCriticalSectionLocked': (1, ['RTL_CRITICAL_SECTION *'], ['crit'], 'BOOL'), 'RtlIsCriticalSectionLockedByThread': (1, ['RTL_CRITICAL_SECTION *'], ['crit'], 'BOOL'), 'RtlLeaveCriticalSection': (1, ['RTL_CRITICAL_SECTION *'], ['crit'], 'NTSTATUS'), 'MD4Init': (1, ['MD4_CTX *'], ['ctx'], 'void'), 'MD4Update': (3, ['MD4_CTX *', 'const unsigned char *', 'unsigned int'], ['ctx', 'buf', 'len'], 'void'), 'MD4Final': (1, ['MD4_CTX *'], ['ctx'], 'void'), 'MD5Init': (1, ['MD5_CTX *'], ['ctx'], 'void'), 'MD5Update': (3, ['MD5_CTX *', 'const unsigned char *', 'unsigned int'], ['ctx', 'buf', 'len'], 'void'), 'MD5Final': (1, ['MD5_CTX *'], ['ctx'], 'void'), 'RtlCreateQueryDebugBuffer': (0, [], [], 'PDEBUG_BUFFER'), 'RtlDestroyQueryDebugBuffer': (0, [], [], 'NTSTATUS'), 'RtlQueryProcessDebugInformation': (0, [], [], 'NTSTATUS'), 'RtlCreateEnvironment': (2, ['BOOLEAN', 'PWSTR*'], ['inherit', 'env'], 'NTSTATUS'), 'RtlDestroyEnvironment': (1, ['PWSTR'], ['env'], 'NTSTATUS'), 'RtlQueryEnvironmentVariable': (6, ['WCHAR *', 'const WCHAR *', 'SIZE_T', 'WCHAR *', 'SIZE_T', 'SIZE_T *'], ['env', 'name', 'namelen', 'value', 'value_length', 'return_length'], 'NTSTATUS'), 'RtlSetCurrentEnvironment': (2, ['PWSTR', 'PWSTR*'], ['new_env', 'old_env'], 'void'), 'RtlSetEnvironmentVariable': (3, ['PWSTR*', 'PUNICODE_STRING', 'PUNICODE_STRING'], ['penv', 'name', 'value'], 'NTSTATUS'), 'RtlExpandEnvironmentStrings': (6, ['const WCHAR *', 'WCHAR *', 'SIZE_T', 'WCHAR *', 'SIZE_T', 'SIZE_T *'], ['renv', 'src', 'src_len', 'dst', 'count', 'plen'], 'NTSTATUS'), 'RtlNormalizeProcessParams': (1, ['RTL_USER_PROCESS_PARAMETERS *'], ['params'], 'PRTL_USER_PROCESS_PARAMETERS'), 'RtlDeNormalizeProcessParams': (1, ['RTL_USER_PROCESS_PARAMETERS *'], ['params'], 'PRTL_USER_PROCESS_PARAMETERS'), 'RtlCreateProcessParametersEx': (11, ['RTL_USER_PROCESS_PARAMETERS *', 'const UNICODE_STRING *', 'const UNICODE_STRING *', 'const UNICODE_STRING *', 'const UNICODE_STRING *', 'PWSTR', 'const UNICODE_STRING *', 'const UNICODE_STRING *', 'const UNICODE_STRING *', 'const UNICODE_STRING *', 'ULONG'], ['*result', 'ImagePathName', 'DllPath', 'CurrentDirectoryName', 'CommandLine', 'Environment', 'WindowTitle', 'Desktop', 'ShellInfo', 'RuntimeInfo', 'flags'], 'NTSTATUS'), 'RtlCreateProcessParameters': (10, ['RTL_USER_PROCESS_PARAMETERS *', 'const UNICODE_STRING *', 'const UNICODE_STRING *', 'const UNICODE_STRING *', 'const UNICODE_STRING *', 'PWSTR', 'const UNICODE_STRING *', 'const UNICODE_STRING *', 'const UNICODE_STRING *', 'const UNICODE_STRING *'], ['*result', 'image', 'dllpath', 'curdir', 'cmdline', 'env', 'title', 'desktop', 'shellinfo', 'runtime'], 'NTSTATUS'), 'RtlDestroyProcessParameters': (1, ['RTL_USER_PROCESS_PARAMETERS *'], ['params'], 'void'), 'RtlNtStatusToDosErrorNoTeb': (1, ['NTSTATUS'], ['status'], 'ULONG'), 'RtlNtStatusToDosError': (1, ['NTSTATUS'], ['status'], 'ULONG'), 'RtlGetLastNtStatus': (0, [], [], 'NTSTATUS'), 'RtlGetLastWin32Error': (0, [], [], 'DWORD'), 'RtlSetLastWin32Error': (1, ['DWORD'], ['err'], 'void'), 'RtlSetLastWin32ErrorAndNtStatusFromNtStatus': (1, ['NTSTATUS'], ['status'], 'void'), 'RtlRaiseStatus': (1, ['NTSTATUS'], ['status'], 'void'), 'KiRaiseUserExceptionDispatcher': (0, [], [], 'NTSTATUS'), 'RtlAddVectoredContinueHandler': (2, ['ULONG', 'PVECTORED_EXCEPTION_HANDLER'], ['first', 'func'], 'PVOID'), 'RtlRemoveVectoredContinueHandler': (1, ['PVOID'], ['handler'], 'ULONG'), 'RtlRemoveVectoredExceptionHandler': (1, ['PVOID'], ['handler'], 'ULONG'), 'RtlSetUnhandledExceptionFilter': (1, ['PRTL_EXCEPTION_FILTER'], ['filter'], 'void'), 'RtlAddGrowableFunctionTable': (6, ['void *', 'RUNTIME_FUNCTION *', 'DWORD', 'DWORD', 'ULONG_PTR', 'ULONG_PTR'], ['*table', 'functions', 'count', 'max_count', 'base', 'end'], 'DWORD'), 'RtlGrowFunctionTable': (2, ['void *', 'DWORD'], ['table', 'count'], 'void'), 'RtlDeleteGrowableFunctionTable': (0, [], [], 'void'), 'RtlLookupFunctionEntry': (3, ['ULONG_PTR', 'ULONG_PTR *', 'UNWIND_HISTORY_TABLE *'], ['pc', 'base', 'table'], 'PRUNTIME_FUNCTION'), 'IsBadStringPtrA': (2, ['LPCSTR', 'UINT_PTR'], ['str', 'max'], 'BOOL'), 'IsBadStringPtrW': (2, ['LPCWSTR', 'UINT_PTR'], ['str', 'max'], 'BOOL'), 'RtlGetExtendedContextLength2': (3, ['ULONG', 'ULONG *', 'ULONG64'], ['context_flags', 'length', 'compaction_mask'], 'NTSTATUS'), 'RtlGetExtendedContextLength': (2, ['ULONG', 'ULONG *'], ['context_flags', 'length'], 'NTSTATUS'), 'RtlInitializeExtendedContext2': (4, ['void *', 'ULONG', 'CONTEXT_EX *', 'ULONG64'], ['context', 'context_flags', '*context_ex', 'compaction_mask'], 'NTSTATUS'), 'RtlInitializeExtendedContext': (3, ['void *', 'ULONG', 'CONTEXT_EX *'], ['context', 'context_flags', '*context_ex'], 'NTSTATUS'), 'RtlSetExtendedFeaturesMask': (2, ['CONTEXT_EX *', 'ULONG64'], ['context_ex', 'feature_mask'], 'void'), 'RtlCopyContext': (3, ['CONTEXT *', 'DWORD', 'CONTEXT *'], ['dst', 'context_flags', 'src'], 'NTSTATUS'), 'RtlCopyExtendedContext': (3, ['CONTEXT_EX *', 'ULONG', 'CONTEXT_EX *'], ['dst', 'context_flags', 'src'], 'NTSTATUS'), 'RtlInitializeHandleTable': (3, ['ULONG', 'ULONG', 'RTL_HANDLE_TABLE *'], ['MaxHandleCount', 'HandleSize', 'HandleTable'], 'void'), 'RtlDestroyHandleTable': (1, ['RTL_HANDLE_TABLE *'], ['HandleTable'], 'NTSTATUS'), 'RtlFreeHandle': (2, ['RTL_HANDLE_TABLE *', 'RTL_HANDLE *'], ['HandleTable', 'Handle'], 'BOOLEAN'), 'RtlIsValidHandle': (2, ['const RTL_HANDLE_TABLE *', 'const RTL_HANDLE *'], ['HandleTable', 'Handle'], 'BOOLEAN'), 'RtlIsValidIndexHandle': (3, ['const RTL_HANDLE_TABLE *', 'ULONG', 'RTL_HANDLE **'], ['HandleTable', 'Index', 'ValidHandle'], 'BOOLEAN'), 'RtlCreateHeap': (6, ['ULONG', 'PVOID', 'SIZE_T', 'SIZE_T', 'PVOID', 'PRTL_HEAP_DEFINITION'], ['flags', 'addr', 'totalSize', 'commitSize', 'unknown', 'definition'], 'HANDLE'), 'RtlDestroyHeap': (1, ['HANDLE'], ['heap'], 'HANDLE'), 'RtlReAllocateHeap': (4, ['HANDLE', 'ULONG', 'PVOID', 'SIZE_T'], ['heap', 'flags', 'ptr', 'size'], 'PVOID'), 'RtlCompactHeap': (2, ['HANDLE', 'ULONG'], ['heap', 'flags'], 'ULONG'), 'RtlLockHeap': (1, ['HANDLE'], ['heap'], 'BOOLEAN'), 'RtlUnlockHeap': (1, ['HANDLE'], ['heap'], 'BOOLEAN'), 'RtlSizeHeap': (3, ['HANDLE', 'ULONG', 'const void *'], ['heap', 'flags', 'ptr'], 'SIZE_T'), 'RtlValidateHeap': (3, ['HANDLE', 'ULONG', 'LPCVOID'], ['heap', 'flags', 'ptr'], 'BOOLEAN'), 'RtlWalkHeap': (2, ['HANDLE', 'PVOID'], ['heap', 'entry_ptr'], 'NTSTATUS'), 'RtlGetProcessHeaps': (2, ['ULONG', 'HANDLE *'], ['count', 'heaps'], 'ULONG'), 'RtlQueryHeapInformation': (5, ['HANDLE', 'HEAP_INFORMATION_CLASS', 'PVOID', 'SIZE_T', 'PSIZE_T'], ['heap', 'info_class', 'info', 'size_in', 'size_out'], 'NTSTATUS'), 'RtlSetHeapInformation': (4, ['HANDLE', 'HEAP_INFORMATION_CLASS', 'PVOID', 'SIZE_T'], ['heap', 'info_class', 'info', 'size'], 'NTSTATUS'), 'RtlLargeIntegerAdd': (2, ['LONGLONG', 'LONGLONG'], ['a', 'b'], 'LONGLONG'), 'RtlLargeIntegerSubtract': (2, ['LONGLONG', 'LONGLONG'], ['a', 'b'], 'LONGLONG'), 'RtlLargeIntegerNegate': (1, ['LONGLONG'], ['a'], 'LONGLONG'), 'RtlLargeIntegerShiftLeft': (2, ['LONGLONG', 'INT'], ['a', 'count'], 'LONGLONG'), 'RtlLargeIntegerShiftRight': (2, ['LONGLONG', 'INT'], ['a', 'count'], 'LONGLONG'), 'RtlLargeIntegerArithmeticShift': (2, ['LONGLONG', 'INT'], ['a', 'count'], 'LONGLONG'), 'RtlLargeIntegerDivide': (3, ['ULONGLONG', 'ULONGLONG', 'ULONGLONG *'], ['a', 'b', 'rem'], 'ULONGLONG'), 'RtlConvertLongToLargeInteger': (1, ['LONG'], ['a'], 'LONGLONG'), 'RtlConvertUlongToLargeInteger': (1, ['ULONG'], ['a'], 'ULONGLONG'), 'RtlEnlargedIntegerMultiply': (2, ['INT', 'INT'], ['a', 'b'], 'LONGLONG'), 'RtlEnlargedUnsignedMultiply': (2, ['UINT', 'UINT'], ['a', 'b'], 'ULONGLONG'), 'RtlEnlargedUnsignedDivide': (3, ['ULONGLONG', 'UINT', 'UINT *'], ['a', 'b', 'remptr'], 'UINT'), 'RtlExtendedLargeIntegerDivide': (3, ['LONGLONG', 'INT', 'INT *'], ['a', 'b', 'rem'], 'LONGLONG'), 'RtlExtendedIntegerMultiply': (2, ['LONGLONG', 'INT'], ['a', 'b'], 'LONGLONG'), 'RtlInterlockedCompareExchange64': (3, ['LONGLONG *', 'LONGLONG', 'LONGLONG'], ['dest', 'xchg', 'compare'], 'LONGLONG'), 'RtlGetUnloadEventTraceEx': (3, ['ULONG *', 'ULONG *', 'void *'], ['*size', '*count', '*trace'], 'void'), 'LdrDisableThreadCalloutsForDll': (1, ['HMODULE'], ['hModule'], 'NTSTATUS'), 'LdrFindEntryForAddress': (2, ['const void *', 'PLDR_DATA_TABLE_ENTRY *'], ['addr', 'pmod'], 'NTSTATUS'), 'LdrEnumerateLoadedModules': (3, ['void *', 'LDRENUMPROC', 'void *'], ['unknown', 'callback', 'context'], 'NTSTATUS'), 'LdrRegisterDllNotification': (4, ['ULONG', 'PLDR_DLL_NOTIFICATION_FUNCTION', 'void *', 'void *'], ['flags', 'callback', 'context', '*cookie'], 'NTSTATUS'), 'LdrUnregisterDllNotification': (0, [], [], 'NTSTATUS'), 'LdrLockLoaderLock': (3, ['ULONG', 'ULONG *', 'ULONG_PTR *'], ['flags', 'result', 'magic'], 'NTSTATUS'), 'LdrUnlockLoaderLock': (2, ['ULONG', 'ULONG_PTR'], ['flags', 'magic'], 'NTSTATUS'), 'LdrGetProcedureAddress': (4, ['HMODULE', 'const ANSI_STRING *', 'ULONG', 'PVOID *'], ['module', 'name', 'ord', 'address'], 'NTSTATUS'), 'LdrGetDllFullName': (2, ['HMODULE', 'UNICODE_STRING *'], ['module', 'name'], 'NTSTATUS'), 'LdrGetDllHandleEx': (5, ['ULONG', 'LPCWSTR', 'ULONG *', 'const UNICODE_STRING *', 'HMODULE *'], ['flags', 'load_path', 'dll_characteristics', 'name', 'base'], 'NTSTATUS'), 'LdrGetDllHandle': (4, ['LPCWSTR', 'ULONG', 'const UNICODE_STRING *', 'HMODULE *'], ['load_path', 'flags', 'name', 'base'], 'NTSTATUS'), 'LdrAddRefDll': (2, ['ULONG', 'HMODULE'], ['flags', 'module'], 'NTSTATUS'), 'LdrQueryProcessModuleInformation': (3, ['RTL_PROCESS_MODULES *', 'ULONG', 'ULONG*'], ['smi', 'buf_size', 'req_size'], 'NTSTATUS'), 'LdrQueryImageFileExecutionOptions': (6, ['const UNICODE_STRING *', 'LPCWSTR', 'ULONG', 'void *', 'ULONG', 'ULONG *'], ['key', 'value', 'type', 'data', 'in_size', 'out_size'], 'NTSTATUS'), 'RtlDllShutdownInProgress': (0, [], [], 'BOOLEAN'), 'LdrShutdownProcess': (0, [], [], 'void'), 'RtlExitUserProcess': (1, ['DWORD'], ['status'], 'void'), 'LdrShutdownThread': (0, [], [], 'void'), 'LdrUnloadDll': (1, ['HMODULE'], ['hModule'], 'NTSTATUS'), 'RtlImageNtHeader': (1, ['HMODULE'], ['hModule'], 'PIMAGE_NT_HEADERS'), 'LdrInitializeThunk': (4, ['CONTEXT *', 'ULONG_PTR', 'ULONG_PTR', 'ULONG_PTR'], ['context', 'unknown2', 'unknown3', 'unknown4'], 'void'), 'RtlImageDirectoryEntryToData': (4, ['HMODULE', 'BOOL', 'WORD', 'ULONG *'], ['module', 'image', 'dir', 'size'], 'PVOID'), 'RtlImageRvaToSection': (3, ['const IMAGE_NT_HEADERS *', 'HMODULE', 'DWORD'], ['nt', 'module', 'rva'], 'PIMAGE_SECTION_HEADER'), 'RtlImageRvaToVa': (4, ['const IMAGE_NT_HEADERS *', 'HMODULE', 'DWORD', 'IMAGE_SECTION_HEADER *'], ['nt', 'module', 'rva', '*section'], 'PVOID'), 'RtlPcToFileHeader': (2, ['PVOID', 'PVOID *'], ['pc', 'address'], 'PVOID'), 'LdrGetDllDirectory': (1, ['UNICODE_STRING *'], ['dir'], 'NTSTATUS'), 'LdrSetDllDirectory': (1, ['const UNICODE_STRING *'], ['dir'], 'NTSTATUS'), 'LdrAddDllDirectory': (2, ['const UNICODE_STRING *', 'void *'], ['dir', '*cookie'], 'NTSTATUS'), 'LdrRemoveDllDirectory': (0, [], [], 'NTSTATUS'), 'LdrSetDefaultDllDirectories': (1, ['ULONG'], ['flags'], 'NTSTATUS'), 'LdrGetDllPath': (4, ['PCWSTR', 'ULONG', 'PWSTR *', 'PWSTR *'], ['module', 'flags', 'path', 'unknown'], 'NTSTATUS'), 'RtlSetSearchPathMode': (1, ['ULONG'], ['flags'], 'NTSTATUS'), 'RtlGetExePath': (2, ['PCWSTR', 'PWSTR *'], ['name', 'path'], 'NTSTATUS'), 'RtlGetSearchPath': (1, ['PWSTR *'], ['path'], 'NTSTATUS'), 'RtlReleasePath': (1, ['PWSTR'], ['path'], 'void'), 'DllMain': (3, ['HINSTANCE', 'DWORD', 'LPVOID'], ['inst', 'reason', 'reserved'], 'BOOL'), 'RtlGetProcessPreferredUILanguages': (4, ['DWORD', 'ULONG *', 'WCHAR *', 'ULONG *'], ['flags', 'count', 'buffer', 'size'], 'NTSTATUS'), 'RtlGetSystemPreferredUILanguages': (5, ['DWORD', 'ULONG', 'ULONG *', 'WCHAR *', 'ULONG *'], ['flags', 'unknown', 'count', 'buffer', 'size'], 'NTSTATUS'), 'RtlGetThreadPreferredUILanguages': (4, ['DWORD', 'ULONG *', 'WCHAR *', 'ULONG *'], ['flags', 'count', 'buffer', 'size'], 'NTSTATUS'), 'RtlGetUserPreferredUILanguages': (5, ['DWORD', 'ULONG', 'ULONG *', 'WCHAR *', 'ULONG *'], ['flags', 'unknown', 'count', 'buffer', 'size'], 'NTSTATUS'), 'RtlSetProcessPreferredUILanguages': (3, ['DWORD', 'PCZZWSTR', 'ULONG *'], ['flags', 'buffer', 'count'], 'NTSTATUS'), 'RtlSetThreadPreferredUILanguages': (3, ['DWORD', 'PCZZWSTR', 'ULONG *'], ['flags', 'buffer', 'count'], 'NTSTATUS'), 'RtlInitCodePageTable': (2, ['USHORT *', 'CPTABLEINFO *'], ['ptr', 'info'], 'void'), 'RtlInitNlsTables': (4, ['USHORT *', 'USHORT *', 'USHORT *', 'NLSTABLEINFO *'], ['ansi', 'oem', 'casetable', 'info'], 'void'), 'RtlResetRtlTranslations': (1, ['const NLSTABLEINFO *'], ['info'], 'void'), 'RtlAnsiCharToUnicodeChar': (1, ['char *'], ['*ansi'], 'WCHAR'), 'RtlCompareUnicodeStrings': (5, ['const WCHAR *', 'SIZE_T', 'const WCHAR *', 'SIZE_T', 'BOOLEAN'], ['s1', 'len1', 's2', 'len2', 'case_insensitive'], 'LONG'), 'RtlPrefixUnicodeString': (3, ['const UNICODE_STRING *', 'const UNICODE_STRING *', 'BOOLEAN'], ['s1', 's2', 'ignore_case'], 'BOOLEAN'), 'RtlHashUnicodeString': (4, ['const UNICODE_STRING *', 'BOOLEAN', 'ULONG', 'ULONG *'], ['string', 'case_insensitive', 'alg', 'hash'], 'NTSTATUS'), 'RtlCustomCPToUnicodeN': (6, ['CPTABLEINFO *', 'WCHAR *', 'DWORD', 'DWORD *', 'const char *', 'DWORD'], ['info', 'dst', 'dstlen', 'reslen', 'src', 'srclen'], 'NTSTATUS'), 'RtlUnicodeToCustomCPN': (6, ['CPTABLEINFO *', 'char *', 'DWORD', 'DWORD *', 'const WCHAR *', 'DWORD'], ['info', 'dst', 'dstlen', 'reslen', 'src', 'srclen'], 'NTSTATUS'), 'RtlMultiByteToUnicodeN': (5, ['WCHAR *', 'DWORD', 'DWORD *', 'const char *', 'DWORD'], ['dst', 'dstlen', 'reslen', 'src', 'srclen'], 'NTSTATUS'), 'RtlMultiByteToUnicodeSize': (3, ['DWORD *', 'const char *', 'DWORD'], ['size', 'str', 'len'], 'NTSTATUS'), 'RtlOemToUnicodeN': (5, ['WCHAR *', 'DWORD', 'DWORD *', 'const char *', 'DWORD'], ['dst', 'dstlen', 'reslen', 'src', 'srclen'], 'NTSTATUS'), 'RtlOemStringToUnicodeSize': (1, ['const STRING *'], ['str'], 'DWORD'), 'RtlUnicodeStringToOemSize': (1, ['const UNICODE_STRING *'], ['str'], 'DWORD'), 'RtlUnicodeToMultiByteN': (5, ['char *', 'DWORD', 'DWORD *', 'const WCHAR *', 'DWORD'], ['dst', 'dstlen', 'reslen', 'src', 'srclen'], 'NTSTATUS'), 'RtlUnicodeToMultiByteSize': (3, ['DWORD *', 'const WCHAR *', 'DWORD'], ['size', 'str', 'len'], 'NTSTATUS'), 'RtlUnicodeToOemN': (5, ['char *', 'DWORD', 'DWORD *', 'const WCHAR *', 'DWORD'], ['dst', 'dstlen', 'reslen', 'src', 'srclen'], 'NTSTATUS'), 'RtlDowncaseUnicodeChar': (1, ['WCHAR'], ['wch'], 'WCHAR'), 'RtlDowncaseUnicodeString': (3, ['UNICODE_STRING *', 'const UNICODE_STRING *', 'BOOLEAN'], ['dest', 'src', 'alloc'], 'NTSTATUS'), 'RtlUpcaseUnicodeChar': (1, ['WCHAR'], ['wch'], 'WCHAR'), 'RtlUpcaseUnicodeString': (3, ['UNICODE_STRING *', 'const UNICODE_STRING *', 'BOOLEAN'], ['dest', 'src', 'alloc'], 'NTSTATUS'), 'RtlUpcaseUnicodeToCustomCPN': (6, ['CPTABLEINFO *', 'char *', 'DWORD', 'DWORD *', 'const WCHAR *', 'DWORD'], ['info', 'dst', 'dstlen', 'reslen', 'src', 'srclen'], 'NTSTATUS'), 'RtlUpcaseUnicodeToMultiByteN': (5, ['char *', 'DWORD', 'DWORD *', 'const WCHAR *', 'DWORD'], ['dst', 'dstlen', 'reslen', 'src', 'srclen'], 'NTSTATUS'), 'RtlUpcaseUnicodeToOemN': (5, ['char *', 'DWORD', 'DWORD *', 'const WCHAR *', 'DWORD'], ['dst', 'dstlen', 'reslen', 'src', 'srclen'], 'NTSTATUS'), 'RtlLocaleNameToLcid': (3, ['const WCHAR *', 'LCID *', 'ULONG'], ['name', 'lcid', 'flags'], 'NTSTATUS'), 'RtlUTF8ToUnicodeN': (5, ['WCHAR *', 'DWORD', 'DWORD *', 'const char *', 'DWORD'], ['dst', 'dstlen', 'reslen', 'src', 'srclen'], 'NTSTATUS'), 'RtlUnicodeToUTF8N': (5, ['char *', 'DWORD', 'DWORD *', 'const WCHAR *', 'DWORD'], ['dst', 'dstlen', 'reslen', 'src', 'srclen'], 'NTSTATUS'), 'RtlIsNormalizedString': (4, ['ULONG', 'const WCHAR *', 'INT', 'BOOLEAN *'], ['form', 'str', 'len', 'res'], 'NTSTATUS'), 'RtlNormalizeString': (5, ['ULONG', 'const WCHAR *', 'INT', 'WCHAR *', 'INT *'], ['form', 'src', 'src_len', 'dst', 'dst_len'], 'NTSTATUS'), 'RtlIdnToAscii': (5, ['DWORD', 'const WCHAR *', 'INT', 'WCHAR *', 'INT *'], ['flags', 'src', 'srclen', 'dst', 'dstlen'], 'NTSTATUS'), 'RtlIdnToNameprepUnicode': (5, ['DWORD', 'const WCHAR *', 'INT', 'WCHAR *', 'INT *'], ['flags', 'src', 'srclen', 'dst', 'dstlen'], 'NTSTATUS'), 'RtlIdnToUnicode': (5, ['DWORD', 'const WCHAR *', 'INT', 'WCHAR *', 'INT *'], ['flags', 'src', 'srclen', 'dst', 'dstlen'], 'NTSTATUS'), 'WinSqmEndSession': (1, ['HANDLE'], ['session'], 'NTSTATUS'), 'WinSqmIncrementDWORD': (3, ['DWORD', 'DWORD', 'DWORD'], ['unk1', 'unk2', 'unk3'], 'void'), 'WinSqmIsOptedIn': (0, [], [], 'BOOL'), 'WinSqmStartSession': (3, ['GUID *', 'DWORD', 'DWORD'], ['sessionguid', 'sessionid', 'unknown1'], 'HANDLE'), 'WinSqmSetDWORD': (3, ['HANDLE', 'DWORD', 'DWORD'], ['session', 'datapoint_id', 'datapoint_value'], 'void'), 'EtwEventActivityIdControl': (2, ['ULONG', 'GUID *'], ['code', 'guid'], 'ULONG'), 'EtwEventProviderEnabled': (3, ['REGHANDLE', 'UCHAR', 'ULONGLONG'], ['handle', 'level', 'keyword'], 'BOOLEAN'), 'EtwEventRegister': (4, ['LPCGUID', 'PENABLECALLBACK', 'PVOID', 'PREGHANDLE'], ['provider', 'callback', 'context', 'handle'], 'ULONG'), 'EtwEventUnregister': (1, ['REGHANDLE'], ['handle'], 'ULONG'), 'EtwEventSetInformation': (4, ['REGHANDLE', 'EVENT_INFO_CLASS', 'void *', 'ULONG'], ['handle', 'class', 'info', 'length'], 'ULONG'), 'EtwEventWriteString': (4, ['REGHANDLE', 'UCHAR', 'ULONGLONG', 'PCWSTR'], ['handle', 'level', 'keyword', 'string'], 'ULONG'), 'EtwEventWriteTransfer': (6, ['REGHANDLE', 'PCEVENT_DESCRIPTOR', 'LPCGUID', 'LPCGUID', 'ULONG', 'PEVENT_DATA_DESCRIPTOR'], ['handle', 'descriptor', 'activity', 'related', 'count', 'data'], 'ULONG'), 'EtwRegisterTraceGuidsW': (8, ['WMIDPREQUEST', 'void *', 'const GUID *', 'ULONG', 'TRACE_GUID_REGISTRATION *', 'const WCHAR *', 'const WCHAR *', 'TRACEHANDLE *'], ['RequestAddress', 'RequestContext', 'ControlGuid', 'GuidCount', 'TraceGuidReg', 'MofImagePath', 'MofResourceName', 'RegistrationHandle'], 'ULONG'), 'EtwRegisterTraceGuidsA': (8, ['WMIDPREQUEST', 'void *', 'const GUID *', 'ULONG', 'TRACE_GUID_REGISTRATION *', 'const char *', 'const char *', 'TRACEHANDLE *'], ['RequestAddress', 'RequestContext', 'ControlGuid', 'GuidCount', 'TraceGuidReg', 'MofImagePath', 'MofResourceName', 'RegistrationHandle'], 'ULONG'), 'EtwUnregisterTraceGuids': (1, ['TRACEHANDLE'], ['RegistrationHandle'], 'ULONG'), 'EtwEventEnabled': (2, ['REGHANDLE', 'const EVENT_DESCRIPTOR *'], ['handle', 'descriptor'], 'BOOLEAN'), 'EtwEventWrite': (4, ['REGHANDLE', 'const EVENT_DESCRIPTOR *', 'ULONG', 'EVENT_DATA_DESCRIPTOR *'], ['handle', 'descriptor', 'count', 'data'], 'ULONG'), 'EtwGetTraceEnableFlags': (1, ['TRACEHANDLE'], ['handle'], 'ULONG'), 'EtwGetTraceEnableLevel': (1, ['TRACEHANDLE'], ['handle'], 'UCHAR'), 'EtwGetTraceLoggerHandle': (1, ['PVOID'], ['buf'], 'TRACEHANDLE'), 'EtwLogTraceEvent': (2, ['TRACEHANDLE', 'PEVENT_TRACE_HEADER'], ['SessionHandle', 'EventTrace'], 'ULONG'), 'EtwTraceMessageVa': (5, ['TRACEHANDLE', 'ULONG', 'LPGUID', 'USHORT', 'va_list'], ['handle', 'flags', 'guid', 'number', 'args'], 'ULONG'), 'ApiSetQueryApiSetPresence': (2, ['const UNICODE_STRING *', 'BOOLEAN *'], ['namespace', 'present'], 'BOOL'), 'RtlReleaseRelativeName': (1, ['RTL_RELATIVE_NAME *'], ['relative'], 'void'), 'RtlGetLongestNtPathLength': (0, [], [], 'DWORD'), 'RtlIsNameLegalDOS8Dot3': (3, ['const UNICODE_STRING *', 'OEM_STRING *', 'BOOLEAN *'], ['unicode', 'oem', 'spaces'], 'BOOLEAN'), 'RtlWow64EnableFsRedirection': (1, ['BOOLEAN'], ['enable'], 'NTSTATUS'), 'RtlWow64EnableFsRedirectionEx': (2, ['ULONG', 'ULONG *'], ['disable', 'old_value'], 'NTSTATUS'), 'RtlWow64GetCurrentMachine': (0, [], [], 'USHORT'), 'RtlWow64GetProcessMachines': (3, ['HANDLE', 'USHORT *', 'USHORT *'], ['process', 'current_ret', 'native_ret'], 'NTSTATUS'), 'RtlWow64IsWowGuestMachineSupported': (2, ['USHORT', 'BOOLEAN *'], ['machine', 'supported'], 'NTSTATUS'), 'RtlWow64GetCpuAreaInfo': (3, ['WOW64_CPURESERVED *', 'ULONG', 'WOW64_CPU_AREA_INFO *'], ['cpu', 'reserved', 'info'], 'NTSTATUS'), 'RtlWow64GetCurrentCpuArea': (3, ['USHORT *', 'void *', 'void *'], ['machine', '*context', '*context_ex'], 'NTSTATUS'), 'RtlWow64GetThreadContext': (2, ['HANDLE', 'WOW64_CONTEXT *'], ['handle', 'context'], 'NTSTATUS'), 'RtlWow64SetThreadContext': (2, ['HANDLE', 'const WOW64_CONTEXT *'], ['handle', 'context'], 'NTSTATUS'), 'RtlWow64GetThreadSelectorEntry': (4, ['HANDLE', 'THREAD_DESCRIPTOR_INFORMATION *', 'ULONG', 'ULONG *'], ['handle', 'info', 'size', 'retlen'], 'NTSTATUS'), 'RtlCreateUserProcess': (10, ['UNICODE_STRING *', 'ULONG', 'RTL_USER_PROCESS_PARAMETERS *', 'SECURITY_DESCRIPTOR *', 'SECURITY_DESCRIPTOR *', 'HANDLE', 'BOOLEAN', 'HANDLE', 'HANDLE', 'RTL_USER_PROCESS_INFORMATION *'], ['path', 'attributes', 'params', 'process_descr', 'thread_descr', 'parent', 'inherit', 'debug', 'token', 'info'], 'NTSTATUS'), 'DbgUiGetThreadDebugObject': (0, [], [], 'HANDLE'), 'DbgUiSetThreadDebugObject': (1, ['HANDLE'], ['handle'], 'void'), 'DbgUiConnectToDbg': (0, [], [], 'NTSTATUS'), 'DbgUiDebugActiveProcess': (1, ['HANDLE'], ['process'], 'NTSTATUS'), 'DbgUiStopDebugging': (1, ['HANDLE'], ['process'], 'NTSTATUS'), 'DbgUiContinue': (2, ['CLIENT_ID *', 'NTSTATUS'], ['client', 'status'], 'NTSTATUS'), 'DbgUiWaitStateChange': (2, ['DBGUI_WAIT_STATE_CHANGE *', 'LARGE_INTEGER *'], ['state', 'timeout'], 'NTSTATUS'), 'DbgUiConvertStateChangeStructure': (2, ['DBGUI_WAIT_STATE_CHANGE *', 'DEBUG_EVENT *'], ['state', 'event'], 'NTSTATUS'), 'DbgUiRemoteBreakin': (0, [], [], 'void'), 'DbgUiIssueRemoteBreakin': (1, ['HANDLE'], ['process'], 'NTSTATUS'), 'RtlpNtCreateKey': (7, ['PHANDLE', 'ACCESS_MASK', 'const OBJECT_ATTRIBUTES *', 'ULONG', 'const UNICODE_STRING *', 'ULONG', 'PULONG'], ['retkey', 'access', 'attr', 'TitleIndex', 'class', 'options', 'dispos'], 'NTSTATUS'), 'RtlpNtOpenKey': (3, ['PHANDLE', 'ACCESS_MASK', 'OBJECT_ATTRIBUTES *'], ['retkey', 'access', 'attr'], 'NTSTATUS'), 'RtlpNtMakeTemporaryKey': (1, ['HANDLE'], ['hkey'], 'NTSTATUS'), 'RtlpNtEnumerateSubKey': (3, ['HANDLE', 'UNICODE_STRING *', 'ULONG'], ['handle', 'out', 'index'], 'NTSTATUS'), 'RtlpNtQueryValueKey': (5, ['HANDLE', 'ULONG *', 'PBYTE', 'DWORD *', 'void *'], ['handle', 'result_type', 'dest', 'result_len', 'unknown'], 'NTSTATUS'), 'RtlpNtSetValueKey': (4, ['HANDLE', 'ULONG', 'const void *', 'ULONG'], ['hkey', 'type', 'data', 'count'], 'NTSTATUS'), 'RtlFormatCurrentUserKeyPath': (1, ['IN OUT PUNICODE_STRING'], ['KeyPath'], 'NTSTATUS'), 'RtlQueryRegistryValues': (5, ['IN ULONG', 'IN PCWSTR', 'IN PRTL_QUERY_REGISTRY_TABLE', 'IN PVOID', 'IN PVOID Environment'], ['RelativeTo', 'Path', 'QueryTable', 'Context', 'OPTIONAL'], 'NTSTATUS'), 'RtlCheckRegistryKey': (2, ['IN ULONG', 'IN PWSTR'], ['RelativeTo', 'Path'], 'NTSTATUS'), 'RtlCreateRegistryKey': (2, ['ULONG', 'PWSTR'], ['RelativeTo', 'path'], 'NTSTATUS'), 'RtlDeleteRegistryValue': (3, ['IN ULONG', 'IN PCWSTR', 'IN PCWSTR'], ['RelativeTo', 'Path', 'ValueName'], 'NTSTATUS'), 'RtlWriteRegistryValue': (6, ['ULONG', 'PCWSTR', 'PCWSTR', 'ULONG', 'PVOID', 'ULONG'], ['RelativeTo', 'path', 'name', 'type', 'data', 'length'], 'NTSTATUS'), 'LdrAccessResource': (4, ['HMODULE', 'const IMAGE_RESOURCE_DATA_ENTRY *', 'void *', 'ULONG *'], ['hmod', 'entry', '*ptr', 'size'], 'NTSTATUS'), 'RtlFindMessage': (5, ['HMODULE', 'ULONG', 'ULONG', 'ULONG', 'const MESSAGE_RESOURCE_ENTRY *'], ['hmod', 'type', 'lang', 'msg_id', '*ret'], 'NTSTATUS'), 'RtlInitializeResource': (1, ['LPRTL_RWLOCK'], ['rwl'], 'void'), 'RtlDeleteResource': (1, ['LPRTL_RWLOCK'], ['rwl'], 'void'), 'RtlAcquireResourceExclusive': (2, ['LPRTL_RWLOCK', 'BYTE'], ['rwl', 'fWait'], 'BYTE'), 'RtlAcquireResourceShared': (2, ['LPRTL_RWLOCK', 'BYTE'], ['rwl', 'fWait'], 'BYTE'), 'RtlReleaseResource': (1, ['LPRTL_RWLOCK'], ['rwl'], 'void'), 'RtlDumpResource': (1, ['LPRTL_RWLOCK'], ['rwl'], 'void'), 'vDbgPrintEx': (4, ['ULONG', 'ULONG', 'LPCSTR', 'va_list'], ['id', 'level', 'fmt', 'args'], 'NTSTATUS'), 'vDbgPrintExWithPrefix': (5, ['LPCSTR', 'ULONG', 'ULONG', 'LPCSTR', 'va_list'], ['prefix', 'id', 'level', 'fmt', 'args'], 'NTSTATUS'), 'RtlAcquirePebLock': (0, [], [], 'VOID'), 'RtlReleasePebLock': (0, [], [], 'VOID'), 'RtlNewSecurityObject': (6, ['PSECURITY_DESCRIPTOR', 'PSECURITY_DESCRIPTOR', 'PSECURITY_DESCRIPTOR *', 'BOOLEAN', 'HANDLE', 'PGENERIC_MAPPING'], ['ParentDescriptor', 'CreatorDescriptor', 'NewDescriptor', 'IsDirectoryObject', 'Token', 'GenericMapping'], 'NTSTATUS'), 'RtlDeleteSecurityObject': (1, ['PSECURITY_DESCRIPTOR *'], ['ObjectDescriptor'], 'NTSTATUS'), 'RtlInitializeGenericTable': (5, ['RTL_GENERIC_TABLE *', 'PRTL_GENERIC_COMPARE_ROUTINE', 'PRTL_GENERIC_ALLOCATE_ROUTINE', 'PRTL_GENERIC_FREE_ROUTINE', 'void *'], ['table', 'compare', 'allocate', 'free', 'context'], 'void'), 'RtlNumberGenericTableElements': (1, ['RTL_GENERIC_TABLE *'], ['table'], 'ULONG'), 'RtlMoveMemory': (3, ['void *', 'const void *', 'SIZE_T'], ['Destination', 'Source', 'Length'], 'VOID'), 'RtlFillMemory': (3, ['VOID *', 'SIZE_T', 'BYTE'], ['Destination', 'Length', 'Fill'], 'VOID'), 'RtlZeroMemory': (2, ['VOID *', 'SIZE_T'], ['Destination', 'Length'], 'VOID'), 'RtlCompareMemory': (3, ['const VOID *', 'const VOID *', 'SIZE_T'], ['Source1', 'Source2', 'Length'], 'SIZE_T'), 'RtlCompareMemoryUlong': (3, ['VOID *', 'SIZE_T', 'ULONG'], ['Source1', 'Length', 'dwVal'], 'SIZE_T'), 'RtlCopyMemory': (3, ['void *', 'const void *', 'SIZE_T'], ['dest', 'src', 'len'], 'void'), 'RtlAssert': (4, ['void *', 'void *', 'ULONG', 'char *'], ['assertion', 'filename', 'linenumber', 'message'], 'void'), 'RtlFillMemoryUlong': (3, ['ULONG*', 'ULONG', 'ULONG'], ['lpDest', 'ulCount', 'ulValue'], 'VOID'), 'RtlComputeCrc32': (3, ['DWORD', 'const BYTE *', 'INT'], ['dwInitial', 'pData', 'iLen'], 'DWORD'), 'RtlRandomEx': (1, ['ULONG *'], ['seed'], 'ULONG'), 'RtlAreAllAccessesGranted': (2, ['ACCESS_MASK', 'ACCESS_MASK'], ['GrantedAccess', 'DesiredAccess'], 'BOOLEAN'), 'RtlAreAnyAccessesGranted': (2, ['ACCESS_MASK', 'ACCESS_MASK'], ['GrantedAccess', 'DesiredAccess'], 'BOOLEAN'), 'RtlMapGenericMask': (2, ['PACCESS_MASK', 'const GENERIC_MAPPING *'], ['AccessMask', 'GenericMapping'], 'void'), 'RtlCopyLuidAndAttributesArray': (3, ['ULONG', 'const LUID_AND_ATTRIBUTES *', 'PLUID_AND_ATTRIBUTES'], ['Count', 'Src', 'Dest'], 'void'), 'RtlIpv4StringToAddressExW': (4, ['const WCHAR *', 'BOOLEAN', 'IN_ADDR *', 'USHORT *'], ['str', 'strict', 'address', 'port'], 'NTSTATUS'), 'RtlIpv4StringToAddressW': (4, ['const WCHAR *', 'BOOLEAN', 'const WCHAR *', 'IN_ADDR *'], ['str', 'strict', '*terminator', 'address'], 'NTSTATUS'), 'RtlIpv4StringToAddressExA': (4, ['const char *', 'BOOLEAN', 'IN_ADDR *', 'USHORT *'], ['str', 'strict', 'address', 'port'], 'NTSTATUS'), 'RtlIpv4StringToAddressA': (4, ['const char *', 'BOOLEAN', 'const char *', 'IN_ADDR *'], ['str', 'strict', '*terminator', 'address'], 'NTSTATUS'), 'RtlIpv6StringToAddressW': (3, ['const WCHAR *', 'const WCHAR *', 'IN6_ADDR *'], ['str', '*terminator', 'address'], 'NTSTATUS'), 'RtlIpv6StringToAddressExA': (4, ['const char *', 'IN6_ADDR *', 'ULONG *', 'USHORT *'], ['str', 'address', 'scope', 'port'], 'NTSTATUS'), 'RtlIpv6StringToAddressA': (3, ['const char *', 'const char *', 'IN6_ADDR *'], ['str', '*terminator', 'address'], 'NTSTATUS'), 'RtlIpv4AddressToStringExW': (4, ['const IN_ADDR *', 'USHORT', 'LPWSTR', 'PULONG'], ['pin', 'port', 'buffer', 'psize'], 'NTSTATUS'), 'RtlIpv4AddressToStringExA': (4, ['const IN_ADDR *', 'USHORT', 'LPSTR', 'PULONG'], ['pin', 'port', 'buffer', 'psize'], 'NTSTATUS'), 'RtlIpv6AddressToStringExA': (5, ['const IN6_ADDR *', 'ULONG', 'USHORT', 'char *', 'ULONG *'], ['address', 'scope', 'port', 'str', 'size'], 'NTSTATUS'), 'RtlIpv6AddressToStringExW': (5, ['const IN6_ADDR *', 'ULONG', 'USHORT', 'WCHAR *', 'ULONG *'], ['address', 'scope', 'port', 'str', 'size'], 'NTSTATUS'), 'RtlEncodePointer': (1, ['PVOID'], ['ptr'], 'PVOID'), 'RtlDecodePointer': (0, [], [], 'PVOID'), 'RtlInitializeSListHead': (1, ['PSLIST_HEADER'], ['list'], 'VOID'), 'RtlQueryDepthSList': (1, ['PSLIST_HEADER'], ['list'], 'WORD'), 'RtlFirstEntrySList': (1, ['const SLIST_HEADER*'], ['list'], 'PSLIST_ENTRY'), 'RtlInterlockedFlushSList': (1, ['PSLIST_HEADER'], ['list'], 'PSLIST_ENTRY'), 'RtlInterlockedPushEntrySList': (2, ['PSLIST_HEADER', 'PSLIST_ENTRY'], ['list', 'entry'], 'PSLIST_ENTRY'), 'RtlInterlockedPopEntrySList': (1, ['PSLIST_HEADER'], ['list'], 'PSLIST_ENTRY'), 'RtlInterlockedPushListSListEx': (4, ['PSLIST_HEADER', 'PSLIST_ENTRY', 'PSLIST_ENTRY', 'ULONG'], ['list', 'first', 'last', 'count'], 'PSLIST_ENTRY'), 'RtlGetCompressionWorkSpaceSize': (3, ['USHORT', 'PULONG', 'PULONG'], ['format', 'compress_workspace', 'decompress_workspace'], 'NTSTATUS'), 'RtlCompressBuffer': (8, ['USHORT', 'PUCHAR', 'ULONG', 'PUCHAR', 'ULONG', 'ULONG', 'PULONG', 'PVOID'], ['format', 'uncompressed', 'uncompressed_size', 'compressed', 'compressed_size', 'chunk_size', 'final_size', 'workspace'], 'NTSTATUS'), 'RtlDecompressFragment': (8, ['USHORT', 'PUCHAR', 'ULONG', 'PUCHAR', 'ULONG', 'ULONG', 'PULONG', 'PVOID'], ['format', 'uncompressed', 'uncompressed_size', 'compressed', 'compressed_size', 'offset', 'final_size', 'workspace'], 'NTSTATUS'), 'RtlDecompressBuffer': (6, ['USHORT', 'PUCHAR', 'ULONG', 'PUCHAR', 'ULONG', 'PULONG'], ['format', 'uncompressed', 'uncompressed_size', 'compressed', 'compressed_size', 'final_size'], 'NTSTATUS'), 'RtlSetThreadErrorMode': (2, ['DWORD', 'LPDWORD'], ['mode', 'oldmode'], 'NTSTATUS'), 'RtlGetThreadErrorMode': (0, [], [], 'DWORD'), 'RtlGetCurrentTransaction': (0, [], [], 'HANDLE'), 'RtlSetCurrentTransaction': (1, ['HANDLE'], ['new_transaction'], 'BOOL'), 'RtlGetCurrentProcessorNumberEx': (1, ['PROCESSOR_NUMBER *'], ['processor'], 'void'), 'RtlIsProcessorFeaturePresent': (1, ['UINT'], ['feature'], 'BOOLEAN'), 'RtlInitializeGenericTableAvl': (5, ['PRTL_AVL_TABLE', 'PRTL_AVL_COMPARE_ROUTINE', 'PRTL_AVL_ALLOCATE_ROUTINE', 'PRTL_AVL_FREE_ROUTINE', 'void *'], ['table', 'compare', 'allocate', 'free', 'context'], 'void'), 'RtlInsertElementGenericTableAvl': (4, ['PRTL_AVL_TABLE', 'void *', 'ULONG', 'BOOL *'], ['table', 'buffer', 'size', 'element'], 'void'), 'RtlQueryPackageIdentity': (6, ['HANDLE', 'WCHAR *', 'SIZE_T *', 'WCHAR *', 'SIZE_T *', 'BOOLEAN *'], ['token', 'fullname', 'fullname_size', 'appid', 'appid_size', 'packaged'], 'NTSTATUS'), 'RtlQueryProcessPlaceholderCompatibilityMode': (0, [], [], 'char'), 'RtlInitializeBitMap': (3, ['PRTL_BITMAP', 'PULONG', 'ULONG'], ['lpBits', 'lpBuff', 'ulSize'], 'VOID'), 'RtlSetAllBits': (1, ['PRTL_BITMAP'], ['lpBits'], 'VOID'), 'RtlClearAllBits': (1, ['PRTL_BITMAP'], ['lpBits'], 'VOID'), 'RtlSetBits': (3, ['PRTL_BITMAP', 'ULONG', 'ULONG'], ['lpBits', 'ulStart', 'ulCount'], 'VOID'), 'RtlClearBits': (3, ['PRTL_BITMAP', 'ULONG', 'ULONG'], ['lpBits', 'ulStart', 'ulCount'], 'VOID'), 'RtlAreBitsSet': (3, ['PCRTL_BITMAP', 'ULONG', 'ULONG'], ['lpBits', 'ulStart', 'ulCount'], 'BOOLEAN'), 'RtlAreBitsClear': (3, ['PCRTL_BITMAP', 'ULONG', 'ULONG'], ['lpBits', 'ulStart', 'ulCount'], 'BOOLEAN'), 'RtlFindSetBits': (3, ['PCRTL_BITMAP', 'ULONG', 'ULONG'], ['lpBits', 'ulCount', 'ulHint'], 'ULONG'), 'RtlFindClearBits': (3, ['PCRTL_BITMAP', 'ULONG', 'ULONG'], ['lpBits', 'ulCount', 'ulHint'], 'ULONG'), 'RtlFindSetBitsAndClear': (3, ['PRTL_BITMAP', 'ULONG', 'ULONG'], ['lpBits', 'ulCount', 'ulHint'], 'ULONG'), 'RtlFindClearBitsAndSet': (3, ['PRTL_BITMAP', 'ULONG', 'ULONG'], ['lpBits', 'ulCount', 'ulHint'], 'ULONG'), 'RtlNumberOfSetBits': (1, ['PCRTL_BITMAP'], ['lpBits'], 'ULONG'), 'RtlNumberOfClearBits': (1, ['PCRTL_BITMAP'], ['lpBits'], 'ULONG'), 'RtlFindMostSignificantBit': (1, ['ULONGLONG'], ['ulLong'], 'CCHAR'), 'RtlFindLeastSignificantBit': (1, ['ULONGLONG'], ['ulLong'], 'CCHAR'), 'RtlFindNextForwardRunSet': (3, ['PCRTL_BITMAP', 'ULONG', 'PULONG'], ['lpBits', 'ulStart', 'lpPos'], 'ULONG'), 'RtlFindNextForwardRunClear': (3, ['PCRTL_BITMAP', 'ULONG', 'PULONG'], ['lpBits', 'ulStart', 'lpPos'], 'ULONG'), 'RtlFindLastBackwardRunSet': (3, ['PCRTL_BITMAP', 'ULONG', 'PULONG'], ['lpBits', 'ulStart', 'lpPos'], 'ULONG'), 'RtlFindLastBackwardRunClear': (3, ['PCRTL_BITMAP', 'ULONG', 'PULONG'], ['lpBits', 'ulStart', 'lpPos'], 'ULONG'), 'RtlFindSetRuns': (4, ['PCRTL_BITMAP', 'PRTL_BITMAP_RUN', 'ULONG', 'BOOLEAN'], ['lpBits', 'lpSeries', 'ulCount', 'bLongest'], 'ULONG'), 'RtlFindClearRuns': (4, ['PCRTL_BITMAP', 'PRTL_BITMAP_RUN', 'ULONG', 'BOOLEAN'], ['lpBits', 'lpSeries', 'ulCount', 'bLongest'], 'ULONG'), 'RtlFindLongestRunSet': (2, ['PCRTL_BITMAP', 'PULONG'], ['lpBits', 'pulStart'], 'ULONG'), 'RtlFindLongestRunClear': (2, ['PCRTL_BITMAP', 'PULONG'], ['lpBits', 'pulStart'], 'ULONG'), 'RtlInitAnsiStringEx': (2, ['PANSI_STRING', 'PCSZ'], ['target', 'source'], 'NTSTATUS'), 'RtlFreeAnsiString': (1, ['PSTRING'], ['str'], 'void'), 'RtlFreeOemString': (1, ['PSTRING'], ['str'], 'void'), 'RtlCopyString': (2, ['STRING *', 'const STRING *'], ['dst', 'src'], 'void'), 'RtlCreateUnicodeString': (2, ['PUNICODE_STRING', 'LPCWSTR'], ['target', 'src'], 'BOOLEAN'), 'RtlCreateUnicodeStringFromAsciiz': (2, ['PUNICODE_STRING', 'LPCSTR'], ['target', 'src'], 'BOOLEAN'), 'RtlFreeUnicodeString': (1, ['PUNICODE_STRING'], ['str'], 'void'), 'RtlCopyUnicodeString': (2, ['UNICODE_STRING *', 'const UNICODE_STRING *'], ['dst', 'src'], 'void'), 'RtlEraseUnicodeString': (1, ['UNICODE_STRING *'], ['str'], 'void'), 'RtlCompareString': (3, ['const STRING *', 'const STRING *', 'BOOLEAN'], ['s1', 's2', 'CaseInsensitive'], 'LONG'), 'RtlCompareUnicodeString': (3, ['const UNICODE_STRING *', 'const UNICODE_STRING *', 'BOOLEAN'], ['s1', 's2', 'CaseInsensitive'], 'LONG'), 'RtlEqualString': (3, ['const STRING *', 'const STRING *', 'BOOLEAN'], ['s1', 's2', 'CaseInsensitive'], 'BOOLEAN'), 'RtlEqualUnicodeString': (3, ['const UNICODE_STRING *', 'const UNICODE_STRING *', 'BOOLEAN'], ['s1', 's2', 'CaseInsensitive'], 'BOOLEAN'), 'RtlPrefixString': (3, ['const STRING *', 'const STRING *', 'BOOLEAN'], ['s1', 's2', 'ignore_case'], 'BOOLEAN'), 'RtlEqualComputerName': (2, ['const UNICODE_STRING *', 'const UNICODE_STRING *'], ['left', 'right'], 'NTSTATUS'), 'RtlEqualDomainName': (2, ['const UNICODE_STRING *', 'const UNICODE_STRING *'], ['left', 'right'], 'NTSTATUS'), 'RtlUnicodeStringToOemString': (3, ['STRING *', 'const UNICODE_STRING *', 'BOOLEAN'], ['oem', 'uni', 'doalloc'], 'NTSTATUS'), 'RtlUpperChar': (1, ['CHAR'], ['ch'], 'CHAR'), 'RtlUpperString': (2, ['STRING *', 'const STRING *'], ['dst', 'src'], 'void'), 'RtlUpcaseUnicodeStringToAnsiString': (3, ['STRING *', 'const UNICODE_STRING *', 'BOOLEAN'], ['ansi', 'uni', 'doalloc'], 'NTSTATUS'), 'RtlUpcaseUnicodeStringToOemString': (3, ['STRING *', 'const UNICODE_STRING *', 'BOOLEAN'], ['oem', 'uni', 'doalloc'], 'NTSTATUS'), 'RtlUpcaseUnicodeStringToCountedOemString': (3, ['STRING *', 'const UNICODE_STRING *', 'BOOLEAN'], ['oem', 'uni', 'doalloc'], 'NTSTATUS'), 'RtlAnsiStringToUnicodeSize': (1, ['const STRING *'], ['str'], 'DWORD'), 'RtlUnicodeStringToAnsiSize': (1, ['const UNICODE_STRING *'], ['str'], 'DWORD'), 'RtlIsTextUnicode': (3, ['LPCVOID', 'INT', 'INT *'], ['buf', 'len', 'pf'], 'BOOLEAN'), 'RtlGUIDFromString': (2, ['PUNICODE_STRING', 'GUID*'], ['str', 'guid'], 'NTSTATUS'), 'RtlStringFromGUID': (2, ['const GUID*', 'UNICODE_STRING *'], ['guid', 'str'], 'NTSTATUS'), 'RtlFormatMessage': (9, ['const WCHAR *', 'ULONG', 'BOOLEAN', 'BOOLEAN', 'BOOLEAN', 'va_list *', 'WCHAR *', 'ULONG', 'ULONG *'], ['src', 'width', 'ignore_inserts', 'ansi', 'is_array', 'args', 'buffer', 'size', 'retsize'], 'NTSTATUS'), 'RtlFormatMessageEx': (10, ['const WCHAR *', 'ULONG', 'BOOLEAN', 'BOOLEAN', 'BOOLEAN', 'va_list *', 'WCHAR *', 'ULONG', 'ULONG *', 'ULONG'], ['src', 'width', 'ignore_inserts', 'ansi', 'is_array', 'args', 'buffer', 'size', 'retsize', 'flags'], 'NTSTATUS'), 'RtlEqualSid': (2, ['PSID', 'PSID'], ['pSid1', 'pSid2'], 'BOOL'), 'RtlFreeSid': (1, ['PSID'], ['pSid'], 'DWORD'), 'RtlLengthRequiredSid': (1, ['DWORD'], ['nrofsubauths'], 'DWORD'), 'RtlLengthSid': (1, ['PSID'], ['pSid'], 'DWORD'), 'RtlInitializeSid': (3, ['PSID', 'PSID_IDENTIFIER_AUTHORITY', 'BYTE'], ['pSid', 'pIdentifierAuthority', 'nSubAuthorityCount'], 'BOOL'), 'RtlSubAuthoritySid': (2, ['PSID', 'DWORD'], ['pSid', 'nSubAuthority'], 'LPDWORD'), 'RtlIdentifierAuthoritySid': (1, ['PSID'], ['pSid'], 'PSID_IDENTIFIER_AUTHORITY'), 'RtlSubAuthorityCountSid': (1, ['PSID'], ['pSid'], 'LPBYTE'), 'RtlCopySid': (3, ['DWORD', 'PSID', 'PSID'], ['nDestinationSidLength', 'pDestinationSid', 'pSourceSid'], 'BOOLEAN'), 'RtlValidSid': (1, ['PSID'], ['pSid'], 'BOOLEAN'), 'RtlCreateSecurityDescriptor': (2, ['PSECURITY_DESCRIPTOR', 'DWORD'], ['lpsd', 'rev'], 'NTSTATUS'), 'RtlCopySecurityDescriptor': (2, ['PSECURITY_DESCRIPTOR', 'PSECURITY_DESCRIPTOR'], ['pSourceSD', 'pDestinationSD'], 'NTSTATUS'), 'RtlValidSecurityDescriptor': (1, ['PSECURITY_DESCRIPTOR'], ['SecurityDescriptor'], 'NTSTATUS'), 'RtlValidRelativeSecurityDescriptor': (3, ['PSECURITY_DESCRIPTOR', 'ULONG', 'SECURITY_INFORMATION'], ['descriptor', 'length', 'info'], 'BOOLEAN'), 'RtlLengthSecurityDescriptor': (1, ['PSECURITY_DESCRIPTOR'], ['pSecurityDescriptor'], 'ULONG'), 'RtlGetDaclSecurityDescriptor': (4, ['IN PSECURITY_DESCRIPTOR', 'OUT PBOOLEAN', 'OUT PACL *', 'OUT PBOOLEAN'], ['pSecurityDescriptor', 'lpbDaclPresent', 'pDacl', 'lpbDaclDefaulted'], 'NTSTATUS'), 'RtlGetSaclSecurityDescriptor': (4, ['IN PSECURITY_DESCRIPTOR', 'OUT PBOOLEAN', 'OUT PACL *', 'OUT PBOOLEAN'], ['pSecurityDescriptor', 'lpbSaclPresent', 'pSacl', 'lpbSaclDefaulted'], 'NTSTATUS'), 'RtlGetOwnerSecurityDescriptor': (3, ['PSECURITY_DESCRIPTOR', 'PSID *', 'PBOOLEAN'], ['pSecurityDescriptor', 'Owner', 'OwnerDefaulted'], 'NTSTATUS'), 'RtlSetOwnerSecurityDescriptor': (3, ['PSECURITY_DESCRIPTOR', 'PSID', 'BOOLEAN'], ['pSecurityDescriptor', 'owner', 'ownerdefaulted'], 'NTSTATUS'), 'RtlGetGroupSecurityDescriptor': (3, ['PSECURITY_DESCRIPTOR', 'PSID *', 'PBOOLEAN'], ['pSecurityDescriptor', 'Group', 'GroupDefaulted'], 'NTSTATUS'), 'RtlMakeSelfRelativeSD': (3, ['IN PSECURITY_DESCRIPTOR', 'IN PSECURITY_DESCRIPTOR', 'IN OUT LPDWORD'], ['pAbsoluteSecurityDescriptor', 'pSelfRelativeSecurityDescriptor', 'lpdwBufferLength'], 'NTSTATUS'), 'RtlSelfRelativeToAbsoluteSD': (11, ['IN PSECURITY_DESCRIPTOR', 'OUT PSECURITY_DESCRIPTOR', 'OUT LPDWORD', 'OUT PACL', 'OUT LPDWORD', 'OUT PACL', 'OUT LPDWORD', 'OUT PSID', 'OUT LPDWORD', 'OUT PSID', 'OUT LPDWORD'], ['pSelfRelativeSecurityDescriptor', 'pAbsoluteSecurityDescriptor', 'lpdwAbsoluteSecurityDescriptorSize', 'pDacl', 'lpdwDaclSize', 'pSacl', 'lpdwSaclSize', 'pOwner', 'lpdwOwnerSize', 'pPrimaryGroup', 'lpdwPrimaryGroupSize'], 'NTSTATUS'), 'RtlGetControlSecurityDescriptor': (3, ['PSECURITY_DESCRIPTOR', 'PSECURITY_DESCRIPTOR_CONTROL', 'LPDWORD'], ['pSecurityDescriptor', 'pControl', 'lpdwRevision'], 'NTSTATUS'), 'RtlSetControlSecurityDescriptor': (3, ['PSECURITY_DESCRIPTOR', 'SECURITY_DESCRIPTOR_CONTROL', 'SECURITY_DESCRIPTOR_CONTROL'], ['SecurityDescriptor', 'ControlBitsOfInterest', 'ControlBitsToSet'], 'NTSTATUS'), 'RtlAbsoluteToSelfRelativeSD': (3, ['PSECURITY_DESCRIPTOR', 'PSECURITY_DESCRIPTOR', 'PULONG'], ['AbsoluteSecurityDescriptor', 'SelfRelativeSecurityDescriptor', 'BufferLength'], 'NTSTATUS'), 'RtlCreateAcl': (3, ['PACL', 'DWORD', 'DWORD'], ['acl', 'size', 'rev'], 'NTSTATUS'), 'RtlFirstFreeAce': (2, ['PACL', 'PACE_HEADER *'], ['acl', 'x'], 'BOOLEAN'), 'RtlAddAce': (5, ['PACL', 'DWORD', 'DWORD', 'PACE_HEADER', 'DWORD'], ['acl', 'rev', 'xnrofaces', 'acestart', 'acelen'], 'NTSTATUS'), 'RtlAddAccessAllowedAce': (4, ['IN OUT PACL', 'IN DWORD', 'IN DWORD', 'IN PSID'], ['pAcl', 'dwAceRevision', 'AccessMask', 'pSid'], 'NTSTATUS'), 'RtlAddAccessAllowedAceEx': (5, ['IN OUT PACL', 'IN DWORD', 'IN DWORD', 'IN DWORD', 'IN PSID'], ['pAcl', 'dwAceRevision', 'AceFlags', 'AccessMask', 'pSid'], 'NTSTATUS'), 'RtlAddAccessAllowedObjectAce': (7, ['IN OUT PACL', 'IN DWORD', 'IN DWORD', 'IN DWORD', 'IN GUID*', 'IN GUID*', 'IN PSID'], ['pAcl', 'dwAceRevision', 'dwAceFlags', 'dwAccessMask', 'pObjectTypeGuid', 'pInheritedObjectTypeGuid', 'pSid'], 'NTSTATUS'), 'RtlAddAccessDeniedAce': (4, ['IN OUT PACL', 'IN DWORD', 'IN DWORD', 'IN PSID'], ['pAcl', 'dwAceRevision', 'AccessMask', 'pSid'], 'NTSTATUS'), 'RtlAddAccessDeniedAceEx': (5, ['IN OUT PACL', 'IN DWORD', 'IN DWORD', 'IN DWORD', 'IN PSID'], ['pAcl', 'dwAceRevision', 'AceFlags', 'AccessMask', 'pSid'], 'NTSTATUS'), 'RtlAddAccessDeniedObjectAce': (7, ['IN OUT PACL', 'IN DWORD', 'IN DWORD', 'IN DWORD', 'IN GUID*', 'IN GUID*', 'IN PSID'], ['pAcl', 'dwAceRevision', 'dwAceFlags', 'dwAccessMask', 'pObjectTypeGuid', 'pInheritedObjectTypeGuid', 'pSid'], 'NTSTATUS'), 'RtlAddAuditAccessAceEx': (7, ['IN OUT PACL', 'IN DWORD', 'IN DWORD', 'IN DWORD', 'IN PSID', 'IN BOOL', 'IN BOOL'], ['pAcl', 'dwAceRevision', 'dwAceFlags', 'dwAccessMask', 'pSid', 'bAuditSuccess', 'bAuditFailure'], 'NTSTATUS'), 'RtlAddAuditAccessAce': (6, ['IN OUT PACL', 'IN DWORD', 'IN DWORD', 'IN PSID', 'IN BOOL', 'IN BOOL'], ['pAcl', 'dwAceRevision', 'dwAccessMask', 'pSid', 'bAuditSuccess', 'bAuditFailure'], 'NTSTATUS'), 'RtlAddAuditAccessObjectAce': (9, ['IN OUT PACL', 'IN DWORD', 'IN DWORD', 'IN DWORD', 'IN GUID*', 'IN GUID*', 'IN PSID', 'IN BOOL', 'IN BOOL'], ['pAcl', 'dwAceRevision', 'dwAceFlags', 'dwAccessMask', 'pObjectTypeGuid', 'pInheritedObjectTypeGuid', 'pSid', 'bAuditSuccess', 'bAuditFailure'], 'NTSTATUS'), 'RtlAddMandatoryAce': (6, ['IN OUT PACL', 'IN DWORD', 'IN DWORD', 'IN DWORD', 'IN DWORD', 'IN PSID'], ['pAcl', 'dwAceRevision', 'dwAceFlags', 'dwMandatoryFlags', 'dwAceType', 'pSid'], 'NTSTATUS'), 'RtlValidAcl': (1, ['PACL'], ['pAcl'], 'BOOLEAN'), 'RtlGetAce': (3, ['PACL', 'DWORD', 'LPVOID *'], ['pAcl', 'dwAceIndex', 'pAce'], 'NTSTATUS'), 'RtlAdjustPrivilege': (4, ['ULONG', 'BOOLEAN', 'BOOLEAN', 'PBOOLEAN'], ['Privilege', 'Enable', 'CurrentThread', 'Enabled'], 'NTSTATUS'), 'RtlImpersonateSelf': (1, ['SECURITY_IMPERSONATION_LEVEL'], ['ImpersonationLevel'], 'NTSTATUS'), 'RtlConvertSidToUnicodeString': (3, ['PUNICODE_STRING', 'PSID', 'BOOLEAN'], ['String', 'pSid', 'AllocateString'], 'NTSTATUS'), 'RtlQueryInformationAcl': (4, ['PACL', 'LPVOID', 'DWORD', 'ACL_INFORMATION_CLASS'], ['pAcl', 'pAclInformation', 'nAclInformationLength', 'dwAclInformationClass'], 'NTSTATUS'), 'RtlConvertToAutoInheritSecurityObject': (0, [], [], 'NTSTATUS'), 'RtlDefaultNpAcl': (1, ['PACL *'], ['pAcl'], 'NTSTATUS'), 'KiUserExceptionDispatcher': (2, ['EXCEPTION_RECORD *', 'CONTEXT *'], ['rec', 'context'], 'NTSTATUS'), 'KiUserApcDispatcher': (5, ['CONTEXT *', 'ULONG_PTR', 'ULONG_PTR', 'ULONG_PTR', 'PNTAPCFUNC'], ['context', 'ctx', 'arg1', 'arg2', 'func'], 'void'), 'KiUserCallbackDispatcher': (3, ['ULONG', 'void *', 'ULONG'], ['id', 'args', 'len'], 'void'), 'RtlUnwind': (4, ['void *', 'void *', 'EXCEPTION_RECORD *', 'void *'], ['endframe', 'target_ip', 'rec', 'retval'], 'void'), 'RtlCaptureStackBackTrace': (4, ['ULONG', 'ULONG', 'PVOID *', 'ULONG *'], ['skip', 'count', 'buffer', 'hash'], 'USHORT'), 'RtlVirtualUnwind': (8, ['ULONG', 'ULONG_PTR', 'ULONG_PTR', 'RUNTIME_FUNCTION *', 'CONTEXT *', 'PVOID *', 'ULONG_PTR *', 'KNONVOLATILE_CONTEXT_POINTERS *'], ['type', 'base', 'pc', 'func', 'context', 'handler_data', 'frame_ret', 'ctx_ptr'], 'PVOID'), 'RtlUnwindEx': (6, ['PVOID', 'PVOID', 'EXCEPTION_RECORD *', 'PVOID', 'CONTEXT *', 'UNWIND_HISTORY_TABLE *'], ['end_frame', 'target_ip', 'rec', 'retval', 'context', 'table'], 'void'), 'RtlRunOnceInitialize': (1, ['RTL_RUN_ONCE *'], ['once'], 'void'), 'RtlRunOnceBeginInitialize': (3, ['RTL_RUN_ONCE *', 'ULONG', 'void *'], ['once', 'flags', '*context'], 'DWORD'), 'RtlRunOnceComplete': (3, ['RTL_RUN_ONCE *', 'ULONG', 'void *'], ['once', 'flags', 'context'], 'DWORD'), 'RtlRunOnceExecuteOnce': (4, ['RTL_RUN_ONCE *', 'PRTL_RUN_ONCE_INIT_FN', 'void *', 'void *'], ['once', 'func', 'param', '*context'], 'DWORD'), 'RtlInitializeSRWLock': (1, ['RTL_SRWLOCK *'], ['lock'], 'void'), 'RtlAcquireSRWLockExclusive': (1, ['RTL_SRWLOCK *'], ['lock'], 'void'), 'RtlAcquireSRWLockShared': (1, ['RTL_SRWLOCK *'], ['lock'], 'void'), 'RtlReleaseSRWLockExclusive': (1, ['RTL_SRWLOCK *'], ['lock'], 'void'), 'RtlReleaseSRWLockShared': (1, ['RTL_SRWLOCK *'], ['lock'], 'void'), 'RtlTryAcquireSRWLockExclusive': (1, ['RTL_SRWLOCK *'], ['lock'], 'BOOLEAN'), 'RtlTryAcquireSRWLockShared': (1, ['RTL_SRWLOCK *'], ['lock'], 'BOOLEAN'), 'RtlInitializeConditionVariable': (1, ['RTL_CONDITION_VARIABLE *'], ['variable'], 'void'), 'RtlWakeConditionVariable': (1, ['RTL_CONDITION_VARIABLE *'], ['variable'], 'void'), 'RtlWakeAllConditionVariable': (1, ['RTL_CONDITION_VARIABLE *'], ['variable'], 'void'), 'RtlSleepConditionVariableCS': (3, ['RTL_CONDITION_VARIABLE *', 'RTL_CRITICAL_SECTION *', 'const LARGE_INTEGER *'], ['variable', 'crit', 'timeout'], 'NTSTATUS'), 'RtlSleepConditionVariableSRW': (4, ['RTL_CONDITION_VARIABLE *', 'RTL_SRWLOCK *', 'const LARGE_INTEGER *', 'ULONG'], ['variable', 'lock', 'timeout', 'flags'], 'NTSTATUS'), 'RtlWaitOnAddress': (4, ['const void *', 'const void *', 'SIZE_T', 'const LARGE_INTEGER *'], ['addr', 'cmp', 'size', 'timeout'], 'NTSTATUS'), 'RtlWakeAddressAll': (1, ['const void *'], ['addr'], 'void'), 'RtlWakeAddressSingle': (1, ['const void *'], ['addr'], 'void'), 'RtlExitUserThread': (1, ['ULONG'], ['status'], 'void'), 'RtlUserThreadStart': (2, ['PRTL_THREAD_START_ROUTINE', 'void *'], ['entry', 'arg'], 'void'), 'RtlCreateUserThread': (10, ['HANDLE', 'SECURITY_DESCRIPTOR *', 'BOOLEAN', 'ULONG', 'SIZE_T', 'SIZE_T', 'PRTL_THREAD_START_ROUTINE', 'void *', 'HANDLE *', 'CLIENT_ID *'], ['process', 'descr', 'suspended', 'zero_bits', 'stack_reserve', 'stack_commit', 'start', 'param', 'handle_ptr', 'id'], 'NTSTATUS'), 'RtlCreateUserStack': (6, ['SIZE_T', 'SIZE_T', 'ULONG', 'SIZE_T', 'SIZE_T', 'INITIAL_TEB *'], ['commit', 'reserve', 'zero_bits', 'commit_align', 'reserve_align', 'stack'], 'NTSTATUS'), 'RtlFreeUserStack': (0, [], [], 'void'), 'RtlGetNtGlobalFlags': (0, [], [], 'ULONG'), 'RtlPushFrame': (1, ['TEB_ACTIVE_FRAME *'], ['frame'], 'void'), 'RtlPopFrame': (1, ['TEB_ACTIVE_FRAME *'], ['frame'], 'void'), 'RtlQueueWorkItem': (3, ['PRTL_WORK_ITEM_ROUTINE', 'PVOID', 'ULONG'], ['function', 'context', 'flags'], 'NTSTATUS'), 'RtlSetIoCompletionCallback': (3, ['HANDLE', 'PRTL_OVERLAPPED_COMPLETION_ROUTINE', 'ULONG'], ['FileHandle', 'Function', 'Flags'], 'NTSTATUS'), 'RtlCreateTimerQueue': (1, ['PHANDLE'], ['NewTimerQueue'], 'NTSTATUS'), 'RtlDeleteTimerQueueEx': (2, ['HANDLE', 'HANDLE'], ['TimerQueue', 'CompletionEvent'], 'NTSTATUS'), 'RtlCreateTimer': (7, ['PHANDLE', 'HANDLE', 'RTL_WAITORTIMERCALLBACKFUNC', 'PVOID', 'DWORD', 'DWORD', 'ULONG'], ['NewTimer', 'TimerQueue', 'Callback', 'Parameter', 'DueTime', 'Period', 'Flags'], 'NTSTATUS'), 'RtlUpdateTimer': (4, ['HANDLE', 'HANDLE', 'DWORD', 'DWORD'], ['TimerQueue', 'Timer', 'DueTime', 'Period'], 'NTSTATUS'), 'RtlDeleteTimer': (3, ['HANDLE', 'HANDLE', 'HANDLE'], ['TimerQueue', 'Timer', 'CompletionEvent'], 'NTSTATUS'), 'TpAllocCleanupGroup': (1, ['TP_CLEANUP_GROUP *'], ['*out'], 'NTSTATUS'), 'TpAllocIoCompletion': (5, ['TP_IO *', 'HANDLE', 'PTP_IO_CALLBACK', 'void *', 'TP_CALLBACK_ENVIRON *'], ['*out', 'file', 'callback', 'userdata', 'environment'], 'NTSTATUS'), 'TpAllocPool': (2, ['TP_POOL *', 'PVOID'], ['*out', 'reserved'], 'NTSTATUS'), 'TpAllocTimer': (4, ['TP_TIMER *', 'PTP_TIMER_CALLBACK', 'PVOID', 'TP_CALLBACK_ENVIRON *'], ['*out', 'callback', 'userdata', 'environment'], 'NTSTATUS'), 'TpAllocWait': (4, ['TP_WAIT *', 'PTP_WAIT_CALLBACK', 'PVOID', 'TP_CALLBACK_ENVIRON *'], ['*out', 'callback', 'userdata', 'environment'], 'NTSTATUS'), 'TpAllocWork': (4, ['TP_WORK *', 'PTP_WORK_CALLBACK', 'PVOID', 'TP_CALLBACK_ENVIRON *'], ['*out', 'callback', 'userdata', 'environment'], 'NTSTATUS'), 'TpCancelAsyncIoOperation': (1, ['TP_IO *'], ['io'], 'void'), 'TpCallbackLeaveCriticalSectionOnCompletion': (2, ['TP_CALLBACK_INSTANCE *', 'CRITICAL_SECTION *'], ['instance', 'crit'], 'VOID'), 'TpCallbackMayRunLong': (1, ['TP_CALLBACK_INSTANCE *'], ['instance'], 'NTSTATUS'), 'TpCallbackReleaseMutexOnCompletion': (2, ['TP_CALLBACK_INSTANCE *', 'HANDLE'], ['instance', 'mutex'], 'VOID'), 'TpCallbackReleaseSemaphoreOnCompletion': (3, ['TP_CALLBACK_INSTANCE *', 'HANDLE', 'DWORD'], ['instance', 'semaphore', 'count'], 'VOID'), 'TpCallbackSetEventOnCompletion': (2, ['TP_CALLBACK_INSTANCE *', 'HANDLE'], ['instance', 'event'], 'VOID'), 'TpCallbackUnloadDllOnCompletion': (2, ['TP_CALLBACK_INSTANCE *', 'HMODULE'], ['instance', 'module'], 'VOID'), 'TpDisassociateCallback': (1, ['TP_CALLBACK_INSTANCE *'], ['instance'], 'VOID'), 'TpIsTimerSet': (1, ['TP_TIMER *'], ['timer'], 'BOOL'), 'TpPostWork': (1, ['TP_WORK *'], ['work'], 'VOID'), 'TpReleaseCleanupGroup': (1, ['TP_CLEANUP_GROUP *'], ['group'], 'VOID'), 'TpReleaseCleanupGroupMembers': (3, ['TP_CLEANUP_GROUP *', 'BOOL', 'PVOID'], ['group', 'cancel_pending', 'userdata'], 'VOID'), 'TpReleaseIoCompletion': (1, ['TP_IO *'], ['io'], 'void'), 'TpReleasePool': (1, ['TP_POOL *'], ['pool'], 'VOID'), 'TpReleaseTimer': (1, ['TP_TIMER *'], ['timer'], 'VOID'), 'TpReleaseWait': (1, ['TP_WAIT *'], ['wait'], 'VOID'), 'TpReleaseWork': (1, ['TP_WORK *'], ['work'], 'VOID'), 'TpSetPoolMaxThreads': (2, ['TP_POOL *', 'DWORD'], ['pool', 'maximum'], 'VOID'), 'TpSetPoolMinThreads': (2, ['TP_POOL *', 'DWORD'], ['pool', 'minimum'], 'BOOL'), 'TpSetTimer': (4, ['TP_TIMER *', 'LARGE_INTEGER *', 'LONG', 'LONG'], ['timer', 'timeout', 'period', 'window_length'], 'VOID'), 'TpSetWait': (3, ['TP_WAIT *', 'HANDLE', 'LARGE_INTEGER *'], ['wait', 'handle', 'timeout'], 'VOID'), 'TpSimpleTryPost': (3, ['PTP_SIMPLE_CALLBACK', 'PVOID', 'TP_CALLBACK_ENVIRON *'], ['callback', 'userdata', 'environment'], 'NTSTATUS'), 'TpStartAsyncIoOperation': (1, ['TP_IO *'], ['io'], 'void'), 'TpWaitForIoCompletion': (2, ['TP_IO *', 'BOOL'], ['io', 'cancel_pending'], 'void'), 'TpWaitForTimer': (2, ['TP_TIMER *', 'BOOL'], ['timer', 'cancel_pending'], 'VOID'), 'TpWaitForWait': (2, ['TP_WAIT *', 'BOOL'], ['wait', 'cancel_pending'], 'VOID'), 'TpWaitForWork': (2, ['TP_WORK *', 'BOOL'], ['work', 'cancel_pending'], 'VOID'), 'TpSetPoolStackInformation': (2, ['TP_POOL *', 'TP_POOL_STACK_INFORMATION *'], ['pool', 'stack_info'], 'NTSTATUS'), 'TpQueryPoolStackInformation': (2, ['TP_POOL *', 'TP_POOL_STACK_INFORMATION *'], ['pool', 'stack_info'], 'NTSTATUS'), 'RtlRegisterWait': (6, ['HANDLE *', 'HANDLE', 'RTL_WAITORTIMERCALLBACKFUNC', 'void *', 'ULONG', 'ULONG'], ['out', 'handle', 'callback', 'context', 'milliseconds', 'flags'], 'NTSTATUS'), 'RtlDeregisterWaitEx': (2, ['HANDLE', 'HANDLE'], ['handle', 'event'], 'NTSTATUS'), 'RtlDeregisterWait': (1, ['HANDLE'], ['WaitHandle'], 'NTSTATUS'), 'RtlTimeToTimeFields': (2, ['const LARGE_INTEGER *', 'PTIME_FIELDS'], ['liTime', 'TimeFields'], 'VOID'), 'RtlTimeFieldsToTime': (2, ['PTIME_FIELDS', 'PLARGE_INTEGER'], ['tfTimeFields', 'Time'], 'BOOLEAN'), 'RtlLocalTimeToSystemTime': (2, ['const LARGE_INTEGER *', 'PLARGE_INTEGER'], ['LocalTime', 'SystemTime'], 'NTSTATUS'), 'RtlSystemTimeToLocalTime': (2, ['const LARGE_INTEGER *', 'PLARGE_INTEGER'], ['SystemTime', 'LocalTime'], 'NTSTATUS'), 'RtlTimeToElapsedTimeFields': (2, ['const LARGE_INTEGER *', 'PTIME_FIELDS'], ['Time', 'TimeFields'], 'void'), 'RtlGetSystemTimePrecise': (0, [], [], 'LONGLONG'), 'RtlQueryTimeZoneInformation': (1, ['RTL_TIME_ZONE_INFORMATION *'], ['ret'], 'NTSTATUS'), 'RtlQueryDynamicTimeZoneInformation': (1, ['RTL_DYNAMIC_TIME_ZONE_INFORMATION *'], ['ret'], 'NTSTATUS'), 'RtlSetTimeZoneInformation': (1, ['const RTL_TIME_ZONE_INFORMATION *'], ['tzinfo'], 'NTSTATUS'), 'RtlQueryUnbiasedInterruptTime': (1, ['ULONGLONG *'], ['time'], 'BOOL'), 'RtlGetProductInfo': (5, ['DWORD', 'DWORD', 'DWORD', 'DWORD', 'PDWORD'], ['dwOSMajorVersion', 'dwOSMinorVersion', 'dwSpMajorVersion', 'dwSpMinorVersion', 'pdwReturnedProductType'], 'BOOLEAN'), 'RtlGetVersion': (1, ['RTL_OSVERSIONINFOEXW *'], ['info'], 'NTSTATUS'), 'RtlGetNtVersionNumbers': (3, ['LPDWORD', 'LPDWORD', 'LPDWORD'], ['major', 'minor', 'build'], 'void'), 'RtlGetNtProductType': (1, ['LPDWORD'], ['type'], 'BOOLEAN'), 'RtlVerifyVersionInfo': (3, ['const RTL_OSVERSIONINFOEXW *', 'DWORD', 'DWORDLONG'], ['info', 'dwTypeMask', 'dwlConditionMask'], 'NTSTATUS'), 'VerSetConditionMask': (3, ['ULONGLONG', 'DWORD', 'BYTE'], ['condition_mask', 'type_mask', 'condition'], 'ULONGLONG')}


dictRS_ntdll =  {'RtlpUnWaitCriticalSection': 'STATUS_SUCCESS', 'RtlTryEnterCriticalSection': 'True', 'RtlIsCriticalSectionLocked': 'True', 'RtlIsCriticalSectionLockedByThread': 'True', 'RtlFreeHandle': 'True', 'RtlCreateHeap': 'handle', 'RtlDestroyHeap': 'handle', 'RtlReAllocateHeap': 'pointer', 'RtlLockHeap': 'True', 'RtlUnlockHeap': 'True', 'RtlSizeHeap': 'The size of the block', 'RtlValidateHeap': 'True', 'RtlGetProcessHeaps': '10', 'EtwRegisterTraceGuidsW': 'ERROR_SUCCESS', 'RtlIpv4AddressToStringExW': 'STATUS_SUCCESS', 'RtlSetThreadErrorMode': 'STATUS_SUCCESS', 'RtlFindNextForwardRunSet': 'The length of the next set run in the bitmap', 'RtlFindNextForwardRunClear': 'The length of the next clear run in the bitmap', 'RtlFindLastBackwardRunSet': 'The length of the previous set run in the bitmap', 'RtlFindLastBackwardRunClear': 'The length of the previous clear run in the bitmap', 'RtlCreateUnicodeString': 'True', 'RtlCreateUnicodeStringFromAsciiz': 'True', 'RtlUnicodeStringToOemString': 'STATUS_SUCCESS', 'RtlGUIDFromString': 'STATUS_SUCCESS', 'RtlStringFromGUID': 'STATUS_SUCCESS', 'RtlInitializeSid': 'True', 'RtlCreateSecurityDescriptor': 'STATUS_SUCCESS', 'RtlCopySecurityDescriptor': 'STATUS_SUCCESS', 'RtlValidSecurityDescriptor': 'STATUS_SUCCESS', 'RtlAdjustPrivilege': 'STATUS_SUCCESS', 'RtlImpersonateSelf': 'STATUS_SUCCESS', 'RtlQueueWorkItem': 'STATUS_SUCCESS', 'RtlSetIoCompletionCallback': 'STATUS_SUCCESS', 'RtlCreateTimerQueue': 'STATUS_SUCCESS', 'RtlDeleteTimerQueueEx': 'STATUS_SUCCESS', 'RtlCreateTimer': 'STATUS_SUCCESS', 'RtlUpdateTimer': 'STATUS_SUCCESS', 'RtlDeleteTimer': 'STATUS_SUCCESS', 'RtlRegisterWait': 'STATUS_SUCCESS', 'RtlDeregisterWaitEx': 'STATUS_SUCCESS', 'RtlDeregisterWait': 'STATUS_SUCCESS', 'RtlTimeFieldsToTime': 'True', 'RtlLocalTimeToSystemTime': 'STATUS_SUCCESS', 'RtlSystemTimeToLocalTime': 'STATUS_SUCCESS', 'RtlQueryTimeZoneInformation': 'STATUS_SUCCESS', 'RtlQueryDynamicTimeZoneInformation': 'STATUS_SUCCESS', 'RtlSetTimeZoneInformation': 'STATUS_SUCCESS'}


dict4_ole32 =  {'CreateAntiMoniker': (1, ['IMoniker *'], ['*moniker'], 'HRESULT'), 'CreateBindCtx': (2, ['DWORD', 'IBindCtx *'], ['reserved', '*bind_context'], 'HRESULT'), 'BindMoniker': (4, ['LPMONIKER', 'DWORD', 'REFIID', 'LPVOID *'], ['pmk', 'grfOpt', 'riid', 'ppvResult'], 'HRESULT'), 'CreateClassMoniker': (2, ['REFCLSID', 'IMoniker *'], ['rclsid', '*moniker'], 'HRESULT'), 'OleSetClipboard': (1, ['IDataObject*'], ['data'], 'HRESULT'), 'OleGetClipboard': (1, ['IDataObject *'], ['*obj'], 'HRESULT'), 'OleFlushClipboard': (0, [], [], 'HRESULT'), 'OleIsCurrentClipboard': (1, ['IDataObject *'], ['data'], 'HRESULT'), 'CoBuildVersion': (0, [], [], 'DWORD'), 'CoInitialize': (1, ['LPVOID'], ['lpReserved'], 'HRESULT'), 'CoLoadLibrary': (2, ['LPOLESTR', 'BOOL'], ['lpszLibName', 'bAutoFree'], 'HINSTANCE'), 'CoFreeLibrary': (1, ['HINSTANCE'], ['hLibrary'], 'void'), 'CoFreeAllLibraries': (0, [], [], 'void'), 'CoGetState': (1, ['IUnknown **'], ['ppv'], 'HRESULT'), 'CoSetState': (1, ['IUnknown *'], ['pv'], 'HRESULT'), 'CoTreatAsClass': (2, ['REFCLSID', 'REFCLSID'], ['clsidOld', 'clsidNew'], 'HRESULT'), 'CoIsOle1Class': (1, ['REFCLSID'], ['clsid'], 'BOOL'), 'IsEqualGUID': (2, ['REFGUID', 'REFGUID'], ['rguid1', 'rguid2'], 'BOOL'), 'CoAllowSetForegroundWindow': (2, ['IUnknown *', 'void *'], ['pUnk', 'pvReserved'], 'HRESULT'), 'CoGetObject': (4, ['LPCWSTR', 'BIND_OPTS *', 'REFIID', 'void *'], ['pszName', 'pBindOptions', 'riid', '*ppv'], 'HRESULT'), 'DllMain': (3, ['HINSTANCE', 'DWORD', 'LPVOID'], ['hinstDLL', 'fdwReason', 'reserved'], 'BOOL'), 'DllRegisterServer': (0, [], [], 'HRESULT'), 'DllUnregisterServer': (0, [], [], 'HRESULT'), 'CreateGenericComposite': (3, ['IMoniker *', 'IMoniker *', 'IMoniker *'], ['left', 'right', '*composite'], 'HRESULT'), 'MonikerCommonPrefixWith': (3, ['IMoniker*', 'IMoniker*', 'IMoniker**'], ['pmkThis', 'pmkOther', 'ppmkCommon'], 'HRESULT'), 'CreateDataCache': (4, ['LPUNKNOWN', 'REFCLSID ', 'REFIID   ', 'LPVOID*  '], ['pUnkOuter', 'rclsid', 'riid', 'ppvObj'], 'HRESULT'), 'OleCreateEmbeddingHelper': (6, ['REFCLSID ', 'LPUNKNOWN', 'DWORD    ', 'IClassFactory *', 'REFIID   ', 'LPVOID*  '], ['clsid', 'pUnkOuter', 'flags', 'pCF', 'riid', 'ppvObj'], 'HRESULT'), 'OleCreateDefaultHandler': (4, ['REFCLSID', 'LPUNKNOWN', 'REFIID', 'LPVOID*'], ['clsid', 'pUnkOuter', 'riid', 'ppvObj'], 'HRESULT'), 'CreateFileMoniker': (2, ['LPCOLESTR', 'IMoniker *'], ['lpszPathName', '*ppmk'], 'HRESULT'), 'CreateItemMoniker': (3, ['const WCHAR *', 'const WCHAR *', 'IMoniker *'], ['delimiter', 'name', '*ret'], 'HRESULT'), 'InternalCoStdMarshalObject': (0, [], [], 'HRESULT'), 'CreateILockBytesOnHGlobal': (3, ['HGLOBAL', 'BOOL', 'ILockBytes *'], ['global', 'delete_on_release', '*ret'], 'HRESULT'), 'GetHGlobalFromILockBytes': (2, ['ILockBytes*', 'HGLOBAL*'], ['iface', 'phglobal'], 'HRESULT'), 'InternalIsProcessInitialized': (0, [], [], 'BOOL'), 'InternalIrotRegister': (0, [], [], 'HRESULT'), 'InternalIrotIsRunning': (0, [], [], 'HRESULT'), 'InternalIrotGetObject': (0, [], [], 'HRESULT'), 'InternalIrotNoteChangeTime': (0, [], [], 'HRESULT'), 'InternalIrotGetTimeOfLastChange': (0, [], [], 'HRESULT'), 'InternalIrotEnumRunning': (0, [], [], 'HRESULT'), 'InternalIrotRevoke': (0, [], [], 'HRESULT'), 'GetRunningObjectTable': (2, ['DWORD', 'IRunningObjectTable *'], ['reserved', '*ret'], 'HRESULT'), 'DestroyRunningObjectTable': (0, [], [], 'void'), 'MkParseDisplayName': (4, ['LPBC', 'LPCOLESTR', 'LPDWORD', 'LPMONIKER *'], ['pbc', 'szDisplayName', 'pchEaten', 'ppmk'], 'HRESULT'), 'GetClassFile': (2, ['LPCOLESTR', 'CLSID *'], ['filePathName', 'pclsid'], 'HRESULT'), 'OleBuildVersion': (0, [], [], 'DWORD'), 'OleInitializeWOW': (2, ['DWORD', 'DWORD'], ['x', 'y'], 'HRESULT'), 'RegisterDragDrop': (2, ['HWND', 'LPDROPTARGET'], ['hwnd', 'pDropTarget'], 'HRESULT'), 'RevokeDragDrop': (1, ['HWND'], ['hwnd'], 'HRESULT'), 'OleRegGetUserType': (3, ['REFCLSID', 'DWORD', 'LPOLESTR *'], ['clsid', 'form', 'usertype'], 'HRESULT'), 'OleQueryLinkFromData': (1, ['IDataObject*'], ['pSrcDataObject'], 'HRESULT'), 'OleRegGetMiscStatus': (3, ['REFCLSID', 'DWORD   ', 'DWORD*  '], ['clsid', 'dwAspect', 'pdwStatus'], 'HRESULT'), 'OleSetContainedObject': (2, ['LPUNKNOWN', 'BOOL     '], ['pUnknown', 'fContained'], 'HRESULT'), 'OleLoad': (4, ['LPSTORAGE      ', 'REFIID         ', 'LPOLECLIENTSITE', 'LPVOID*        '], ['pStg', 'riid', 'pClientSite', 'ppvObj'], 'HRESULT'), 'OleSave': (3, ['LPPERSISTSTORAGE', 'LPSTORAGE       ', 'BOOL            '], ['pPS', 'pStg', 'fSameAsLoad'], 'HRESULT'), 'OleLockRunning': (3, ['LPUNKNOWN', 'BOOL', 'BOOL'], ['pUnknown', 'fLock', 'fLastUnlockCloses'], 'HRESULT'), 'OleCreateMenuDescriptor': (2, ['HMENU               ', 'LPOLEMENUGROUPWIDTHS'], ['hmenuCombined', 'lpMenuWidths'], 'HOLEMENU'), 'OleDestroyMenuDescriptor': (1, ['HOLEMENU'], ['hmenuDescriptor'], 'HRESULT'), 'OleSetMenuDescriptor': (5, ['HOLEMENU              ', 'HWND                  ', 'HWND                  ', 'LPOLEINPLACEFRAME       ', 'LPOLEINPLACEACTIVEOBJECT'], ['hOleMenu', 'hwndFrame', 'hwndActiveObject', 'lpFrame', 'lpActiveObject'], 'HRESULT'), 'IsAccelerator': (4, ['HACCEL', 'int', 'LPMSG', 'WORD*'], ['hAccel', 'cAccelEntries', 'lpMsg', 'lpwCmd'], 'BOOL'), 'ReleaseStgMedium': (1, ['STGMEDIUM*'], ['pmedium'], 'void'), 'OleDraw': (4, ['IUnknown *', 'DWORD', 'HDC', 'LPCRECT'], ['pUnk', 'dwAspect', 'hdcDraw', 'rect'], 'HRESULT'), 'OleCreate': (7, ['REFCLSID', 'REFIID', 'DWORD', 'LPFORMATETC', 'LPOLECLIENTSITE', 'LPSTORAGE', 'LPVOID*'], ['rclsid', 'riid', 'renderopt', 'pFormatEtc', 'pClientSite', 'pStg', 'ppvObj'], 'HRESULT'), 'OleGetAutoConvert': (2, ['REFCLSID', 'LPCLSID'], ['clsidOld', 'pClsidNew'], 'HRESULT'), 'OleSetAutoConvert': (2, ['REFCLSID', 'REFCLSID'], ['clsidOld', 'clsidNew'], 'HRESULT'), 'OleDoAutoConvert': (2, ['LPSTORAGE', 'LPCLSID'], ['pStg', 'pClsidNew'], 'HRESULT'), 'OleIsRunning': (1, ['LPOLEOBJECT'], ['object'], 'BOOL'), 'OleNoteObjectVisible': (2, ['LPUNKNOWN', 'BOOL'], ['pUnknown', 'bVisible'], 'HRESULT'), 'PropSysAllocString': (1, ['LPCOLESTR'], ['str'], 'BSTR'), 'PropSysFreeString': (1, ['LPOLESTR'], ['str'], 'void'), 'OleQueryCreateFromData': (1, ['IDataObject *'], ['data'], 'HRESULT'), 'OleCreateFromDataEx': (12, ['IDataObject *', 'REFIID', 'DWORD', 'DWORD', 'ULONG', 'DWORD *', 'FORMATETC *', 'IAdviseSink *', 'DWORD *', 'IOleClientSite *', 'IStorage *', 'void *'], ['data', 'iid', 'flags', 'renderopt', 'num_cache_fmts', 'adv_flags', 'cache_fmts', 'sink', 'conns', 'client_site', 'stg', '*obj'], 'HRESULT'), 'OleCreateFromData': (7, ['IDataObject *', 'REFIID', 'DWORD', 'FORMATETC *', 'IOleClientSite *', 'IStorage *', 'void *'], ['data', 'iid', 'renderopt', 'fmt', 'client_site', 'stg', '*obj'], 'HRESULT'), 'OleCreateLinkFromData': (7, ['IDataObject *', 'REFIID', 'DWORD', 'FORMATETC *', 'IOleClientSite *', 'IStorage *', 'void *'], ['data', 'iid', 'renderopt', 'fmt', 'client_site', 'stg', '*obj'], 'HRESULT'), 'OleCreateStaticFromData': (7, ['IDataObject *', 'REFIID', 'DWORD', 'FORMATETC *', 'IOleClientSite *', 'IStorage *', 'void *'], ['data', 'iid', 'renderopt', 'fmt', 'client_site', 'stg', '*obj'], 'HRESULT'), 'OleCreateFromFileEx': (13, ['REFCLSID', 'const OLECHAR *', 'REFIID', 'DWORD', 'DWORD', 'ULONG', 'DWORD *', 'FORMATETC *', 'IAdviseSink *', 'DWORD *', 'IOleClientSite *', 'IStorage *', 'void *'], ['clsid', 'filename', 'iid', 'flags', 'renderopt', 'num_fmts', 'adv_flags', 'fmts', 'sink', 'conns', 'client_site', 'stg', '*obj'], 'HRESULT'), 'OleCreateFromFile': (8, ['REFCLSID', 'const OLECHAR *', 'REFIID', 'DWORD', 'FORMATETC *', 'IOleClientSite *', 'IStorage *', 'void *'], ['clsid', 'filename', 'iid', 'renderopt', 'fmt', 'client_site', 'storage', '*obj'], 'HRESULT'), 'OleDuplicateData': (3, ['HANDLE', 'CLIPFORMAT', 'UINT'], ['hSrc', 'cfFormat', 'uiFlags'], 'HANDLE'), 'OleCreateLinkToFile': (7, ['LPCOLESTR', 'REFIID', 'DWORD', 'LPFORMATETC', 'LPOLECLIENTSITE', 'LPSTORAGE', 'LPVOID*'], ['lpszFileName', 'riid', 'renderopt', 'lpFormatEtc', 'pClientSite', 'pStg', 'ppvObj'], 'HRESULT'), 'OleCreateLink': (7, ['LPMONIKER', 'REFIID', 'DWORD', 'LPFORMATETC', 'LPOLECLIENTSITE', 'LPSTORAGE', 'LPVOID*'], ['pmkLinkSrc', 'riid', 'renderopt', 'lpFormatEtc', 'pClientSite', 'pStg', 'ppvObj'], 'HRESULT'), 'OleGetIconOfClass': (3, ['REFCLSID', 'LPOLESTR', 'BOOL'], ['rclsid', 'lpszLabel', 'fUseTypeAsLabel'], 'HGLOBAL'), 'OleGetIconOfFile': (2, ['LPOLESTR', 'BOOL'], ['path', 'use_file_as_label'], 'HGLOBAL'), 'OleMetafilePictFromIconAndLabel': (4, ['HICON', 'LPOLESTR', 'LPOLESTR', 'UINT'], ['hIcon', 'lpszLabel', 'lpszSourceFile', 'iIconIndex'], 'HGLOBAL'), 'IsValidInterface': (1, ['LPUNKNOWN'], ['punk'], 'BOOL'), 'CreateOleAdviseHolder': (1, ['IOleAdviseHolder *'], ['*ppOAHolder'], 'HRESULT'), 'CreateDataAdviseHolder': (1, ['IDataAdviseHolder *'], ['*ppDAHolder'], 'HRESULT'), 'DllGetClassObject': (3, ['REFCLSID', 'REFIID', 'LPVOID *'], ['rclsid', 'iid', 'ppv'], 'HRESULT'), 'Ole32DllGetClassObject': (3, ['REFCLSID', 'REFIID', 'void *'], ['rclsid', 'riid', '*obj'], 'HRESULT'), 'CreatePointerMoniker': (2, ['IUnknown *', 'IMoniker *'], ['object', '*ret'], 'HRESULT'), 'FmtIdToPropStgName': (2, ['const FMTID *', 'LPOLESTR'], ['rfmtid', 'str'], 'HRESULT'), 'PropStgNameToFmtId': (2, ['const LPOLESTR', 'FMTID *'], ['str', 'rfmtid'], 'HRESULT'), 'StgConvertPropertyToVariant': (4, ['const SERIALIZEDPROPERTYVALUE*', 'USHORT', 'PROPVARIANT*', 'void*'], ['prop', 'CodePage', 'pvar', 'pma'], 'BOOLEAN'), 'StgCreatePropStg': (0, [], [], 'HRESULT'), 'StgOpenPropStg': (5, ['IUnknown *', 'REFFMTID', 'DWORD', 'DWORD', 'IPropertyStorage *'], ['unk', 'fmt', 'flags', 'reserved', '*prop_stg'], 'HRESULT'), 'StgCreateDocfile': (4, ['LPCOLESTR', 'DWORD      ', 'DWORD      ', 'IStorage  *'], ['pwcsName', 'grfMode', 'reserved', '*ppstgOpen'], 'HRESULT'), 'StgCreateStorageEx': (8, ['const WCHAR*', 'DWORD', 'DWORD', 'DWORD', 'STGOPTIONS*', 'void*', 'REFIID', 'void**'], ['pwcsName', 'grfMode', 'stgfmt', 'grfAttrs', 'pStgOptions', 'reserved', 'riid', 'ppObjectOpen'], 'HRESULT'), 'StgCreatePropSetStg': (3, ['IStorage *', 'DWORD', 'IPropertySetStorage *'], ['pstg', 'reserved', '*propset'], 'HRESULT'), 'StgOpenStorageEx': (8, ['const WCHAR*', 'DWORD', 'DWORD', 'DWORD', 'STGOPTIONS*', 'void*', 'REFIID', 'void**'], ['pwcsName', 'grfMode', 'stgfmt', 'grfAttrs', 'pStgOptions', 'reserved', 'riid', 'ppObjectOpen'], 'HRESULT'), 'StgOpenStorage': (6, ['const OLECHAR *', 'IStorage      *', 'DWORD         ', 'SNB           ', 'DWORD         ', 'IStorage     *'], ['pwcsName', 'pstgPriority', 'grfMode', 'snbExclude', 'reserved', '*ppstgOpen'], 'HRESULT'), 'StgCreateDocfileOnILockBytes': (4, ['ILockBytes *', 'DWORD', 'DWORD', 'IStorage**'], ['plkbyt', 'grfMode', 'reserved', 'ppstgOpen'], 'HRESULT'), 'StgOpenStorageOnILockBytes': (6, ['ILockBytes *', 'IStorage *', 'DWORD', 'SNB', 'DWORD', 'IStorage *'], ['plkbyt', 'pstgPriority', 'grfMode', 'snbExclude', 'reserved', '*ppstgOpen'], 'HRESULT'), 'StgSetTimes': (4, ['OLECHAR const *', 'FILETIME const *', 'FILETIME const *', 'FILETIME const *'], ['str', 'pctime', 'patime', 'pmtime'], 'HRESULT'), 'StgIsStorageILockBytes': (1, ['ILockBytes *'], ['plkbyt'], 'HRESULT'), 'WriteClassStg': (2, ['IStorage*', 'REFCLSID'], ['pStg', 'rclsid'], 'HRESULT'), 'ReadClassStg': (2, ['IStorage *', 'CLSID *'], ['pstg', 'pclsid'], 'HRESULT'), 'WriteFmtUserTypeStg': (3, ['LPSTORAGE', 'CLIPFORMAT', 'LPOLESTR'], ['pstg', 'cf', 'lpszUserType'], 'HRESULT'), 'StgIsStorageFile': (1, ['LPCOLESTR'], ['fn'], 'HRESULT'), 'WriteClassStm': (2, ['IStream *', 'REFCLSID'], ['pStm', 'rclsid'], 'HRESULT'), 'ReadClassStm': (2, ['IStream *', 'CLSID *'], ['pStm', 'pclsid'], 'HRESULT'), 'GetConvertStg': (1, ['IStorage *'], ['stg'], 'HRESULT'), 'SetConvertStg': (2, ['IStorage *', 'BOOL'], ['storage', 'convert'], 'HRESULT')}


dictRS_ole32 =  {'BindMoniker': 'S_OK', 'CoInitialize': 'S_OK', 'CoLoadLibrary': 'handle', 'CoGetState': 'S_OK', 'CoSetState': 'S_OK', 'CoTreatAsClass': 'S_OK', 'CoGetObject': 'S_OK', 'CreateDataCache': 'S_OK', 'CreateILockBytesOnHGlobal': 'S_OK', 'GetClassFile': 'S_OK', 'ReadClassStg': 'S_OK', 'WriteClassStm': 'S_OK', 'ReadClassStm': 'S_OK'}


dict4_oleaut32 =  {'CreateStdDispatch': (4, ['IUnknown*', 'void*', 'ITypeInfo*', 'IUnknown**'], ['punkOuter', 'pvThis', 'ptinfo', 'stddisp'], 'HRESULT'), 'LHashValOfNameSysA': (3, ['SYSKIND', 'LCID', 'LPCSTR'], ['skind', 'lcid', 'lpStr'], 'ULONG'), 'LHashValOfNameSys': (3, ['SYSKIND', 'LCID', 'LPCOLESTR'], ['skind', 'lcid', 'str'], 'ULONG'), 'SysStringLen': (1, ['BSTR'], ['str'], 'UINT'), 'SysStringByteLen': (1, ['BSTR'], ['str'], 'UINT'), 'SysAllocString': (1, ['LPCOLESTR'], ['str'], 'BSTR'), 'SysAllocStringLen': (2, ['const OLECHAR *', 'unsigned int'], ['str', 'len'], 'BSTR'), 'SysReAllocStringLen': (3, ['BSTR*', 'const OLECHAR*', 'unsigned int'], ['old', 'str', 'len'], 'int'), 'SysReAllocString': (2, ['LPBSTR', 'LPCOLESTR'], ['old', 'str'], 'INT'), 'SetOaNoCache': (0, [], [], 'void'), 'OaBuildVersion': (0, [], [], 'ULONG'), 'OleTranslateColor': (3, ['OLE_COLOR', 'HPALETTE ', 'COLORREF*'], ['clr', 'hpal', 'pColorRef'], 'HRESULT'), 'CreateProxyFromTypeInfo': (5, ['ITypeInfo *', 'IUnknown *', 'REFIID', 'IRpcProxyBuffer *', 'void *'], ['typeinfo', 'outer', 'iid', '*proxy', '*obj'], 'HRESULT'), 'CreateStubFromTypeInfo': (0, [], [], 'HRESULT'), 'DllGetClassObject': (3, ['REFCLSID', 'REFIID', 'LPVOID *'], ['rclsid', 'iid', 'ppv'], 'HRESULT'), 'DllMain': (3, ['HINSTANCE', 'DWORD', 'LPVOID'], ['hInstDll', 'fdwReason', 'lpvReserved'], 'BOOL'), 'DllRegisterServer': (0, [], [], 'HRESULT'), 'DllUnregisterServer': (0, [], [], 'HRESULT'), 'OleIconToCursor': (2, ['HINSTANCE', 'HICON'], ['hinstExe', 'hIcon'], 'HCURSOR'), 'GetAltMonthNames': (2, ['LCID', 'LPOLESTR *'], ['lcid', '*str'], 'HRESULT'), 'OleCreateFontIndirect': (3, ['LPFONTDESC', 'REFIID    ', 'LPVOID*    '], ['lpFontDesc', 'riid', 'ppvObj'], 'HRESULT'), 'OleCreatePictureIndirect': (4, ['LPPICTDESC', 'REFIID', 'BOOL', 'void *'], ['lpPictDesc', 'riid', 'Own', '*ppvObj'], 'HRESULT'), 'OleLoadPicture': (5, ['LPSTREAM', 'LONG', 'BOOL', 'REFIID', 'LPVOID *'], ['lpstream', 'lSize', 'fRunmode', 'riid', 'ppvObj'], 'HRESULT'), 'OleLoadPictureEx': (8, ['LPSTREAM', 'LONG', 'BOOL', 'REFIID', 'DWORD', 'DWORD', 'DWORD', 'LPVOID *'], ['lpstream', 'lSize', 'fRunmode', 'riid', 'xsiz', 'ysiz', 'flags', 'ppvObj'], 'HRESULT'), 'OleLoadPictureFile': (2, ['VARIANT', 'LPDISPATCH *'], ['file', 'picture'], 'HRESULT'), 'OleSavePictureFile': (2, ['IDispatch *', 'BSTR'], ['picture', 'filename'], 'HRESULT'), 'OleLoadPicturePath': (6, ['LPOLESTR', 'LPUNKNOWN', 'DWORD', 'OLE_COLOR', 'REFIID', 'LPVOID *'], ['szURLorPath', 'punkCaller', 'dwReserved', 'clrReserved', 'riid', 'ppvRet'], 'HRESULT'), 'OleCreatePropertyFrameIndirect': (1, ['LPOCPFIPARAMS'], ['lpParams'], 'HRESULT'), 'OleCreatePropertyFrame': (11, ['HWND', 'UINT', 'UINT', 'LPCOLESTR', 'ULONG', 'LPUNKNOWN*', 'ULONG', 'LPCLSID', 'LCID', 'DWORD', 'LPVOID'], ['hwndOwner', 'x', 'y', 'lpszCaption', 'cObjects', 'ppUnk', 'cPages', 'pPageClsID', 'lcid', 'dwReserved', 'pvReserved'], 'HRESULT'), 'GetRecordInfoFromGuids': (6, ['REFGUID', 'ULONG', 'ULONG', 'LCID', 'REFGUID', 'IRecordInfo**'], ['rGuidTypeLib', 'uVerMajor', 'uVerMinor', 'lcid', 'rGuidTypeInfo', 'ppRecInfo'], 'HRESULT'), 'GetRecordInfoFromTypeInfo': (2, ['ITypeInfo*', 'IRecordInfo**'], ['pTI', 'ppRecInfo'], 'HRESULT'), 'SafeArrayAllocDescriptor': (2, ['UINT', 'SAFEARRAY *'], ['cDims', '*ppsaOut'], 'HRESULT'), 'SafeArrayAllocDescriptorEx': (3, ['VARTYPE', 'UINT', 'SAFEARRAY *'], ['vt', 'cDims', '*ppsaOut'], 'HRESULT'), 'SafeArrayAllocData': (1, ['SAFEARRAY *'], ['psa'], 'HRESULT'), 'SafeArrayDestroyDescriptor': (1, ['SAFEARRAY *'], ['psa'], 'HRESULT'), 'SafeArrayLock': (1, ['SAFEARRAY *'], ['psa'], 'HRESULT'), 'SafeArrayUnlock': (1, ['SAFEARRAY *'], ['psa'], 'HRESULT'), 'SafeArrayPutElement': (3, ['SAFEARRAY *', 'LONG *', 'void *'], ['psa', 'rgIndices', 'pvData'], 'HRESULT'), 'SafeArrayGetElement': (3, ['SAFEARRAY *', 'LONG *', 'void *'], ['psa', 'rgIndices', 'pvData'], 'HRESULT'), 'SafeArrayGetUBound': (3, ['SAFEARRAY *', 'UINT', 'LONG *'], ['psa', 'nDim', 'plUbound'], 'HRESULT'), 'SafeArrayGetLBound': (3, ['SAFEARRAY *', 'UINT', 'LONG *'], ['psa', 'nDim', 'plLbound'], 'HRESULT'), 'SafeArrayGetDim': (1, ['SAFEARRAY *'], ['psa'], 'UINT'), 'SafeArrayGetElemsize': (1, ['SAFEARRAY *'], ['psa'], 'UINT'), 'SafeArrayAccessData': (2, ['SAFEARRAY *', 'void *'], ['psa', '*ppvData'], 'HRESULT'), 'SafeArrayUnaccessData': (1, ['SAFEARRAY *'], ['psa'], 'HRESULT'), 'SafeArrayPtrOfIndex': (3, ['SAFEARRAY *', 'LONG *', 'void *'], ['psa', 'rgIndices', '*ppvData'], 'HRESULT'), 'SafeArrayDestroyData': (1, ['SAFEARRAY *'], ['psa'], 'HRESULT'), 'SafeArrayCopyData': (2, ['SAFEARRAY *', 'SAFEARRAY *'], ['psaSource', 'psaTarget'], 'HRESULT'), 'SafeArrayDestroy': (1, ['SAFEARRAY *'], ['psa'], 'HRESULT'), 'SafeArrayCopy': (2, ['SAFEARRAY *', 'SAFEARRAY *'], ['psa', '*ppsaOut'], 'HRESULT'), 'SafeArrayRedim': (2, ['SAFEARRAY *', 'SAFEARRAYBOUND *'], ['psa', 'psabound'], 'HRESULT'), 'SafeArrayGetVartype': (2, ['SAFEARRAY*', 'VARTYPE*'], ['psa', 'pvt'], 'HRESULT'), 'SafeArraySetRecordInfo': (2, ['SAFEARRAY *', 'IRecordInfo *'], ['psa', 'pRinfo'], 'HRESULT'), 'SafeArrayGetRecordInfo': (2, ['SAFEARRAY *', 'IRecordInfo *'], ['psa', '*pRinfo'], 'HRESULT'), 'SafeArraySetIID': (2, ['SAFEARRAY *', 'REFGUID'], ['psa', 'guid'], 'HRESULT'), 'SafeArrayGetIID': (2, ['SAFEARRAY *', 'GUID *'], ['psa', 'pGuid'], 'HRESULT'), 'VectorFromBstr': (2, ['BSTR', 'SAFEARRAY *'], ['bstr', '*ppsa'], 'HRESULT'), 'BstrFromVector': (2, ['SAFEARRAY *', 'BSTR *'], ['psa', 'pbstr'], 'HRESULT'), 'QueryPathOfRegTypeLib': (5, ['REFGUID', 'WORD', 'WORD', 'LCID', 'LPBSTR'], ['guid', 'wMaj', 'wMin', 'lcid', 'path'], 'HRESULT'), 'CreateTypeLib': (3, ['SYSKIND', 'LPCOLESTR', 'ICreateTypeLib**'], ['syskind', 'szFile', 'ppctlib'], 'HRESULT'), 'LoadTypeLib': (2, ['const OLECHAR *', 'ITypeLib * *'], ['szFile', 'pptLib'], 'HRESULT'), 'LoadRegTypeLib': (5, ['REFGUID', 'WORD', 'WORD', 'LCID', 'ITypeLib *'], ['rguid', 'wVerMajor', 'wVerMinor', 'lcid', '*ppTLib'], 'HRESULT'), 'RegisterTypeLib': (3, ['ITypeLib *', 'const WCHAR *', 'const WCHAR *'], ['ptlib', 'szFullPath', 'szHelpDir'], 'HRESULT'), 'DispCallFunc': (8, ['void*', 'ULONG_PTR', 'CALLCONV', 'VARTYPE', 'UINT', 'VARTYPE*', 'VARIANTARG**', 'VARIANT*'], ['pvInstance', 'oVft', 'cc', 'vtReturn', 'cActuals', 'prgvt', 'prgpvarg', 'pvargResult'], 'HRESULT'), 'CreateTypeLib2': (3, ['SYSKIND', 'LPCOLESTR', 'ICreateTypeLib2**'], ['syskind', 'szFile', 'ppctlib'], 'HRESULT'), 'ClearCustData': (1, ['CUSTDATA *'], ['lpCust'], 'void'), 'VarTokenizeFormatString': (7, ['LPOLESTR', 'LPBYTE', 'int', 'int', 'int', 'LCID', 'int *'], ['lpszFormat', 'rgbTok', 'cbTok', 'nFirstDay', 'nFirstWeek', 'lcid', 'pcbActual'], 'HRESULT'), 'VarFormatFromTokens': (6, ['LPVARIANT', 'LPOLESTR', 'LPBYTE', 'ULONG', 'BSTR *', 'LCID'], ['pVarIn', 'lpszFormat', 'rgbTok', 'dwFlags', 'pbstrOut', 'lcid'], 'HRESULT'), 'VarFormat': (6, ['LPVARIANT', 'LPOLESTR', 'int', 'int', 'ULONG', 'BSTR *'], ['pVarIn', 'lpszFormat', 'nFirstDay', 'nFirstWeek', 'dwFlags', 'pbstrOut'], 'HRESULT'), 'VarFormatDateTime': (4, ['LPVARIANT', 'INT', 'ULONG', 'BSTR *'], ['pVarIn', 'nFormat', 'dwFlags', 'pbstrOut'], 'HRESULT'), 'VarFormatNumber': (7, ['LPVARIANT', 'INT', 'INT', 'INT', 'INT', 'ULONG', 'BSTR *'], ['pVarIn', 'nDigits', 'nLeading', 'nParens', 'nGrouping', 'dwFlags', 'pbstrOut'], 'HRESULT'), 'VarFormatPercent': (7, ['LPVARIANT', 'INT', 'INT', 'INT', 'INT', 'ULONG', 'BSTR *'], ['pVarIn', 'nDigits', 'nLeading', 'nParens', 'nGrouping', 'dwFlags', 'pbstrOut'], 'HRESULT'), 'VarFormatCurrency': (7, ['LPVARIANT', 'INT', 'INT', 'INT', 'INT', 'ULONG', 'BSTR *'], ['pVarIn', 'nDigits', 'nLeading', 'nParens', 'nGrouping', 'dwFlags', 'pbstrOut'], 'HRESULT'), 'VarMonthName': (4, ['INT', 'INT', 'ULONG', 'BSTR *'], ['iMonth', 'fAbbrev', 'dwFlags', 'pbstrOut'], 'HRESULT'), 'VarWeekdayName': (5, ['INT', 'INT', 'INT', 'ULONG', 'BSTR *'], ['iWeekday', 'fAbbrev', 'iFirstDay', 'dwFlags', 'pbstrOut'], 'HRESULT'), 'VariantInit': (1, ['VARIANTARG*'], ['pVarg'], 'void'), 'VariantCopy': (2, ['VARIANTARG*', 'const VARIANTARG*'], ['pvargDest', 'pvargSrc'], 'HRESULT'), 'VariantCopyInd': (2, ['VARIANT*', 'const VARIANTARG*'], ['pvargDest', 'pvargSrc'], 'HRESULT'), 'VariantChangeTypeEx': (5, ['VARIANTARG*', 'const VARIANTARG*', 'LCID', 'USHORT', 'VARTYPE'], ['pvargDest', 'pvargSrc', 'lcid', 'wFlags', 'vt'], 'HRESULT'), 'DosDateTimeToVariantTime': (3, ['USHORT', 'USHORT', 'double *'], ['wDosDate', 'wDosTime', 'pDateOut'], 'INT'), 'VariantTimeToDosDateTime': (3, ['double', 'USHORT *', 'USHORT *'], ['dateIn', 'pwDosDate', 'pwDosTime'], 'INT'), 'SystemTimeToVariantTime': (2, ['LPSYSTEMTIME', 'double *'], ['lpSt', 'pDateOut'], 'INT'), 'VariantTimeToSystemTime': (2, ['double', 'LPSYSTEMTIME'], ['dateIn', 'lpSt'], 'INT'), 'VarDateFromUdateEx': (4, ['UDATE *', 'LCID', 'ULONG', 'DATE *'], ['pUdateIn', 'lcid', 'dwFlags', 'pDateOut'], 'HRESULT'), 'VarDateFromUdate': (3, ['UDATE *', 'ULONG', 'DATE *'], ['pUdateIn', 'dwFlags', 'pDateOut'], 'HRESULT'), 'VarUdateFromDate': (3, ['DATE', 'ULONG', 'UDATE *'], ['dateIn', 'dwFlags', 'lpUdate'], 'HRESULT'), 'VarParseNumFromStr': (5, ['const OLECHAR *', 'LCID', 'ULONG', 'NUMPARSE *', 'BYTE *'], ['lpszStr', 'lcid', 'dwFlags', 'pNumprs', 'rgbDig'], 'HRESULT'), 'VarNumFromParseNum': (4, ['NUMPARSE *', 'BYTE *', 'ULONG', 'VARIANT *'], ['pNumprs', 'rgbDig', 'dwVtBits', 'pVarDst'], 'HRESULT'), 'VarCat': (3, ['LPVARIANT', 'LPVARIANT', 'LPVARIANT'], ['left', 'right', 'out'], 'HRESULT'), 'VarCmp': (4, ['LPVARIANT', 'LPVARIANT', 'LCID', 'DWORD'], ['left', 'right', 'lcid', 'flags'], 'HRESULT'), 'VarAnd': (3, ['LPVARIANT', 'LPVARIANT', 'LPVARIANT'], ['left', 'right', 'result'], 'HRESULT'), 'VarAdd': (3, ['LPVARIANT', 'LPVARIANT', 'LPVARIANT'], ['left', 'right', 'result'], 'HRESULT'), 'VarMul': (3, ['LPVARIANT', 'LPVARIANT', 'LPVARIANT'], ['left', 'right', 'result'], 'HRESULT'), 'VarDiv': (3, ['LPVARIANT', 'LPVARIANT', 'LPVARIANT'], ['left', 'right', 'result'], 'HRESULT'), 'VarSub': (3, ['LPVARIANT', 'LPVARIANT', 'LPVARIANT'], ['left', 'right', 'result'], 'HRESULT'), 'VarOr': (3, ['LPVARIANT', 'LPVARIANT', 'LPVARIANT'], ['pVarLeft', 'pVarRight', 'pVarOut'], 'HRESULT'), 'VarAbs': (2, ['LPVARIANT', 'LPVARIANT'], ['pVarIn', 'pVarOut'], 'HRESULT'), 'VarFix': (2, ['LPVARIANT', 'LPVARIANT'], ['pVarIn', 'pVarOut'], 'HRESULT'), 'VarInt': (2, ['LPVARIANT', 'LPVARIANT'], ['pVarIn', 'pVarOut'], 'HRESULT'), 'VarXor': (3, ['LPVARIANT', 'LPVARIANT', 'LPVARIANT'], ['pVarLeft', 'pVarRight', 'pVarOut'], 'HRESULT'), 'VarEqv': (3, ['LPVARIANT', 'LPVARIANT', 'LPVARIANT'], ['pVarLeft', 'pVarRight', 'pVarOut'], 'HRESULT'), 'VarNeg': (2, ['LPVARIANT', 'LPVARIANT'], ['pVarIn', 'pVarOut'], 'HRESULT'), 'VarNot': (2, ['LPVARIANT', 'LPVARIANT'], ['pVarIn', 'pVarOut'], 'HRESULT'), 'VarRound': (3, ['LPVARIANT', 'int', 'LPVARIANT'], ['pVarIn', 'deci', 'pVarOut'], 'HRESULT'), 'VarIdiv': (3, ['LPVARIANT', 'LPVARIANT', 'LPVARIANT'], ['left', 'right', 'result'], 'HRESULT'), 'VarMod': (3, ['LPVARIANT', 'LPVARIANT', 'LPVARIANT'], ['left', 'right', 'result'], 'HRESULT'), 'VarPow': (3, ['LPVARIANT', 'LPVARIANT', 'LPVARIANT'], ['left', 'right', 'result'], 'HRESULT'), 'VarImp': (3, ['LPVARIANT', 'LPVARIANT', 'LPVARIANT'], ['left', 'right', 'result'], 'HRESULT'), 'VarI1FromUI1': (2, ['BYTE', 'signed char*'], ['bIn', 'pcOut'], 'HRESULT'), 'VarI1FromI2': (2, ['SHORT', 'signed char*'], ['sIn', 'pcOut'], 'HRESULT'), 'VarI1FromI4': (2, ['LONG', 'signed char*'], ['iIn', 'pcOut'], 'HRESULT'), 'VarI1FromR4': (2, ['FLOAT', 'signed char*'], ['fltIn', 'pcOut'], 'HRESULT'), 'VarI1FromR8': (2, ['double', 'signed char*'], ['dblIn', 'pcOut'], 'HRESULT'), 'VarI1FromDate': (2, ['DATE', 'signed char*'], ['dateIn', 'pcOut'], 'HRESULT'), 'VarI1FromCy': (2, ['CY', 'signed char*'], ['cyIn', 'pcOut'], 'HRESULT'), 'VarI1FromStr': (4, ['const OLECHAR*', 'LCID', 'ULONG', 'signed char*'], ['strIn', 'lcid', 'dwFlags', 'pcOut'], 'HRESULT'), 'VarI1FromDisp': (3, ['IDispatch*', 'LCID', 'signed char*'], ['pdispIn', 'lcid', 'pcOut'], 'HRESULT'), 'VarI1FromBool': (2, ['VARIANT_BOOL', 'signed char*'], ['boolIn', 'pcOut'], 'HRESULT'), 'VarI1FromUI2': (2, ['USHORT', 'signed char*'], ['usIn', 'pcOut'], 'HRESULT'), 'VarI1FromUI4': (2, ['ULONG', 'signed char*'], ['ulIn', 'pcOut'], 'HRESULT'), 'VarI1FromDec': (2, ['const DECIMAL *', 'signed char*'], ['pdecIn', 'pcOut'], 'HRESULT'), 'VarI1FromI8': (2, ['LONG64', 'signed char*'], ['llIn', 'pcOut'], 'HRESULT'), 'VarI1FromUI8': (2, ['ULONG64', 'signed char*'], ['ullIn', 'pcOut'], 'HRESULT'), 'VarUI1FromI2': (2, ['SHORT', 'BYTE*'], ['sIn', 'pbOut'], 'HRESULT'), 'VarUI1FromI4': (2, ['LONG', 'BYTE*'], ['iIn', 'pbOut'], 'HRESULT'), 'VarUI1FromR4': (2, ['FLOAT', 'BYTE*'], ['fltIn', 'pbOut'], 'HRESULT'), 'VarUI1FromR8': (2, ['double', 'BYTE*'], ['dblIn', 'pbOut'], 'HRESULT'), 'VarUI1FromCy': (2, ['CY', 'BYTE*'], ['cyIn', 'pbOut'], 'HRESULT'), 'VarUI1FromDate': (2, ['DATE', 'BYTE*'], ['dateIn', 'pbOut'], 'HRESULT'), 'VarUI1FromStr': (4, ['const OLECHAR*', 'LCID', 'ULONG', 'BYTE*'], ['strIn', 'lcid', 'dwFlags', 'pbOut'], 'HRESULT'), 'VarUI1FromDisp': (3, ['IDispatch*', 'LCID', 'BYTE*'], ['pdispIn', 'lcid', 'pbOut'], 'HRESULT'), 'VarUI1FromBool': (2, ['VARIANT_BOOL', 'BYTE*'], ['boolIn', 'pbOut'], 'HRESULT'), 'VarUI1FromI1': (2, ['signed char', 'BYTE*'], ['cIn', 'pbOut'], 'HRESULT'), 'VarUI1FromUI2': (2, ['USHORT', 'BYTE*'], ['usIn', 'pbOut'], 'HRESULT'), 'VarUI1FromUI4': (2, ['ULONG', 'BYTE*'], ['ulIn', 'pbOut'], 'HRESULT'), 'VarUI1FromDec': (2, ['const DECIMAL *', 'BYTE*'], ['pdecIn', 'pbOut'], 'HRESULT'), 'VarUI1FromI8': (2, ['LONG64', 'BYTE*'], ['llIn', 'pbOut'], 'HRESULT'), 'VarUI1FromUI8': (2, ['ULONG64', 'BYTE*'], ['ullIn', 'pbOut'], 'HRESULT'), 'VarI2FromUI1': (2, ['BYTE', 'SHORT*'], ['bIn', 'psOut'], 'HRESULT'), 'VarI2FromI4': (2, ['LONG', 'SHORT*'], ['iIn', 'psOut'], 'HRESULT'), 'VarI2FromR4': (2, ['FLOAT', 'SHORT*'], ['fltIn', 'psOut'], 'HRESULT'), 'VarI2FromR8': (2, ['double', 'SHORT*'], ['dblIn', 'psOut'], 'HRESULT'), 'VarI2FromCy': (2, ['CY', 'SHORT*'], ['cyIn', 'psOut'], 'HRESULT'), 'VarI2FromDate': (2, ['DATE', 'SHORT*'], ['dateIn', 'psOut'], 'HRESULT'), 'VarI2FromStr': (4, ['const OLECHAR*', 'LCID', 'ULONG', 'SHORT*'], ['strIn', 'lcid', 'dwFlags', 'psOut'], 'HRESULT'), 'VarI2FromDisp': (3, ['IDispatch*', 'LCID', 'SHORT*'], ['pdispIn', 'lcid', 'psOut'], 'HRESULT'), 'VarI2FromBool': (2, ['VARIANT_BOOL', 'SHORT*'], ['boolIn', 'psOut'], 'HRESULT'), 'VarI2FromI1': (2, ['signed char', 'SHORT*'], ['cIn', 'psOut'], 'HRESULT'), 'VarI2FromUI2': (2, ['USHORT', 'SHORT*'], ['usIn', 'psOut'], 'HRESULT'), 'VarI2FromUI4': (2, ['ULONG', 'SHORT*'], ['ulIn', 'psOut'], 'HRESULT'), 'VarI2FromDec': (2, ['const DECIMAL *', 'SHORT*'], ['pdecIn', 'psOut'], 'HRESULT'), 'VarI2FromI8': (2, ['LONG64', 'SHORT*'], ['llIn', 'psOut'], 'HRESULT'), 'VarI2FromUI8': (2, ['ULONG64', 'SHORT*'], ['ullIn', 'psOut'], 'HRESULT'), 'VarUI2FromUI1': (2, ['BYTE', 'USHORT*'], ['bIn', 'pusOut'], 'HRESULT'), 'VarUI2FromI2': (2, ['SHORT', 'USHORT*'], ['sIn', 'pusOut'], 'HRESULT'), 'VarUI2FromI4': (2, ['LONG', 'USHORT*'], ['iIn', 'pusOut'], 'HRESULT'), 'VarUI2FromR4': (2, ['FLOAT', 'USHORT*'], ['fltIn', 'pusOut'], 'HRESULT'), 'VarUI2FromR8': (2, ['double', 'USHORT*'], ['dblIn', 'pusOut'], 'HRESULT'), 'VarUI2FromDate': (2, ['DATE', 'USHORT*'], ['dateIn', 'pusOut'], 'HRESULT'), 'VarUI2FromCy': (2, ['CY', 'USHORT*'], ['cyIn', 'pusOut'], 'HRESULT'), 'VarUI2FromStr': (4, ['const OLECHAR*', 'LCID', 'ULONG', 'USHORT*'], ['strIn', 'lcid', 'dwFlags', 'pusOut'], 'HRESULT'), 'VarUI2FromDisp': (3, ['IDispatch*', 'LCID', 'USHORT*'], ['pdispIn', 'lcid', 'pusOut'], 'HRESULT'), 'VarUI2FromBool': (2, ['VARIANT_BOOL', 'USHORT*'], ['boolIn', 'pusOut'], 'HRESULT'), 'VarUI2FromI1': (2, ['signed char', 'USHORT*'], ['cIn', 'pusOut'], 'HRESULT'), 'VarUI2FromUI4': (2, ['ULONG', 'USHORT*'], ['ulIn', 'pusOut'], 'HRESULT'), 'VarUI2FromDec': (2, ['const DECIMAL *', 'USHORT*'], ['pdecIn', 'pusOut'], 'HRESULT'), 'VarUI2FromI8': (2, ['LONG64', 'USHORT*'], ['llIn', 'pusOut'], 'HRESULT'), 'VarUI2FromUI8': (2, ['ULONG64', 'USHORT*'], ['ullIn', 'pusOut'], 'HRESULT'), 'VarI4FromUI1': (2, ['BYTE', 'LONG *'], ['bIn', 'piOut'], 'HRESULT'), 'VarI4FromI2': (2, ['SHORT', 'LONG *'], ['sIn', 'piOut'], 'HRESULT'), 'VarI4FromR4': (2, ['FLOAT', 'LONG *'], ['fltIn', 'piOut'], 'HRESULT'), 'VarI4FromR8': (2, ['double', 'LONG *'], ['dblIn', 'piOut'], 'HRESULT'), 'VarI4FromCy': (2, ['CY', 'LONG *'], ['cyIn', 'piOut'], 'HRESULT'), 'VarI4FromDate': (2, ['DATE', 'LONG *'], ['dateIn', 'piOut'], 'HRESULT'), 'VarI4FromStr': (4, ['const OLECHAR*', 'LCID', 'ULONG', 'LONG *'], ['strIn', 'lcid', 'dwFlags', 'piOut'], 'HRESULT'), 'VarI4FromDisp': (3, ['IDispatch*', 'LCID', 'LONG *'], ['pdispIn', 'lcid', 'piOut'], 'HRESULT'), 'VarI4FromBool': (2, ['VARIANT_BOOL', 'LONG *'], ['boolIn', 'piOut'], 'HRESULT'), 'VarI4FromI1': (2, ['signed char', 'LONG *'], ['cIn', 'piOut'], 'HRESULT'), 'VarI4FromUI2': (2, ['USHORT', 'LONG *'], ['usIn', 'piOut'], 'HRESULT'), 'VarI4FromUI4': (2, ['ULONG', 'LONG *'], ['ulIn', 'piOut'], 'HRESULT'), 'VarI4FromDec': (2, ['const DECIMAL *', 'LONG *'], ['pdecIn', 'piOut'], 'HRESULT'), 'VarI4FromI8': (2, ['LONG64', 'LONG *'], ['llIn', 'piOut'], 'HRESULT'), 'VarI4FromUI8': (2, ['ULONG64', 'LONG *'], ['ullIn', 'piOut'], 'HRESULT'), 'VarUI4FromUI1': (2, ['BYTE', 'ULONG *'], ['bIn', 'pulOut'], 'HRESULT'), 'VarUI4FromI2': (2, ['SHORT', 'ULONG *'], ['sIn', 'pulOut'], 'HRESULT'), 'VarUI4FromI4': (2, ['LONG', 'ULONG *'], ['iIn', 'pulOut'], 'HRESULT'), 'VarUI4FromR4': (2, ['FLOAT', 'ULONG *'], ['fltIn', 'pulOut'], 'HRESULT'), 'VarUI4FromR8': (2, ['double', 'ULONG *'], ['dblIn', 'pulOut'], 'HRESULT'), 'VarUI4FromDate': (2, ['DATE', 'ULONG *'], ['dateIn', 'pulOut'], 'HRESULT'), 'VarUI4FromCy': (2, ['CY', 'ULONG *'], ['cyIn', 'pulOut'], 'HRESULT'), 'VarUI4FromStr': (4, ['const OLECHAR*', 'LCID', 'ULONG', 'ULONG *'], ['strIn', 'lcid', 'dwFlags', 'pulOut'], 'HRESULT'), 'VarUI4FromDisp': (3, ['IDispatch*', 'LCID', 'ULONG *'], ['pdispIn', 'lcid', 'pulOut'], 'HRESULT'), 'VarUI4FromBool': (2, ['VARIANT_BOOL', 'ULONG *'], ['boolIn', 'pulOut'], 'HRESULT'), 'VarUI4FromI1': (2, ['signed char', 'ULONG *'], ['cIn', 'pulOut'], 'HRESULT'), 'VarUI4FromUI2': (2, ['USHORT', 'ULONG *'], ['usIn', 'pulOut'], 'HRESULT'), 'VarUI4FromDec': (2, ['const DECIMAL *', 'ULONG *'], ['pdecIn', 'pulOut'], 'HRESULT'), 'VarUI4FromI8': (2, ['LONG64', 'ULONG *'], ['llIn', 'pulOut'], 'HRESULT'), 'VarUI4FromUI8': (2, ['ULONG64', 'ULONG *'], ['ullIn', 'pulOut'], 'HRESULT'), 'VarI8FromUI1': (2, ['BYTE', 'LONG64*'], ['bIn', 'pi64Out'], 'HRESULT'), 'VarI8FromI2': (2, ['SHORT', 'LONG64*'], ['sIn', 'pi64Out'], 'HRESULT'), 'VarI8FromR4': (2, ['FLOAT', 'LONG64*'], ['fltIn', 'pi64Out'], 'HRESULT'), 'VarI8FromR8': (2, ['double', 'LONG64*'], ['dblIn', 'pi64Out'], 'HRESULT'), 'VarI8FromCy': (2, ['CY', 'LONG64*'], ['cyIn', 'pi64Out'], 'HRESULT'), 'VarI8FromDate': (2, ['DATE', 'LONG64*'], ['dateIn', 'pi64Out'], 'HRESULT'), 'VarI8FromStr': (4, ['const OLECHAR*', 'LCID', 'ULONG', 'LONG64*'], ['strIn', 'lcid', 'dwFlags', 'pi64Out'], 'HRESULT'), 'VarI8FromDisp': (3, ['IDispatch*', 'LCID', 'LONG64*'], ['pdispIn', 'lcid', 'pi64Out'], 'HRESULT'), 'VarI8FromBool': (2, ['VARIANT_BOOL', 'LONG64*'], ['boolIn', 'pi64Out'], 'HRESULT'), 'VarI8FromI1': (2, ['signed char', 'LONG64*'], ['cIn', 'pi64Out'], 'HRESULT'), 'VarI8FromUI2': (2, ['USHORT', 'LONG64*'], ['usIn', 'pi64Out'], 'HRESULT'), 'VarI8FromUI4': (2, ['ULONG', 'LONG64*'], ['ulIn', 'pi64Out'], 'HRESULT'), 'VarI8FromDec': (2, ['const DECIMAL *', 'LONG64*'], ['pdecIn', 'pi64Out'], 'HRESULT'), 'VarI8FromUI8': (2, ['ULONG64', 'LONG64*'], ['ullIn', 'pi64Out'], 'HRESULT'), 'VarUI8FromI8': (2, ['LONG64', 'ULONG64*'], ['llIn', 'pui64Out'], 'HRESULT'), 'VarUI8FromUI1': (2, ['BYTE', 'ULONG64*'], ['bIn', 'pui64Out'], 'HRESULT'), 'VarUI8FromI2': (2, ['SHORT', 'ULONG64*'], ['sIn', 'pui64Out'], 'HRESULT'), 'VarUI8FromR4': (2, ['FLOAT', 'ULONG64*'], ['fltIn', 'pui64Out'], 'HRESULT'), 'VarUI8FromR8': (2, ['double', 'ULONG64*'], ['dblIn', 'pui64Out'], 'HRESULT'), 'VarUI8FromCy': (2, ['CY', 'ULONG64*'], ['cyIn', 'pui64Out'], 'HRESULT'), 'VarUI8FromDate': (2, ['DATE', 'ULONG64*'], ['dateIn', 'pui64Out'], 'HRESULT'), 'VarUI8FromStr': (4, ['const OLECHAR*', 'LCID', 'ULONG', 'ULONG64*'], ['strIn', 'lcid', 'dwFlags', 'pui64Out'], 'HRESULT'), 'VarUI8FromDisp': (3, ['IDispatch*', 'LCID', 'ULONG64*'], ['pdispIn', 'lcid', 'pui64Out'], 'HRESULT'), 'VarUI8FromBool': (2, ['VARIANT_BOOL', 'ULONG64*'], ['boolIn', 'pui64Out'], 'HRESULT'), 'VarUI8FromI1': (2, ['signed char', 'ULONG64*'], ['cIn', 'pui64Out'], 'HRESULT'), 'VarUI8FromUI2': (2, ['USHORT', 'ULONG64*'], ['usIn', 'pui64Out'], 'HRESULT'), 'VarUI8FromUI4': (2, ['ULONG', 'ULONG64*'], ['ulIn', 'pui64Out'], 'HRESULT'), 'VarUI8FromDec': (2, ['const DECIMAL *', 'ULONG64*'], ['pdecIn', 'pui64Out'], 'HRESULT'), 'VarR4FromUI1': (2, ['BYTE', 'float *'], ['bIn', 'pFltOut'], 'HRESULT'), 'VarR4FromI2': (2, ['SHORT', 'float *'], ['sIn', 'pFltOut'], 'HRESULT'), 'VarR4FromI4': (2, ['LONG', 'float *'], ['lIn', 'pFltOut'], 'HRESULT'), 'VarR4FromR8': (2, ['double', 'float *'], ['dblIn', 'pFltOut'], 'HRESULT'), 'VarR4FromCy': (2, ['CY', 'float *'], ['cyIn', 'pFltOut'], 'HRESULT'), 'VarR4FromDate': (2, ['DATE', 'float *'], ['dateIn', 'pFltOut'], 'HRESULT'), 'VarR4FromStr': (4, ['const OLECHAR*', 'LCID', 'ULONG', 'float *'], ['strIn', 'lcid', 'dwFlags', 'pFltOut'], 'HRESULT'), 'VarR4FromDisp': (3, ['IDispatch*', 'LCID', 'float *'], ['pdispIn', 'lcid', 'pFltOut'], 'HRESULT'), 'VarR4FromBool': (2, ['VARIANT_BOOL', 'float *'], ['boolIn', 'pFltOut'], 'HRESULT'), 'VarR4FromI1': (2, ['signed char', 'float *'], ['cIn', 'pFltOut'], 'HRESULT'), 'VarR4FromUI2': (2, ['USHORT', 'float *'], ['usIn', 'pFltOut'], 'HRESULT'), 'VarR4FromUI4': (2, ['ULONG', 'float *'], ['ulIn', 'pFltOut'], 'HRESULT'), 'VarR4FromDec': (2, ['const DECIMAL*', 'float *'], ['pDecIn', 'pFltOut'], 'HRESULT'), 'VarR4FromI8': (2, ['LONG64', 'float *'], ['llIn', 'pFltOut'], 'HRESULT'), 'VarR4FromUI8': (2, ['ULONG64', 'float *'], ['ullIn', 'pFltOut'], 'HRESULT'), 'VarR4CmpR8': (2, ['float', 'double'], ['fltLeft', 'dblRight'], 'HRESULT'), 'VarR8FromUI1': (2, ['BYTE', 'double *'], ['bIn', 'pDblOut'], 'HRESULT'), 'VarR8FromI2': (2, ['SHORT', 'double *'], ['sIn', 'pDblOut'], 'HRESULT'), 'VarR8FromI4': (2, ['LONG', 'double *'], ['lIn', 'pDblOut'], 'HRESULT'), 'VarR8FromR4': (2, ['FLOAT', 'double *'], ['fltIn', 'pDblOut'], 'HRESULT'), 'VarR8FromCy': (2, ['CY', 'double *'], ['cyIn', 'pDblOut'], 'HRESULT'), 'VarR8FromDate': (2, ['DATE', 'double *'], ['dateIn', 'pDblOut'], 'HRESULT'), 'VarR8FromStr': (4, ['const OLECHAR*', 'LCID', 'ULONG', 'double *'], ['strIn', 'lcid', 'dwFlags', 'pDblOut'], 'HRESULT'), 'VarR8FromDisp': (3, ['IDispatch*', 'LCID', 'double *'], ['pdispIn', 'lcid', 'pDblOut'], 'HRESULT'), 'VarR8FromBool': (2, ['VARIANT_BOOL', 'double *'], ['boolIn', 'pDblOut'], 'HRESULT'), 'VarR8FromI1': (2, ['signed char', 'double *'], ['cIn', 'pDblOut'], 'HRESULT'), 'VarR8FromUI2': (2, ['USHORT', 'double *'], ['usIn', 'pDblOut'], 'HRESULT'), 'VarR8FromUI4': (2, ['ULONG', 'double *'], ['ulIn', 'pDblOut'], 'HRESULT'), 'VarR8FromDec': (2, ['const DECIMAL*', 'double *'], ['pDecIn', 'pDblOut'], 'HRESULT'), 'VarR8FromI8': (2, ['LONG64', 'double *'], ['llIn', 'pDblOut'], 'HRESULT'), 'VarR8FromUI8': (2, ['ULONG64', 'double *'], ['ullIn', 'pDblOut'], 'HRESULT'), 'VarR8Pow': (3, ['double', 'double', 'double *'], ['dblLeft', 'dblPow', 'pDblOut'], 'HRESULT'), 'VarR8Round': (3, ['double', 'int', 'double *'], ['dblIn', 'nDig', 'pDblOut'], 'HRESULT'), 'VarCyFromUI1': (2, ['BYTE', 'CY*'], ['bIn', 'pCyOut'], 'HRESULT'), 'VarCyFromI2': (2, ['SHORT', 'CY*'], ['sIn', 'pCyOut'], 'HRESULT'), 'VarCyFromI4': (2, ['LONG', 'CY*'], ['lIn', 'pCyOut'], 'HRESULT'), 'VarCyFromR4': (2, ['FLOAT', 'CY*'], ['fltIn', 'pCyOut'], 'HRESULT'), 'VarCyFromR8': (2, ['double', 'CY*'], ['dblIn', 'pCyOut'], 'HRESULT'), 'VarCyFromDate': (2, ['DATE', 'CY*'], ['dateIn', 'pCyOut'], 'HRESULT'), 'VarCyFromStr': (4, ['const OLECHAR*', 'LCID', 'ULONG', 'CY*'], ['strIn', 'lcid', 'dwFlags', 'pCyOut'], 'HRESULT'), 'VarCyFromDisp': (3, ['IDispatch*', 'LCID', 'CY*'], ['pdispIn', 'lcid', 'pCyOut'], 'HRESULT'), 'VarCyFromBool': (2, ['VARIANT_BOOL', 'CY*'], ['boolIn', 'pCyOut'], 'HRESULT'), 'VarCyFromI1': (2, ['signed char', 'CY*'], ['cIn', 'pCyOut'], 'HRESULT'), 'VarCyFromUI2': (2, ['USHORT', 'CY*'], ['usIn', 'pCyOut'], 'HRESULT'), 'VarCyFromUI4': (2, ['ULONG', 'CY*'], ['ulIn', 'pCyOut'], 'HRESULT'), 'VarCyFromDec': (2, ['const DECIMAL*', 'CY*'], ['pdecIn', 'pCyOut'], 'HRESULT'), 'VarCyFromI8': (2, ['LONG64', 'CY*'], ['llIn', 'pCyOut'], 'HRESULT'), 'VarCyFromUI8': (2, ['ULONG64', 'CY*'], ['ullIn', 'pCyOut'], 'HRESULT'), 'VarCyAdd': (3, ['CY', 'CY', 'CY*'], ['cyLeft', 'cyRight', 'pCyOut'], 'HRESULT'), 'VarCyMul': (3, ['CY', 'CY', 'CY*'], ['cyLeft', 'cyRight', 'pCyOut'], 'HRESULT'), 'VarCyMulI4': (3, ['CY', 'LONG', 'CY*'], ['cyLeft', 'lRight', 'pCyOut'], 'HRESULT'), 'VarCySub': (3, ['CY', 'CY', 'CY*'], ['cyLeft', 'cyRight', 'pCyOut'], 'HRESULT'), 'VarCyAbs': (2, ['CY', 'CY*'], ['cyIn', 'pCyOut'], 'HRESULT'), 'VarCyFix': (2, ['CY', 'CY*'], ['cyIn', 'pCyOut'], 'HRESULT'), 'VarCyInt': (2, ['CY', 'CY*'], ['cyIn', 'pCyOut'], 'HRESULT'), 'VarCyNeg': (2, ['CY', 'CY*'], ['cyIn', 'pCyOut'], 'HRESULT'), 'VarCyRound': (3, ['CY', 'int', 'CY*'], ['cyIn', 'cDecimals', 'pCyOut'], 'HRESULT'), 'VarCyCmp': (2, ['CY', 'CY'], ['cyLeft', 'cyRight'], 'HRESULT'), 'VarCyCmpR8': (2, ['CY', 'double'], ['cyLeft', 'dblRight'], 'HRESULT'), 'VarCyMulI8': (3, ['CY', 'LONG64', 'CY*'], ['cyLeft', 'llRight', 'pCyOut'], 'HRESULT'), 'VarDecFromUI1': (2, ['BYTE', 'DECIMAL*'], ['bIn', 'pDecOut'], 'HRESULT'), 'VarDecFromI2': (2, ['SHORT', 'DECIMAL*'], ['sIn', 'pDecOut'], 'HRESULT'), 'VarDecFromI4': (2, ['LONG', 'DECIMAL*'], ['lIn', 'pDecOut'], 'HRESULT'), 'VarDecFromR4': (2, ['FLOAT', 'DECIMAL*'], ['fltIn', 'pDecOut'], 'HRESULT'), 'VarDecFromR8': (2, ['double', 'DECIMAL*'], ['dblIn', 'pDecOut'], 'HRESULT'), 'VarDecFromDate': (2, ['DATE', 'DECIMAL*'], ['dateIn', 'pDecOut'], 'HRESULT'), 'VarDecFromCy': (2, ['CY', 'DECIMAL*'], ['cyIn', 'pDecOut'], 'HRESULT'), 'VarDecFromStr': (4, ['const OLECHAR*', 'LCID', 'ULONG', 'DECIMAL*'], ['strIn', 'lcid', 'dwFlags', 'pDecOut'], 'HRESULT'), 'VarDecFromDisp': (3, ['IDispatch*', 'LCID', 'DECIMAL*'], ['pdispIn', 'lcid', 'pDecOut'], 'HRESULT'), 'VarDecFromBool': (2, ['VARIANT_BOOL', 'DECIMAL*'], ['bIn', 'pDecOut'], 'HRESULT'), 'VarDecFromI1': (2, ['signed char', 'DECIMAL*'], ['cIn', 'pDecOut'], 'HRESULT'), 'VarDecFromUI2': (2, ['USHORT', 'DECIMAL*'], ['usIn', 'pDecOut'], 'HRESULT'), 'VarDecFromUI4': (2, ['ULONG', 'DECIMAL*'], ['ulIn', 'pDecOut'], 'HRESULT'), 'VarDecFromI8': (2, ['LONG64', 'DECIMAL*'], ['llIn', 'pDecOut'], 'HRESULT'), 'VarDecFromUI8': (2, ['ULONG64', 'DECIMAL*'], ['ullIn', 'pDecOut'], 'HRESULT'), 'VarDecAdd': (3, ['const DECIMAL*', 'const DECIMAL*', 'DECIMAL*'], ['pDecLeft', 'pDecRight', 'pDecOut'], 'HRESULT'), 'VarDecDiv': (3, ['const DECIMAL*', 'const DECIMAL*', 'DECIMAL*'], ['pDecLeft', 'pDecRight', 'pDecOut'], 'HRESULT'), 'VarDecMul': (3, ['const DECIMAL*', 'const DECIMAL*', 'DECIMAL*'], ['pDecLeft', 'pDecRight', 'pDecOut'], 'HRESULT'), 'VarDecSub': (3, ['const DECIMAL*', 'const DECIMAL*', 'DECIMAL*'], ['pDecLeft', 'pDecRight', 'pDecOut'], 'HRESULT'), 'VarDecAbs': (2, ['const DECIMAL*', 'DECIMAL*'], ['pDecIn', 'pDecOut'], 'HRESULT'), 'VarDecFix': (2, ['const DECIMAL*', 'DECIMAL*'], ['pDecIn', 'pDecOut'], 'HRESULT'), 'VarDecInt': (2, ['const DECIMAL*', 'DECIMAL*'], ['pDecIn', 'pDecOut'], 'HRESULT'), 'VarDecNeg': (2, ['const DECIMAL*', 'DECIMAL*'], ['pDecIn', 'pDecOut'], 'HRESULT'), 'VarDecRound': (3, ['const DECIMAL*', 'int', 'DECIMAL*'], ['pDecIn', 'cDecimals', 'pDecOut'], 'HRESULT'), 'VarDecCmp': (2, ['const DECIMAL*', 'const DECIMAL*'], ['pDecLeft', 'pDecRight'], 'HRESULT'), 'VarDecCmpR8': (2, ['const DECIMAL*', 'double'], ['pDecLeft', 'dblRight'], 'HRESULT'), 'VarBoolFromUI1': (2, ['BYTE', 'VARIANT_BOOL *'], ['bIn', 'pBoolOut'], 'HRESULT'), 'VarBoolFromI2': (2, ['SHORT', 'VARIANT_BOOL *'], ['sIn', 'pBoolOut'], 'HRESULT'), 'VarBoolFromI4': (2, ['LONG', 'VARIANT_BOOL *'], ['lIn', 'pBoolOut'], 'HRESULT'), 'VarBoolFromR4': (2, ['FLOAT', 'VARIANT_BOOL *'], ['fltIn', 'pBoolOut'], 'HRESULT'), 'VarBoolFromR8': (2, ['double', 'VARIANT_BOOL *'], ['dblIn', 'pBoolOut'], 'HRESULT'), 'VarBoolFromDate': (2, ['DATE', 'VARIANT_BOOL *'], ['dateIn', 'pBoolOut'], 'HRESULT'), 'VarBoolFromCy': (2, ['CY', 'VARIANT_BOOL *'], ['cyIn', 'pBoolOut'], 'HRESULT'), 'VarBoolFromStr': (4, ['const OLECHAR*', 'LCID', 'ULONG', 'VARIANT_BOOL *'], ['strIn', 'lcid', 'dwFlags', 'pBoolOut'], 'HRESULT'), 'VarBoolFromDisp': (3, ['IDispatch*', 'LCID', 'VARIANT_BOOL *'], ['pdispIn', 'lcid', 'pBoolOut'], 'HRESULT'), 'VarBoolFromI1': (2, ['signed char', 'VARIANT_BOOL *'], ['cIn', 'pBoolOut'], 'HRESULT'), 'VarBoolFromUI2': (2, ['USHORT', 'VARIANT_BOOL *'], ['usIn', 'pBoolOut'], 'HRESULT'), 'VarBoolFromUI4': (2, ['ULONG', 'VARIANT_BOOL *'], ['ulIn', 'pBoolOut'], 'HRESULT'), 'VarBoolFromDec': (2, ['const DECIMAL*', 'VARIANT_BOOL *'], ['pDecIn', 'pBoolOut'], 'HRESULT'), 'VarBoolFromI8': (2, ['LONG64', 'VARIANT_BOOL *'], ['llIn', 'pBoolOut'], 'HRESULT'), 'VarBoolFromUI8': (2, ['ULONG64', 'VARIANT_BOOL *'], ['ullIn', 'pBoolOut'], 'HRESULT'), 'VarBstrFromUI1': (4, ['BYTE', 'LCID', 'ULONG', 'BSTR*'], ['bIn', 'lcid', 'dwFlags', 'pbstrOut'], 'HRESULT'), 'VarBstrFromI2': (4, ['short', 'LCID', 'ULONG', 'BSTR*'], ['sIn', 'lcid', 'dwFlags', 'pbstrOut'], 'HRESULT'), 'VarBstrFromI4': (4, ['LONG', 'LCID', 'ULONG', 'BSTR*'], ['lIn', 'lcid', 'dwFlags', 'pbstrOut'], 'HRESULT'), 'VarBstrFromR4': (4, ['FLOAT', 'LCID', 'ULONG', 'BSTR*'], ['fltIn', 'lcid', 'dwFlags', 'pbstrOut'], 'HRESULT'), 'VarBstrFromR8': (4, ['double', 'LCID', 'ULONG', 'BSTR*'], ['dblIn', 'lcid', 'dwFlags', 'pbstrOut'], 'HRESULT'), 'VarBstrFromCy': (4, ['CY', 'LCID', 'ULONG', 'BSTR *'], ['cyIn', 'lcid', 'dwFlags', 'pbstrOut'], 'HRESULT'), 'VarBstrFromDate': (4, ['DATE', 'LCID', 'ULONG', 'BSTR*'], ['dateIn', 'lcid', 'dwFlags', 'pbstrOut'], 'HRESULT'), 'VarBstrFromBool': (4, ['VARIANT_BOOL', 'LCID', 'ULONG', 'BSTR*'], ['boolIn', 'lcid', 'dwFlags', 'pbstrOut'], 'HRESULT'), 'VarBstrFromI1': (4, ['signed char', 'LCID', 'ULONG', 'BSTR*'], ['cIn', 'lcid', 'dwFlags', 'pbstrOut'], 'HRESULT'), 'VarBstrFromUI2': (4, ['USHORT', 'LCID', 'ULONG', 'BSTR*'], ['usIn', 'lcid', 'dwFlags', 'pbstrOut'], 'HRESULT'), 'VarBstrFromUI4': (4, ['ULONG', 'LCID', 'ULONG', 'BSTR*'], ['ulIn', 'lcid', 'dwFlags', 'pbstrOut'], 'HRESULT'), 'VarBstrFromDec': (4, ['const DECIMAL*', 'LCID', 'ULONG', 'BSTR*'], ['pDecIn', 'lcid', 'dwFlags', 'pbstrOut'], 'HRESULT'), 'VarBstrFromI8': (4, ['LONG64', 'LCID', 'ULONG', 'BSTR*'], ['llIn', 'lcid', 'dwFlags', 'pbstrOut'], 'HRESULT'), 'VarBstrFromUI8': (4, ['ULONG64', 'LCID', 'ULONG', 'BSTR*'], ['ullIn', 'lcid', 'dwFlags', 'pbstrOut'], 'HRESULT'), 'VarBstrFromDisp': (4, ['IDispatch*', 'LCID', 'ULONG', 'BSTR*'], ['pdispIn', 'lcid', 'dwFlags', 'pbstrOut'], 'HRESULT'), 'VarBstrCat': (3, ['BSTR', 'BSTR', 'BSTR *'], ['pbstrLeft', 'pbstrRight', 'pbstrOut'], 'HRESULT'), 'VarBstrCmp': (4, ['BSTR', 'BSTR', 'LCID', 'DWORD'], ['pbstrLeft', 'pbstrRight', 'lcid', 'dwFlags'], 'HRESULT'), 'VarDateFromUI1': (2, ['BYTE', 'DATE*'], ['bIn', 'pdateOut'], 'HRESULT'), 'VarDateFromI2': (2, ['short', 'DATE*'], ['sIn', 'pdateOut'], 'HRESULT'), 'VarDateFromI4': (2, ['LONG', 'DATE*'], ['lIn', 'pdateOut'], 'HRESULT'), 'VarDateFromR4': (2, ['FLOAT', 'DATE*'], ['fltIn', 'pdateOut'], 'HRESULT'), 'VarDateFromR8': (2, ['double', 'DATE*'], ['dblIn', 'pdateOut'], 'HRESULT'), 'VarDateFromDisp': (3, ['IDispatch*', 'LCID', 'DATE*'], ['pdispIn', 'lcid', 'pdateOut'], 'HRESULT'), 'VarDateFromBool': (2, ['VARIANT_BOOL', 'DATE*'], ['boolIn', 'pdateOut'], 'HRESULT'), 'VarDateFromCy': (2, ['CY', 'DATE*'], ['cyIn', 'pdateOut'], 'HRESULT'), 'VarDateFromStr': (4, ['const OLECHAR*', 'LCID', 'ULONG', 'DATE*'], ['strIn', 'lcid', 'dwFlags', 'pdateOut'], 'HRESULT'), 'VarDateFromI1': (2, ['signed char', 'DATE*'], ['cIn', 'pdateOut'], 'HRESULT'), 'VarDateFromUI2': (2, ['USHORT', 'DATE*'], ['uiIn', 'pdateOut'], 'HRESULT'), 'VarDateFromUI4': (2, ['ULONG', 'DATE*'], ['ulIn', 'pdateOut'], 'HRESULT'), 'VarDateFromDec': (2, ['const DECIMAL *', 'DATE*'], ['pdecIn', 'pdateOut'], 'HRESULT'), 'VarDateFromI8': (2, ['LONG64', 'DATE*'], ['llIn', 'pdateOut'], 'HRESULT'), 'VarDateFromUI8': (2, ['ULONG64', 'DATE*'], ['ullIn', 'pdateOut'], 'HRESULT')}


dictRS_oleaut32 =  {'CreateStdDispatch': 'S_OK', 'LHashValOfNameSysA': 'The hash value of the string', 'SysAllocString': 'A BSTR allocated with SysAllocStringLen()', 'SysAllocStringLen': 'A newly allocated BSTR from SysAllocStringByteLen()', 'SysReAllocStringLen': '1', 'SysReAllocString': '1', 'OleTranslateColor': 'S_OK', 'GetRecordInfoFromGuids': 'S_OK', 'SafeArrayAllocDescriptor': 'S_OK', 'SafeArrayAllocDescriptorEx': 'S_OK', 'SafeArrayAllocData': 'S_OK', 'SafeArrayDestroyDescriptor': 'S_OK', 'SafeArrayLock': 'S_OK', 'SafeArrayUnlock': 'S_OK', 'SafeArrayPutElement': 'S_OK', 'SafeArrayGetElement': 'S_OK', 'SafeArrayGetUBound': 'S_OK', 'SafeArrayGetLBound': 'S_OK', 'SafeArrayAccessData': 'S_OK', 'SafeArrayUnaccessData': 'S_OK', 'SafeArrayPtrOfIndex': 'S_OK', 'SafeArrayDestroyData': 'S_OK', 'SafeArrayCopyData': 'S_OK', 'SafeArrayDestroy': 'S_OK', 'SafeArrayCopy': 'S_OK', 'SafeArrayRedim': 'S_OK', 'SafeArrayGetVartype': 'S_OK', 'SafeArraySetRecordInfo': 'S_OK', 'SafeArrayGetRecordInfo': 'S_OK', 'SafeArraySetIID': 'S_OK', 'SafeArrayGetIID': 'S_OK', 'VectorFromBstr': 'S_OK', 'BstrFromVector': 'S_OK', 'QueryPathOfRegTypeLib': 'S_OK', 'CreateTypeLib': 'S_OK', 'LoadTypeLib': 'S_OK', 'LoadRegTypeLib': 'S_OK', 'RegisterTypeLib': 'S_OK', 'VarTokenizeFormatString': 'S_OK', 'VarFormat': 'S_OK', 'VarFormatDateTime': 'S_OK', 'VarFormatNumber': 'S_OK', 'VarFormatPercent': 'S_OK', 'VarFormatCurrency': 'S_OK', 'VarMonthName': 'S_OK', 'VarWeekdayName': 'S_OK', 'VariantCopy': 'S_OK', 'VariantCopyInd': 'S_OK', 'VariantChangeTypeEx': 'S_OK', 'DosDateTimeToVariantTime': 'True', 'VariantTimeToDosDateTime': 'True', 'SystemTimeToVariantTime': 'True', 'VariantTimeToSystemTime': 'True', 'VarDateFromUdateEx': 'S_OK', 'VarDateFromUdate': 'S_OK', 'VarUdateFromDate': 'S_OK', 'VarParseNumFromStr': 'S_OK', 'VarNumFromParseNum': 'S_OK', 'VarCat': 'S_OK', 'VarAnd': 'S_OK', 'VarAdd': 'S_OK', 'VarMul': 'S_OK', 'VarDiv': 'S_OK', 'VarSub': 'S_OK', 'VarOr': 'S_OK', 'VarAbs': 'S_OK', 'VarFix': 'S_OK', 'VarInt': 'S_OK', 'VarXor': 'S_OK', 'VarEqv': 'S_OK', 'VarNeg': 'S_OK', 'VarNot': 'S_OK', 'VarRound': 'S_OK', 'VarIdiv': 'S_OK', 'VarMod': 'S_OK', 'VarPow': 'S_OK', 'VarImp': 'S_OK', 'VarI1FromUI1': 'S_OK', 'VarI1FromI2': 'S_OK', 'VarI1FromI4': 'S_OK', 'VarI1FromR4': 'S_OK', 'VarI1FromR8': 'S_OK', 'VarI1FromDate': 'S_OK', 'VarI1FromCy': 'S_OK', 'VarI1FromStr': 'S_OK', 'VarI1FromDisp': 'S_OK', 'VarI1FromUI2': 'S_OK', 'VarI1FromUI4': 'S_OK', 'VarI1FromDec': 'S_OK', 'VarI1FromI8': 'S_OK', 'VarI1FromUI8': 'S_OK', 'VarUI1FromI2': 'S_OK', 'VarUI1FromI4': 'S_OK', 'VarUI1FromR4': 'S_OK', 'VarUI1FromR8': 'S_OK', 'VarUI1FromCy': 'S_OK', 'VarUI1FromDate': 'S_OK', 'VarUI1FromStr': 'S_OK', 'VarUI1FromDisp': 'S_OK', 'VarUI1FromI1': 'S_OK', 'VarUI1FromUI2': 'S_OK', 'VarUI1FromUI4': 'S_OK', 'VarUI1FromDec': 'S_OK', 'VarUI1FromI8': 'S_OK', 'VarUI1FromUI8': 'S_OK', 'VarI2FromI4': 'S_OK', 'VarI2FromR4': 'S_OK', 'VarI2FromR8': 'S_OK', 'VarI2FromCy': 'S_OK', 'VarI2FromDate': 'S_OK', 'VarI2FromStr': 'S_OK', 'VarI2FromDisp': 'S_OK', 'VarI2FromUI2': 'S_OK', 'VarI2FromUI4': 'S_OK', 'VarI2FromDec': 'S_OK', 'VarI2FromI8': 'S_OK', 'VarI2FromUI8': 'S_OK', 'VarUI2FromI2': 'S_OK', 'VarUI2FromI4': 'S_OK', 'VarUI2FromR4': 'S_OK', 'VarUI2FromR8': 'S_OK', 'VarUI2FromDate': 'S_OK', 'VarUI2FromCy': 'S_OK', 'VarUI2FromStr': 'S_OK', 'VarUI2FromDisp': 'S_OK', 'VarUI2FromI1': 'S_OK', 'VarUI2FromUI4': 'S_OK', 'VarUI2FromDec': 'S_OK', 'VarUI2FromI8': 'S_OK', 'VarUI2FromUI8': 'S_OK', 'VarI4FromI2': 'S_OK', 'VarI4FromR4': 'S_OK', 'VarI4FromR8': 'S_OK', 'VarI4FromCy': 'S_OK', 'VarI4FromDate': 'S_OK', 'VarI4FromStr': 'S_OK', 'VarI4FromDisp': 'S_OK', 'VarI4FromUI4': 'S_OK', 'VarI4FromDec': 'S_OK', 'VarI4FromI8': 'S_OK', 'VarI4FromUI8': 'S_OK', 'VarUI4FromI2': 'S_OK', 'VarUI4FromI4': 'S_OK', 'VarUI4FromR4': 'S_OK', 'VarUI4FromR8': 'S_OK', 'VarUI4FromDate': 'S_OK', 'VarUI4FromCy': 'S_OK', 'VarUI4FromStr': 'S_OK', 'VarUI4FromDisp': 'S_OK', 'VarUI4FromI1': 'S_OK', 'VarUI4FromDec': 'S_OK', 'VarUI4FromI8': 'S_OK', 'VarUI4FromUI8': 'S_OK', 'VarI8FromR4': 'S_OK', 'VarI8FromR8': 'S_OK', 'VarI8FromDate': 'S_OK', 'VarI8FromStr': 'S_OK', 'VarI8FromDisp': 'S_OK', 'VarI8FromDec': 'S_OK', 'VarI8FromUI8': 'S_OK', 'VarUI8FromI8': 'S_OK', 'VarUI8FromR4': 'S_OK', 'VarUI8FromR8': 'S_OK', 'VarUI8FromCy': 'S_OK', 'VarUI8FromDate': 'S_OK', 'VarUI8FromStr': 'S_OK', 'VarUI8FromDisp': 'S_OK', 'VarUI8FromBool': 'S_OK', 'VarUI8FromI1': 'S_OK', 'VarUI8FromDec': 'S_OK', 'VarR4FromR8': 'S_OK', 'VarR4FromDate': 'S_OK', 'VarR4FromStr': 'S_OK', 'VarR4FromDisp': 'S_OK', 'VarR4FromI1': 'S_OK', 'VarR4FromUI2': 'S_OK', 'VarR4FromUI4': 'S_OK', 'VarR4FromDec': 'S_OK', 'VarR8FromStr': 'S_OK', 'VarR8FromDisp': 'S_OK', 'VarR8FromI1': 'S_OK', 'VarR8FromUI2': 'S_OK', 'VarR8FromUI4': 'S_OK', 'VarR8FromDec': 'S_OK', 'VarR8Round': 'S_OK', 'VarCyFromUI1': 'S_OK', 'VarCyFromI2': 'S_OK', 'VarCyFromI4': 'S_OK', 'VarCyFromR4': 'S_OK', 'VarCyFromR8': 'S_OK', 'VarCyFromDate': 'S_OK', 'VarCyFromStr': 'S_OK', 'VarCyFromDisp': 'S_OK', 'VarCyFromBool': 'S_OK', 'VarCyFromI1': 'S_OK', 'VarCyFromUI2': 'S_OK', 'VarCyFromUI4': 'S_OK', 'VarCyFromDec': 'S_OK', 'VarCyFromI8': 'S_OK', 'VarCyFromUI8': 'S_OK', 'VarCyAdd': 'S_OK', 'VarCyMul': 'S_OK', 'VarCyMulI4': 'S_OK', 'VarCySub': 'S_OK', 'VarCyAbs': 'S_OK', 'VarCyFix': 'S_OK', 'VarCyInt': 'S_OK', 'VarCyNeg': 'S_OK', 'VarCyRound': 'S_OK', 'VarCyCmp': 'VARCMP_LT VARCMP_EQ or VARCMP_GT indicating that the value to', 'VarCyCmpR8': 'VARCMP_LT VARCMP_EQ or VARCMP_GT indicating that dblRight is', 'VarCyMulI8': 'S_OK', 'VarDecFromStr': 'S_OK', 'VarDecFromDisp': 'S_OK', 'VarDecAdd': 'S_OK', 'VarDecDiv': 'S_OK', 'VarDecMul': 'S_OK', 'VarDecFix': 'S_OK', 'VarDecInt': 'S_OK', 'VarDecRound': 'S_OK', 'VarDecCmp': 'VARCMP_LT VARCMP_EQ or VARCMP_GT indicating that pDecLeft', 'VarDecCmpR8': 'VARCMP_LT VARCMP_EQ or VARCMP_GT indicating that dblRight', 'VarBoolFromStr': 'S_OK', 'VarBoolFromDisp': 'S_OK', 'VarBoolFromDec': 'S_OK', 'VarBstrFromUI1': 'S_OK', 'VarBstrFromI2': 'S_OK', 'VarBstrFromI4': 'S_OK', 'VarBstrFromR4': 'S_OK', 'VarBstrFromR8': 'S_OK', 'VarBstrFromCy': 'S_OK', 'VarBstrFromDate': 'S_OK', 'VarBstrFromBool': 'S_OK', 'VarBstrFromI1': 'S_OK', 'VarBstrFromUI2': 'S_OK', 'VarBstrFromUI4': 'S_OK', 'VarBstrFromDec': 'S_OK', 'VarBstrFromI8': 'S_OK', 'VarBstrFromUI8': 'S_OK', 'VarBstrFromDisp': 'S_OK', 'VarBstrCat': 'S_OK', 'VarDateFromDisp': 'S_OK', 'VarDateFromStr': 'S_OK', 'VarDateFromI8': 'S_OK', 'VarDateFromUI8': 'S_OK'}


dict4_shell32 =  {'SHAppBarMessage': (2, ['DWORD', 'PAPPBARDATA'], ['msg', 'data'], 'UINT_PTR'), 'SHCreateAssociationRegistration': (2, ['REFIID', 'LPVOID *'], ['riid', 'ppv'], 'HRESULT'), 'SHAssocEnumHandlers': (3, ['const WCHAR *', 'ASSOC_FILTER', 'IEnumAssocHandlers *'], ['extra', 'filter', '*enumhandlers'], 'HRESULT'), 'SHChangeNotifyRegister': (6, ['HWND', 'int', 'LONG', 'UINT', 'int', 'SHChangeNotifyEntry *'], ['hwnd', 'fSources', 'wEventMask', 'uMsg', 'cItems', 'lpItems'], 'ULONG'), 'SHChangeNotifyDeregister': (1, ['ULONG'], ['hNotify'], 'BOOL'), 'SHChangeNotifyUpdateEntryList': (4, ['DWORD', 'DWORD', 'DWORD', 'DWORD'], ['unknown1', 'unknown2', 'unknown3', 'unknown4'], 'BOOL'), 'SHChangeNotify': (4, ['LONG', 'UINT', 'LPCVOID', 'LPCVOID'], ['wEventId', 'uFlags', 'dwItem1', 'dwItem2'], 'void'), 'NTSHChangeNotifyRegister': (6, ['HWND', 'LONG', 'LONG', 'DWORD', 'int', 'SHChangeNotifyEntry *'], ['hwnd', 'events1', 'events2', 'msg', 'count', 'idlist'], 'DWORD'), 'NTSHChangeNotifyDeregister': (1, ['ULONG'], ['x1'], 'DWORD'), 'CallCPLEntry16': (6, ['HMODULE', 'FARPROC', 'DWORD', 'DWORD', 'DWORD', 'DWORD'], ['hMod', 'pFunc', 'dw3', 'dw4', 'dw5', 'dw6'], 'DWORD'), 'ShellDDEInit': (1, ['BOOL'], ['bInit'], 'void'), 'PickIconDlg': (4, ['HWND', 'WCHAR *', 'UINT', 'INT *'], ['hwndOwner', 'path', 'path_len', 'index'], 'INT'), 'SHOpenWithDialog': (2, ['HWND', 'const OPENASINFO *'], ['parent', 'info'], 'HRESULT'), 'RunFileDlgAW': (6, ['HWND', 'HICON', 'LPCVOID', 'LPCVOID', 'LPCVOID', 'UINT'], ['hwndOwner', 'hIcon', 'lpstrDirectory', 'lpstrTitle', 'lpstrDescription', 'uFlags'], 'void'), 'RestartDialogEx': (4, ['HWND', 'LPCWSTR', 'DWORD', 'DWORD'], ['hWndOwner', 'lpwstrReason', 'uFlags', 'uReason'], 'int'), 'RestartDialog': (3, ['HWND', 'LPCWSTR', 'DWORD'], ['hWndOwner', 'lpstrReason', 'uFlags'], 'int'), 'SHMapPIDLToSystemImageListIndex': (3, ['IShellFolder *', 'LPCITEMIDLIST', 'int *'], ['sh', 'pidl', 'pIndex'], 'int'), 'SHMapIDListToImageListIndexAsync': (9, ['IUnknown *', 'IShellFolder *', 'LPCITEMIDLIST', 'UINT', 'void *', 'void *', 'void *', 'int *', 'int *'], ['pts', 'psf', 'pidl', 'flags', 'pfn', 'pvData', 'pvHint', 'piIndex', 'piIndexSel'], 'HRESULT'), 'ExtractIconExW': (5, ['LPCWSTR', 'INT', 'HICON *', 'HICON *', 'UINT'], ['lpszFile', 'nIconIndex', 'phiconLarge', 'phiconSmall', 'nIcons'], 'UINT'), 'ExtractIconExA': (5, ['LPCSTR', 'INT', 'HICON *', 'HICON *', 'UINT'], ['lpszFile', 'nIconIndex', 'phiconLarge', 'phiconSmall', 'nIcons'], 'UINT'), 'ExtractAssociatedIconA': (3, ['HINSTANCE', 'LPSTR', 'LPWORD'], ['hInst', 'lpIconPath', 'lpiIcon'], 'HICON'), 'ExtractAssociatedIconW': (3, ['HINSTANCE', 'LPWSTR', 'LPWORD'], ['hInst', 'lpIconPath', 'lpiIcon'], 'HICON'), 'ExtractAssociatedIconExW': (4, ['HINSTANCE', 'LPWSTR', 'LPWORD', 'LPWORD'], ['hInst', 'lpIconPath', 'lpiIconIdx', 'lpiIconId'], 'HICON'), 'ExtractAssociatedIconExA': (4, ['HINSTANCE', 'LPSTR', 'LPWORD', 'LPWORD'], ['hInst', 'lpIconPath', 'lpiIconIdx', 'lpiIconId'], 'HICON'), 'SHDefExtractIconW': (6, ['LPCWSTR', 'int', 'UINT', 'HICON*', 'HICON*', 'UINT'], ['pszIconFile', 'iIndex', 'uFlags', 'phiconLarge', 'phiconSmall', 'nIconSize'], 'HRESULT'), 'SHDefExtractIconA': (6, ['LPCSTR', 'int', 'UINT', 'HICON*', 'HICON*', 'UINT'], ['pszIconFile', 'iIndex', 'uFlags', 'phiconLarge', 'phiconSmall', 'nIconSize'], 'HRESULT'), 'SHGetIconOverlayIndexA': (2, ['LPCSTR', 'INT'], ['pszIconPath', 'iIconIndex'], 'INT'), 'SHGetIconOverlayIndexW': (2, ['LPCWSTR', 'INT'], ['pszIconPath', 'iIconIndex'], 'INT'), 'SHGetStockIconInfo': (3, ['SHSTOCKICONID', 'UINT', 'SHSTOCKICONINFO *'], ['id', 'flags', 'sii'], 'HRESULT'), 'SHGetImageList': (3, ['int', 'REFIID', 'void *'], ['iImageList', 'riid', '*ppv'], 'HRESULT'), 'Alloc': (0, [], [], 'LPVOID'), 'Free': (0, [], [], 'BOOL'), 'ILGetDisplayNameEx': (4, ['LPSHELLFOLDER', 'LPCITEMIDLIST', 'LPVOID', 'DWORD'], ['psf', 'pidl', 'path', 'type'], 'BOOL'), 'ILGetDisplayName': (2, ['LPCITEMIDLIST', 'LPVOID'], ['pidl', 'path'], 'BOOL'), 'ILFindLastID': (1, ['LPCITEMIDLIST'], ['pidl'], 'LPITEMIDLIST'), 'ILRemoveLastID': (1, ['LPITEMIDLIST'], ['pidl'], 'BOOL'), 'ILCloneFirst': (1, ['LPCITEMIDLIST'], ['pidl'], 'LPITEMIDLIST'), 'SHCloneSpecialIDList': (3, ['HWND', 'DWORD', 'BOOL'], ['hwndOwner', 'nFolder', 'fCreate'], 'LPITEMIDLIST'), 'ILGlobalClone': (1, ['LPCITEMIDLIST'], ['pidl'], 'LPITEMIDLIST'), 'ILIsEqual': (2, ['LPCITEMIDLIST', 'LPCITEMIDLIST'], ['pidl1', 'pidl2'], 'BOOL'), 'ILIsParent': (3, ['LPCITEMIDLIST', 'LPCITEMIDLIST', 'BOOL'], ['pidlParent', 'pidlChild', 'bImmediate'], 'BOOL'), 'ILFindChild': (2, ['LPCITEMIDLIST', 'LPCITEMIDLIST'], ['pidl1', 'pidl2'], 'LPITEMIDLIST'), 'ILCombine': (2, ['LPCITEMIDLIST', 'LPCITEMIDLIST'], ['pidl1', 'pidl2'], 'LPITEMIDLIST'), 'SHGetRealIDL': (3, ['LPSHELLFOLDER', 'LPCITEMIDLIST', 'LPITEMIDLIST *'], ['lpsf', 'pidlSimple', 'pidlReal'], 'HRESULT'), 'SHLogILFromFSIL': (1, ['LPITEMIDLIST'], ['pidl'], 'LPITEMIDLIST'), 'ILGetSize': (1, ['LPCITEMIDLIST'], ['pidl'], 'UINT'), 'ILGetNext': (1, ['LPCITEMIDLIST'], ['pidl'], 'LPITEMIDLIST'), 'ILAppendID': (3, ['LPITEMIDLIST', 'LPCSHITEMID', 'BOOL'], ['pidl', 'item', 'bEnd'], 'LPITEMIDLIST'), 'ILFree': (1, ['LPITEMIDLIST'], ['pidl'], 'void'), 'ILGlobalFree': (1, ['LPITEMIDLIST'], ['pidl'], 'void'), 'SHSimpleIDListFromPathAW': (1, ['LPCVOID'], ['lpszPath'], 'LPITEMIDLIST'), 'SHGetDataFromIDListA': (5, ['LPSHELLFOLDER', 'LPCITEMIDLIST', 'int', 'LPVOID', 'int'], ['psf', 'pidl', 'nFormat', 'dest', 'len'], 'HRESULT'), 'SHGetDataFromIDListW': (5, ['LPSHELLFOLDER', 'LPCITEMIDLIST', 'int', 'LPVOID', 'int'], ['psf', 'pidl', 'nFormat', 'dest', 'len'], 'HRESULT'), 'SHGetPathFromIDListA': (2, ['LPCITEMIDLIST', 'LPSTR'], ['pidl', 'pszPath'], 'BOOL'), 'SHGetPathFromIDListW': (2, ['LPCITEMIDLIST', 'LPWSTR'], ['pidl', 'pszPath'], 'BOOL'), 'SHGetPathFromIDListEx': (4, ['LPCITEMIDLIST', 'WCHAR *', 'DWORD', 'GPFIDL_FLAGS'], ['pidl', 'path', 'path_size', 'flags'], 'BOOL'), 'SHBindToParent': (4, ['LPCITEMIDLIST', 'REFIID', 'LPVOID *', 'LPCITEMIDLIST *'], ['pidl', 'riid', 'ppv', 'ppidlLast'], 'HRESULT'), 'SHBindToObject': (5, ['IShellFolder *', 'LPCITEMIDLIST', 'IBindCtx *', 'REFIID', 'void *'], ['psf', 'pidl', 'pbc', 'riid', '*ppv'], 'HRESULT'), 'SHParseDisplayName': (5, ['LPCWSTR', 'IBindCtx *', 'LPITEMIDLIST *', 'SFGAOF', 'SFGAOF *'], ['name', 'bindctx', 'pidlist', 'attr_in', 'attr_out'], 'HRESULT'), 'SHGetNameFromIDList': (3, ['PCIDLIST_ABSOLUTE', 'SIGDN', 'PWSTR *'], ['pidl', 'sigdnName', 'ppszName'], 'HRESULT'), 'SHGetIDListFromObject': (2, ['IUnknown *', 'PIDLIST_ABSOLUTE *'], ['punk', 'ppidl'], 'HRESULT'), 'SHQueryRecycleBinA': (2, ['LPCSTR', 'LPSHQUERYRBINFO'], ['pszRootPath', 'pSHQueryRBInfo'], 'HRESULT'), 'SHQueryRecycleBinW': (0, [], [], 'HRESULT'), 'SHEmptyRecycleBinA': (0, [], [], 'HRESULT'), 'SHEmptyRecycleBinW': (0, [], [], 'HRESULT'), 'SHUpdateRecycleBinIcon': (0, [], [], 'HRESULT'), 'SHGetFileInfoW': (5, ['LPCWSTR', 'DWORD', 'SHFILEINFOW *', 'UINT', 'UINT'], ['path', 'dwFileAttributes', 'psfi', 'sizeofpsfi', 'flags'], 'DWORD_PTR'), 'SHGetFileInfoA': (5, ['LPCSTR', 'DWORD', 'SHFILEINFOA *', 'UINT', 'UINT'], ['path', 'dwFileAttributes', 'psfi', 'sizeofpsfi', 'flags'], 'DWORD_PTR'), 'DuplicateIcon': (2, ['HINSTANCE', 'HICON'], ['hInstance', 'hIcon'], 'HICON'), 'ExtractIconA': (3, ['HINSTANCE', 'const char *', 'UINT'], ['hInstance', 'file', 'nIconIndex'], 'HICON'), 'ExtractIconW': (3, ['HINSTANCE', 'LPCWSTR', 'UINT'], ['hInstance', 'lpszFile', 'nIconIndex'], 'HICON'), 'SHCreateFileExtractIconW': (0, [], [], 'HRESULT'), 'SHGetPropertyStoreForWindow': (3, ['HWND', 'REFIID', 'void *'], ['hwnd', 'riid', '*ppv'], 'HRESULT'), 'ShellAboutA': (4, ['HWND', 'LPCSTR', 'LPCSTR', 'HICON'], ['hWnd', 'szApp', 'szOtherStuff', 'hIcon'], 'BOOL'), 'ShellAboutW': (4, ['HWND', 'LPCWSTR', 'LPCWSTR', 'HICON'], ['hWnd', 'szApp', 'szOtherStuff', 'hIcon'], 'BOOL'), 'FreeIconList': (1, ['DWORD'], ['dw'], 'void'), 'SHLoadNonloadedIconOverlayIdentifiers': (0, [], [], 'HRESULT'), 'DllMain': (3, ['HINSTANCE', 'DWORD', 'LPVOID'], ['hinstDLL', 'fdwReason', 'fImpLoad'], 'BOOL'), 'DllInstall': (2, ['BOOL', 'LPCWSTR'], ['bInstall', 'cmdline'], 'HRESULT'), 'DllRegisterServer': (0, [], [], 'HRESULT'), 'DllUnregisterServer': (0, [], [], 'HRESULT'), 'ExtractVersionResource16W': (2, ['LPWSTR', 'DWORD'], ['s', 'd'], 'BOOL'), 'InitNetworkAddressControl': (0, [], [], 'BOOL'), 'SHGetLocalizedName': (4, ['LPCWSTR', 'LPWSTR', 'UINT', 'INT *'], ['path', 'module', 'size', 'res'], 'HRESULT'), 'SHSetUnreadMailCountW': (3, ['LPCWSTR', 'DWORD', 'LPCWSTR'], ['mailaddress', 'count', 'executecommand'], 'HRESULT'), 'SHEnumerateUnreadMailAccountsW': (4, ['HKEY', 'DWORD', 'LPWSTR', 'INT'], ['user', 'idx', 'mailaddress', 'mailaddresslen'], 'HRESULT'), 'SHQueryUserNotificationState': (1, ['QUERY_USER_NOTIFICATION_STATE *'], ['state'], 'HRESULT'), 'SHCreateDataObject': (6, ['PCIDLIST_ABSOLUTE', 'UINT', 'PCUITEMID_CHILD_ARRAY', 'IDataObject *', 'REFIID', 'void *'], ['pidl_folder', 'count', 'pidl_array', 'object', 'riid', '*ppv'], 'HRESULT'), 'SHCreateShellItem': (0, [], [], 'HRESULT'), 'SHCreateItemFromParsingName': (0, [], [], 'HRESULT'), 'SHCreateItemFromRelativeName': (0, [], [], 'HRESULT'), 'SHCreateItemFromIDList': (0, [], [], 'HRESULT'), 'SHCreateItemInKnownFolder': (0, [], [], 'HRESULT'), 'SHGetItemFromDataObject': (0, [], [], 'HRESULT'), 'SHGetItemFromObject': (3, ['IUnknown *', 'REFIID', 'void *'], ['punk', 'riid', '*ppv'], 'HRESULT'), 'SHCreateShellItemArray': (5, ['PCIDLIST_ABSOLUTE', 'IShellFolder *', 'UINT', 'PCUITEMID_CHILD_ARRAY', 'IShellItemArray *'], ['pidlParent', 'psf', 'cidl', 'ppidl', '*ppsiItemArray'], 'HRESULT'), 'SHCreateShellItemArrayFromShellItem': (3, ['IShellItem *', 'REFIID', 'void *'], ['item', 'riid', '*ppv'], 'HRESULT'), 'SHCreateShellItemArrayFromDataObject': (0, [], [], 'HRESULT'), 'SHCreateShellItemArrayFromIDLists': (0, [], [], 'HRESULT'), 'SHGetPropertyStoreFromParsingName': (0, [], [], 'HRESULT'), 'SHStringFromGUIDW': (0, [], [], 'INT'), 'SHCoCreateInstance': (5, ['LPCWSTR', 'const CLSID *', 'LPUNKNOWN', 'REFIID', 'LPVOID *'], ['aclsid', 'clsid', 'pUnkOuter', 'refiid', 'ppv'], 'HRESULT'), 'DllGetClassObject': (3, ['REFCLSID', 'REFIID', 'LPVOID *'], ['rclsid', 'iid', 'ppv'], 'HRESULT'), 'SHGetMalloc': (1, ['LPMALLOC *'], ['lpmal'], 'HRESULT'), 'SHAlloc': (1, ['DWORD'], ['len'], 'LPVOID'), 'SHFree': (1, ['LPVOID'], ['pv'], 'void'), 'SHGetDesktopFolder': (1, ['IShellFolder *'], ['*psf'], 'HRESULT'), 'DragAcceptFiles': (2, ['HWND', 'BOOL'], ['hWnd', 'b'], 'void'), 'DragFinish': (1, ['HDROP'], ['h'], 'void'), 'DragQueryPoint': (2, ['HDROP', 'POINT *'], ['hDrop', 'p'], 'BOOL'), 'DragQueryFileA': (4, ['HDROP', 'UINT', 'LPSTR', 'UINT'], ['hDrop', 'lFile', 'lpszFile', 'lLength'], 'UINT'), 'DragQueryFileW': (4, ['HDROP', 'UINT', 'LPWSTR', 'UINT'], ['hDrop', 'lFile', 'lpszwFile', 'lLength'], 'UINT'), 'SHPropStgCreate': (8, ['IPropertySetStorage *', 'REFFMTID', 'const CLSID *', 'DWORD', 'DWORD', 'DWORD', 'IPropertyStorage *', 'UINT *'], ['psstg', 'fmtid', 'pclsid', 'grfFlags', 'grfMode', 'dwDisposition', '*ppstg', 'puCodePage'], 'HRESULT'), 'SHPropStgReadMultiple': (5, ['IPropertyStorage *', 'UINT', 'ULONG', 'const PROPSPEC *', 'PROPVARIANT *'], ['pps', 'uCodePage', 'cpspec', 'rgpspec', 'rgvar'], 'HRESULT'), 'SHPropStgWriteMultiple': (6, ['IPropertyStorage *', 'UINT *', 'ULONG', 'const PROPSPEC *', 'PROPVARIANT *', 'PROPID'], ['pps', 'uCodePage', 'cpspec', 'rgpspec', 'rgvar', 'propidNameFirst'], 'HRESULT'), 'SHCreateQueryCancelAutoPlayMoniker': (1, ['IMoniker *'], ['*moniker'], 'HRESULT'), 'CreateMRUListA': (1, ['LPCREATEMRULISTA'], ['lpcml'], 'HANDLE'), 'ParseFieldA': (4, ['LPCSTR', 'DWORD', 'LPSTR', 'DWORD'], ['src', 'nField', 'dst', 'len'], 'DWORD'), 'ParseFieldW': (4, ['LPCWSTR', 'DWORD', 'LPWSTR', 'DWORD'], ['src', 'nField', 'dst', 'len'], 'DWORD'), 'ParseFieldAW': (4, ['LPCVOID', 'DWORD', 'LPVOID', 'DWORD'], ['src', 'nField', 'dst', 'len'], 'DWORD'), 'GetFileNameFromBrowseAW': (7, ['HWND', 'LPVOID', 'DWORD', 'LPCVOID', 'LPCVOID', 'LPCVOID', 'LPCVOID'], ['hwndOwner', 'lpstrFile', 'nMaxFile', 'lpstrInitialDir', 'lpstrDefExt', 'lpstrFilter', 'lpstrTitle'], 'BOOL'), 'SHGetSetSettings': (3, ['LPSHELLSTATE', 'DWORD', 'BOOL'], ['lpss', 'dwMask', 'bSet'], 'VOID'), 'SHGetSettings': (2, ['LPSHELLFLAGSTATE', 'DWORD'], ['lpsfs', 'dwMask'], 'VOID'), 'RegisterShellHook': (2, ['HWND', 'DWORD'], ['hWnd', 'dwType'], 'BOOL'), 'SHRegisterDragDrop': (2, ['HWND', 'LPDROPTARGET'], ['hWnd', 'pDropTarget'], 'HRESULT'), 'SHRevokeDragDrop': (1, ['HWND'], ['hWnd'], 'HRESULT'), 'SHDoDragDrop': (5, ['HWND', 'LPDATAOBJECT', 'LPDROPSOURCE', 'DWORD', 'LPDWORD'], ['hWnd', 'lpDataObject', 'lpDropSource', 'dwOKEffect', 'pdwEffect'], 'HRESULT'), 'ArrangeWindows': (5, ['HWND', 'DWORD', 'const RECT *', 'WORD', 'const HWND *'], ['hwndParent', 'dwReserved', 'lpRect', 'cKids', 'lpKids'], 'WORD'), 'ReadCabinetState': (2, ['CABINETSTATE *', 'int'], ['cs', 'length'], 'BOOL'), 'WriteCabinetState': (1, ['CABINETSTATE *'], ['cs'], 'BOOL'), 'FileIconInit': (1, ['BOOL'], ['bFullInit'], 'BOOL'), 'IsUserAnAdmin': (0, [], [], 'BOOL'), 'SHAllocShared': (3, ['LPVOID', 'DWORD', 'DWORD'], ['lpvData', 'dwSize', 'dwProcId'], 'HANDLE'), 'SHLockShared': (2, ['HANDLE', 'DWORD'], ['hShared', 'dwProcId'], 'LPVOID'), 'SHUnlockShared': (1, ['LPVOID'], ['lpView'], 'BOOL'), 'SHFreeShared': (2, ['HANDLE', 'DWORD'], ['hShared', 'dwProcId'], 'BOOL'), 'SetAppStartingCursor': (2, ['HWND', 'DWORD'], ['u', 'v'], 'HRESULT'), 'SHLoadOLE': (1, ['LPARAM'], ['lParam'], 'HRESULT'), 'DriveType': (1, ['int'], ['u'], 'int'), 'InvalidateDriveType': (1, ['int'], ['u'], 'int'), 'SHAbortInvokeCommand': (0, [], [], 'HRESULT'), 'SHOutOfMemoryMessageBox': (3, ['HWND', 'LPCSTR', 'UINT'], ['hwndOwner', 'lpCaption', 'uType'], 'int'), 'SHFlushClipboard': (0, [], [], 'HRESULT'), 'SHWaitForFileToOpen': (3, ['LPCITEMIDLIST', 'DWORD', 'DWORD'], ['pidl', 'dwFlags', 'dwTimeout'], 'BOOL'), 'DoEnvironmentSubstA': (2, ['LPSTR', 'UINT'], ['pszString', 'cchString'], 'DWORD'), 'DoEnvironmentSubstW': (2, ['LPWSTR', 'UINT'], ['pszString', 'cchString'], 'DWORD'), 'DoEnvironmentSubstAW': (2, ['LPVOID', 'UINT'], ['x', 'y'], 'DWORD'), 'GUIDFromStringW': (2, ['LPCWSTR', 'LPGUID'], ['str', 'guid'], 'BOOL'), 'PathIsTemporaryW': (1, ['const WCHAR *'], ['path'], 'BOOL'), 'SHAddFromPropSheetExtArray': (3, ['HPSXA', 'LPFNADDPROPSHEETPAGE', 'LPARAM'], ['hpsxa', 'lpfnAddPage', 'lParam'], 'UINT'), 'SHCreatePropSheetExtArray': (3, ['HKEY', 'LPCWSTR', 'UINT'], ['hKey', 'pszSubKey', 'max_iface'], 'HPSXA'), 'SHCreatePropSheetExtArrayEx': (4, ['HKEY', 'LPCWSTR', 'UINT', 'LPDATAOBJECT'], ['hKey', 'pszSubKey', 'max_iface', 'pDataObj'], 'HPSXA'), 'SHReplaceFromPropSheetExtArray': (4, ['HPSXA', 'UINT', 'LPFNADDPROPSHEETPAGE', 'LPARAM'], ['hpsxa', 'uPageID', 'lpfnReplaceWith', 'lParam'], 'UINT'), 'SHDestroyPropSheetExtArray': (1, ['HPSXA'], ['hpsxa'], 'void'), 'SHCreateStdEnumFmtEtc': (3, ['DWORD', 'const FORMATETC *', 'LPENUMFORMATETC *'], ['cFormats', 'lpFormats', 'ppenumFormatetc'], 'HRESULT'), 'SHFindFiles': (2, ['LPCITEMIDLIST', 'LPCITEMIDLIST'], ['pidlFolder', 'pidlSaveFile'], 'BOOL'), 'SHUpdateImageW': (4, ['LPCWSTR', 'int', 'UINT', 'int'], ['pszHashItem', 'iIndex', 'uFlags', 'iImageIndex'], 'void'), 'SHUpdateImageA': (4, ['LPCSTR', 'INT', 'UINT', 'INT'], ['pszHashItem', 'iIndex', 'uFlags', 'iImageIndex'], 'VOID'), 'SHHandleUpdateImage': (0, [], [], 'INT'), 'SHObjectProperties': (0, [], [], 'BOOL'), 'SHGetNewLinkInfoA': (0, [], [], 'BOOL'), 'SHGetNewLinkInfoW': (0, [], [], 'BOOL'), 'SHStartNetConnectionDialog': (3, ['HWND', 'LPCSTR', 'DWORD'], ['hwnd', 'pszRemoteName', 'dwType'], 'HRESULT'), 'SHFormatDrive': (0, [], [], 'DWORD'), 'SHRemoveLocalizedName': (1, ['const WCHAR *'], ['path'], 'HRESULT'), 'SHSetLocalizedName': (3, ['LPWSTR', 'LPCWSTR', 'int'], ['pszPath', 'pszResModule', 'idsRes'], 'HRESULT'), 'SHFlushSFCache': (0, [], [], 'void'), 'PathAppendAW': (2, ['LPVOID', 'LPCVOID'], ['lpszPath1', 'lpszPath2'], 'BOOL'), 'PathCombineAW': (3, ['LPVOID', 'LPCVOID', 'LPCVOID'], ['szDest', 'lpszDir', 'lpszFile'], 'LPVOID'), 'PathAddBackslashAW': (1, ['LPVOID'], ['lpszPath'], 'LPVOID'), 'PathBuildRootAW': (2, ['LPVOID', 'int'], ['lpszPath', 'drive'], 'LPVOID'), 'PathFindFileNameAW': (1, ['LPCVOID'], ['lpszPath'], 'LPVOID'), 'PathFindExtensionAW': (1, ['LPCVOID'], ['lpszPath'], 'LPVOID'), 'PathGetExtensionAW': (3, ['LPCVOID', 'DWORD', 'DWORD'], ['lpszPath', 'void1', 'void2'], 'LPVOID'), 'PathGetArgsAW': (1, ['LPVOID'], ['lpszPath'], 'LPVOID'), 'PathGetDriveNumberAW': (1, ['LPVOID'], ['lpszPath'], 'int'), 'PathRemoveFileSpecAW': (1, ['LPVOID'], ['lpszPath'], 'BOOL'), 'PathStripPathAW': (1, ['LPVOID'], ['lpszPath'], 'void'), 'PathStripToRootAW': (1, ['LPVOID'], ['lpszPath'], 'BOOL'), 'PathRemoveArgsAW': (1, ['LPVOID'], ['lpszPath'], 'void'), 'PathRemoveExtensionAW': (1, ['LPVOID'], ['lpszPath'], 'void'), 'PathGetShortPathAW': (1, ['LPVOID'], ['pszPath'], 'VOID'), 'PathRemoveBlanksAW': (1, ['LPVOID'], ['str'], 'void'), 'PathUnquoteSpacesAW': (1, ['LPVOID'], ['str'], 'VOID'), 'PathIsRootAW': (1, ['LPCVOID'], ['lpszPath'], 'BOOL'), 'PathMatchSpecAW': (2, ['LPVOID', 'LPVOID'], ['name', 'mask'], 'BOOL'), 'PathIsSameRootAW': (2, ['LPCVOID', 'LPCVOID'], ['lpszPath1', 'lpszPath2'], 'BOOL'), 'IsLFNDriveA': (1, ['LPCSTR'], ['lpszPath'], 'BOOL'), 'IsLFNDriveW': (1, ['LPCWSTR'], ['lpszPath'], 'BOOL'), 'IsLFNDriveAW': (1, ['LPCVOID'], ['lpszPath'], 'BOOL'), 'PathMakeUniqueNameAW': (5, ['LPVOID', 'DWORD', 'LPCVOID', 'LPCVOID', 'LPCVOID'], ['lpszBuffer', 'dwBuffSize', 'lpszShortName', 'lpszLongName', 'lpszPathName'], 'BOOL'), 'PathYetAnotherMakeUniqueName': (4, ['LPWSTR', 'LPCWSTR', 'LPCWSTR', 'LPCWSTR'], ['buffer', 'path', 'shortname', 'longname'], 'BOOL'), 'PathFindOnPathAW': (2, ['LPVOID', 'LPCVOID *'], ['sFile', 'sOtherDirs'], 'BOOL'), 'PathCleanupSpec': (2, ['LPCWSTR', 'LPWSTR'], ['lpszPathW', 'lpszFileW'], 'int'), 'PathQualifyAW': (1, ['LPCVOID'], ['pszPath'], 'BOOL'), 'PathFindOnPathExA': (0, [], [], 'BOOL'), 'PathFindOnPathExW': (0, [], [], 'BOOL'), 'PathFileExistsDefExtA': (0, [], [], 'BOOL'), 'PathFileExistsDefExtW': (0, [], [], 'BOOL'), 'PathResolveAW': (3, ['void *', 'const void *', 'DWORD'], ['path', '*paths', 'flags'], 'BOOL'), 'PathSetDlgItemPathAW': (3, ['HWND', 'int', 'LPCVOID'], ['hDlg', 'id', 'pszPath'], 'VOID'), 'SHGetFolderPathA': (5, ['HWND', 'int', 'HANDLE', 'DWORD', 'LPSTR'], ['hwndOwner', 'nFolder', 'hToken', 'dwFlags', 'pszPath'], 'HRESULT'), 'SHGetFolderLocation': (5, ['HWND', 'int', 'HANDLE', 'DWORD', 'LPITEMIDLIST *'], ['hwndOwner', 'nFolder', 'hToken', 'dwReserved', 'ppidl'], 'HRESULT'), 'SHGetSpecialFolderLocation': (3, ['HWND', 'INT', 'LPITEMIDLIST *'], ['hwndOwner', 'nFolder', 'ppidl'], 'HRESULT'), 'SHGetKnownFolderPath': (4, ['REFKNOWNFOLDERID', 'DWORD', 'HANDLE', 'WCHAR *'], ['rfid', 'flags', 'token', '*ret_path'], 'HRESULT'), 'SHGetFolderPathEx': (5, ['REFKNOWNFOLDERID', 'DWORD', 'HANDLE', 'LPWSTR', 'DWORD'], ['rfid', 'flags', 'token', 'path', 'len'], 'HRESULT'), 'SHGetKnownFolderIDList': (4, ['REFKNOWNFOLDERID', 'DWORD', 'HANDLE', 'PIDLIST_ABSOLUTE *'], ['rfid', 'flags', 'token', 'pidl'], 'HRESULT'), 'SHGetKnownFolderItem': (0, [], [], 'HRESULT'), 'SHRegOpenKeyA': (3, ['HKEY', 'LPSTR', 'PHKEY'], ['hKey', 'lpSubKey', 'phkResult'], 'HRESULT'), 'SHRegQueryValueA': (4, ['HKEY', 'LPSTR', 'LPSTR', 'LPDWORD'], ['hkey', 'lpSubKey', 'lpValue', 'lpcbValue'], 'HRESULT'), 'SHRegQueryValueExA': (6, ['HKEY', 'LPSTR', 'LPDWORD', 'LPDWORD', 'LPBYTE', 'LPDWORD'], ['hkey', 'lpValueName', 'lpReserved', 'lpType', 'lpData', 'lpcbData'], 'HRESULT'), 'SHRegQueryValueW': (4, ['HKEY', 'LPWSTR', 'LPWSTR', 'LPDWORD'], ['hkey', 'lpszSubKey', 'lpszData', 'lpcbData'], 'HRESULT'), 'SHRegDeleteKeyW': (2, ['HKEY', 'LPCWSTR'], ['hkey', 'pszSubKey'], 'HRESULT'), 'SHCreateSessionKey': (2, ['REGSAM', 'HKEY *'], ['access', 'hkey'], 'HRESULT'), 'StrRetToStrNA': (4, ['LPSTR', 'DWORD', 'LPSTRRET', 'const ITEMIDLIST *'], ['dest', 'len', 'src', 'pidl'], 'BOOL'), 'StrRetToStrNW': (4, ['LPWSTR', 'DWORD', 'LPSTRRET', 'const ITEMIDLIST *'], ['dest', 'len', 'src', 'pidl'], 'BOOL'), 'StrRetToStrNAW': (4, ['LPVOID', 'DWORD', 'LPSTRRET', 'const ITEMIDLIST *'], ['dest', 'len', 'src', 'pidl'], 'BOOL'), 'CheckEscapesW': (0, [], [], 'DWORD'), 'IEParseDisplayNameWithBCW': (4, ['DWORD', 'LPCWSTR', 'LPBC', 'LPITEMIDLIST *'], ['codepage', 'lpszDisplayName', 'pbc', 'ppidl'], 'HRESULT'), 'FindExecutableA': (3, ['LPCSTR', 'LPCSTR', 'LPSTR'], ['lpFile', 'lpDirectory', 'lpResult'], 'HINSTANCE'), 'FindExecutableW': (3, ['LPCWSTR', 'LPCWSTR', 'LPWSTR'], ['lpFile', 'lpDirectory', 'lpResult'], 'HINSTANCE'), 'ShellExecuteA': (6, ['HWND', 'LPCSTR', 'LPCSTR', 'LPCSTR', 'LPCSTR', 'INT'], ['hWnd', 'lpVerb', 'lpFile', 'lpParameters', 'lpDirectory', 'iShowCmd'], 'HINSTANCE'), 'ShellExecuteW': (6, ['HWND', 'LPCWSTR', 'LPCWSTR', 'LPCWSTR', 'LPCWSTR', 'INT'], ['hwnd', 'lpVerb', 'lpFile', 'lpParameters', 'lpDirectory', 'nShowCmd'], 'HINSTANCE'), 'WOWShellExecute': (7, ['HWND', 'LPCSTR', 'LPCSTR', 'LPCSTR', 'LPCSTR', 'INT', 'void *'], ['hWnd', 'lpVerb', 'lpFile', 'lpParameters', 'lpDirectory', 'iShowCmd', 'callback'], 'HINSTANCE'), 'RegenerateUserEnvironment': (2, ['WCHAR *', 'BOOL'], ['wunknown', 'bunknown'], 'BOOL'), 'SHIsFileAvailableOffline': (2, ['LPCWSTR', 'LPDWORD'], ['path', 'status'], 'HRESULT'), 'Win32CreateDirectoryAW': (2, ['LPCVOID', 'LPSECURITY_ATTRIBUTES'], ['path', 'sec'], 'BOOL'), 'Win32RemoveDirectoryAW': (1, ['LPCVOID'], ['path'], 'BOOL'), 'Win32DeleteFileAW': (1, ['LPCVOID'], ['path'], 'DWORD'), 'SHCreateDirectory': (2, ['HWND', 'LPCVOID'], ['hWnd', 'path'], 'DWORD'), 'SHCreateDirectoryExA': (3, ['HWND', 'LPCSTR', 'LPSECURITY_ATTRIBUTES'], ['hWnd', 'path', 'sec'], 'int'), 'SHCreateDirectoryExW': (3, ['HWND', 'LPCWSTR', 'LPSECURITY_ATTRIBUTES'], ['hWnd', 'path', 'sec'], 'int'), 'SHFileOperationA': (1, ['LPSHFILEOPSTRUCTA'], ['lpFileOp'], 'int'), 'SHFileOperationW': (1, ['LPSHFILEOPSTRUCTW'], ['lpFileOp'], 'int'), 'SHFreeNameMappings': (1, ['HANDLE'], ['hNameMapping'], 'void'), 'SheGetDirA': (2, ['DWORD', 'LPSTR'], ['drive', 'buffer'], 'DWORD'), 'SheGetDirW': (2, ['DWORD', 'LPWSTR'], ['drive', 'buffer'], 'DWORD'), 'SheChangeDirA': (1, ['LPSTR'], ['path'], 'DWORD'), 'SheChangeDirW': (1, ['LPWSTR'], ['path'], 'DWORD'), 'IsNetDrive': (1, ['int'], ['drive'], 'int'), 'RealDriveType': (2, ['int', 'BOOL'], ['drive', 'bQueryNet'], 'int'), 'SHPathPrepareForWriteA': (4, ['HWND', 'IUnknown *', 'LPCSTR', 'DWORD'], ['hwnd', 'modless', 'path', 'flags'], 'HRESULT'), 'SHPathPrepareForWriteW': (4, ['HWND', 'IUnknown *', 'LPCWSTR', 'DWORD'], ['hwnd', 'modless', 'path', 'flags'], 'HRESULT'), 'SHMultiFileProperties': (2, ['IDataObject *', 'DWORD'], ['pdtobj', 'flags'], 'HRESULT'), 'SHCreateLinks': (5, ['HWND', 'LPCSTR', 'LPDATAOBJECT', 'UINT', 'LPITEMIDLIST *'], ['hWnd', 'lpszDir', 'lpDataObject', 'uFlags', 'lppidlLinks'], 'HRESULT'), 'SHOpenFolderAndSelectItems': (4, ['PCIDLIST_ABSOLUTE', 'UINT', 'PCUITEMID_CHILD_ARRAY *', 'DWORD'], ['pidlFolder', 'cidl', 'apidl', 'flags'], 'HRESULT'), 'SHGetSetFolderCustomSettings': (3, ['LPSHFOLDERCUSTOMSETTINGS', 'PCWSTR', 'DWORD'], ['fcs', 'path', 'flag'], 'HRESULT'), 'SHLimitInputEdit': (2, ['HWND', 'IShellFolder *'], ['textbox', 'folder'], 'HRESULT'), 'SHCreateDefaultContextMenu': (3, ['const DEFCONTEXTMENU *', 'REFIID', 'void *'], ['pdcm', 'riid', '*ppv'], 'HRESULT'), 'SHCreateShellFolderView': (2, ['const SFV_CREATE *', 'IShellView *'], ['desc', '*shellview'], 'HRESULT'), 'SHCreateShellFolderViewEx': (2, ['CSFV *', 'IShellView *'], ['desc', '*shellview'], 'HRESULT'), 'SHInitRestricted': (2, ['LPCVOID', 'LPCVOID'], ['unused', 'inpRegKey'], 'BOOL')}


dictRS_shell32 =  {'SHGetStockIconInfo': 'S_OK', 'SHCloneSpecialIDList': 'The newly created pidl', 'SHGetMalloc': 'S_OK', 'DoEnvironmentSubstW': 'The string in the buffer is updated', 'SHGetFolderLocation': 'S_OK', 'SHFileOperationA': 'ERROR_SUCCESS', 'SHCreateShellFolderView': 'S_OK', 'SHCreateShellFolderViewEx': 'S_OK', 'SHInitRestricted': '-1'}


dict4_shlwapi =  {'AssocCreate': (3, ['CLSID', 'REFIID', 'void *'], ['clsid', 'refiid', '*lpInterface'], 'HRESULT'), 'AssocGetPerceivedType': (4, ['LPCWSTR', 'PERCEIVED *', 'INT *', 'LPWSTR *'], ['lpszExt', 'lpType', 'lpFlag', 'lppszType'], 'HRESULT'), 'AssocQueryKeyW': (5, ['ASSOCF', 'ASSOCKEY', 'LPCWSTR', 'LPCWSTR', 'HKEY *'], ['cfFlags', 'assockey', 'pszAssoc', 'pszExtra', 'phkeyOut'], 'HRESULT'), 'AssocQueryKeyA': (5, ['ASSOCF', 'ASSOCKEY', 'LPCSTR', 'LPCSTR', 'HKEY *'], ['cfFlags', 'assockey', 'pszAssoc', 'pszExtra', 'phkeyOut'], 'HRESULT'), 'AssocQueryStringW': (6, ['ASSOCF', 'ASSOCSTR', 'LPCWSTR', 'LPCWSTR', 'LPWSTR', 'DWORD *'], ['cfFlags', 'str', 'pszAssoc', 'pszExtra', 'pszOut', 'pcchOut'], 'HRESULT'), 'AssocQueryStringA': (6, ['ASSOCF', 'ASSOCSTR', 'LPCSTR', 'LPCSTR', 'LPSTR', 'DWORD *'], ['cfFlags', 'str', 'pszAssoc', 'pszExtra', 'pszOut', 'pcchOut'], 'HRESULT'), 'AssocQueryStringByKeyW': (6, ['ASSOCF', 'ASSOCSTR', 'HKEY', 'LPCWSTR', 'LPWSTR', 'DWORD *'], ['cfFlags', 'str', 'hkAssoc', 'pszExtra', 'pszOut', 'pcchOut'], 'HRESULT'), 'AssocQueryStringByKeyA': (6, ['ASSOCF', 'ASSOCSTR', 'HKEY', 'LPCSTR', 'LPSTR', 'DWORD *'], ['cfFlags', 'str', 'hkAssoc', 'pszExtra', 'pszOut', 'pcchOut'], 'HRESULT'), 'AssocIsDangerous': (1, ['LPCWSTR'], ['lpszAssoc'], 'BOOL'), 'SHAddDataBlock': (2, ['LPDBLIST*', 'const DATABLOCK_HEADER *'], ['lppList', 'lpNewItem'], 'BOOL'), 'SHWriteDataBlockList': (2, ['IStream*', 'LPDBLIST'], ['lpStream', 'lpList'], 'HRESULT'), 'SHReadDataBlockList': (2, ['IStream*', 'LPDBLIST*'], ['lpStream', 'lppList'], 'HRESULT'), 'SHFreeDataBlockList': (1, ['LPDBLIST'], ['lpList'], 'VOID'), 'SHRemoveDataBlock': (2, ['LPDBLIST*', 'DWORD'], ['lppList', 'dwSignature'], 'BOOL'), 'SHIsEmptyStream': (1, ['IStream *'], ['lpStream'], 'BOOL'), 'SHMessageBoxCheckExW': (7, ['HWND', 'HINSTANCE', 'LPCWSTR', 'DLGPROC', 'LPARAM', 'INT_PTR', 'LPCWSTR'], ['hWnd', 'hInst', 'lpszName', 'dlgProc', 'lParam', 'iRet', 'lpszId'], 'INT_PTR'), 'SHMessageBoxCheckW': (6, ['HWND', 'LPCWSTR', 'LPCWSTR', 'DWORD', 'INT_PTR', 'LPCWSTR'], ['hWnd', 'lpszText', 'lpszTitle', 'dwType', 'iRet', 'lpszId'], 'INT_PTR'), 'SHMessageBoxCheckExA': (7, ['HWND', 'HINSTANCE', 'LPCSTR', 'DLGPROC', 'LPARAM', 'INT_PTR', 'LPCSTR'], ['hWnd', 'hInst', 'lpszName', 'dlgProc', 'lParam', 'iRet', 'lpszId'], 'INT_PTR'), 'SHMessageBoxCheckA': (6, ['HWND', 'LPCSTR', 'LPCSTR', 'DWORD', 'INT_PTR', 'LPCSTR'], ['hWnd', 'lpszText', 'lpszTitle', 'dwType', 'iRet', 'lpszId'], 'INT_PTR'), 'SHInvokeCommand': (4, ['HWND', 'IShellFolder*', 'LPCITEMIDLIST', 'DWORD'], ['hWnd', 'lpFolder', 'lpApidl', 'dwCommandId'], 'HRESULT'), 'SHMapHandle': (5, ['HANDLE', 'DWORD', 'DWORD', 'DWORD', 'DWORD'], ['hShared', 'dwSrcProcId', 'dwDstProcId', 'dwAccess', 'dwOptions'], 'HANDLE'), 'SHAllocShared': (3, ['LPCVOID', 'DWORD', 'DWORD'], ['lpvData', 'dwSize', 'dwProcId'], 'HANDLE'), 'SHLockShared': (2, ['HANDLE', 'DWORD'], ['hShared', 'dwProcId'], 'PVOID'), 'SHUnlockShared': (1, ['LPVOID'], ['lpView'], 'BOOL'), 'SHFreeShared': (2, ['HANDLE', 'DWORD'], ['hShared', 'dwProcId'], 'BOOL'), 'RegisterDefaultAcceptHeaders': (2, ['LPBC', 'IUnknown *'], ['lpBC', 'lpUnknown'], 'HRESULT'), 'SHStringFromGUIDA': (3, ['REFGUID', 'LPSTR', 'INT'], ['guid', 'lpszDest', 'cchMax'], 'INT'), 'SHStringFromGUIDW': (3, ['REFGUID', 'LPWSTR', 'INT'], ['guid', 'lpszDest', 'cchMax'], 'INT'), 'GetStringType3ExW': (3, ['LPWSTR', 'INT', 'LPWORD'], ['src', 'count', 'type'], 'BOOL'), 'SHAboutInfoA': (2, ['LPSTR', 'DWORD'], ['lpszDest', 'dwDestLen'], 'BOOL'), 'SHAboutInfoW': (2, ['LPWSTR', 'DWORD'], ['lpszDest', 'dwDestLen'], 'BOOL'), 'SHSetWindowBits': (4, ['HWND', 'INT', 'UINT', 'UINT'], ['hwnd', 'offset', 'mask', 'flags'], 'LONG'), 'SHSetParentHwnd': (2, ['HWND', 'HWND'], ['hWnd', 'hWndParent'], 'HWND'), 'ConnectToConnectionPoint': (6, ['IUnknown*', 'REFIID', 'BOOL', 'IUnknown*', 'LPDWORD', 'IConnectionPoint *'], ['lpUnkSink', 'riid', 'fConnect', 'lpUnknown', 'lpCookie', '*lppCP'], 'HRESULT'), 'PathSkipLeadingSlashesA': (1, ['LPCSTR'], ['lpszSrc'], 'LPCSTR'), 'SHIsSameObject': (2, ['IUnknown*', 'IUnknown*'], ['lpInt1', 'lpInt2'], 'BOOL'), 'SHLoadMenuPopup': (2, ['HINSTANCE', 'LPCWSTR'], ['hInst', 'szName'], 'BOOL'), 'SHPropagateMessage': (5, ['HWND', 'UINT', 'WPARAM', 'LPARAM', 'BOOL'], ['hWnd', 'uiMsgId', 'wParam', 'lParam', 'bSend'], 'void'), 'SHRemoveAllSubMenus': (1, ['HMENU'], ['hMenu'], 'DWORD'), 'SHEnableMenuItem': (3, ['HMENU', 'UINT', 'BOOL'], ['hMenu', 'wItemID', 'bEnable'], 'UINT'), 'SHCheckMenuItem': (3, ['HMENU', 'UINT', 'BOOL'], ['hMenu', 'uID', 'bCheck'], 'DWORD'), 'SHRegisterClassA': (1, ['WNDCLASSA *'], ['wndclass'], 'DWORD'), 'SHSimulateDrop': (5, ['IDropTarget *', 'IDataObject *', 'DWORD', 'PPOINTL', 'DWORD*'], ['pDrop', 'pDataObj', 'grfKeyState', 'lpPt', 'pdwEffect'], 'BOOL'), 'SHLoadFromPropertyBag': (2, ['IUnknown *', 'IPropertyBag*'], ['lpUnknown', 'lpPropBag'], 'DWORD'), 'SHGetMenuFromID': (2, ['HMENU', 'UINT'], ['hMenu', 'uID'], 'HMENU'), 'SHGetCurColorRes': (0, [], [], 'DWORD'), 'SHWaitForSendMessageThread': (2, ['HANDLE', 'DWORD'], ['hand', 'dwTimeout'], 'DWORD'), 'SHIsExpandableFolder': (2, ['LPSHELLFOLDER', 'LPCITEMIDLIST'], ['lpFolder', 'pidl'], 'HRESULT'), 'SHFillRectClr': (3, ['HDC', 'LPCRECT', 'COLORREF'], ['hDC', 'pRect', 'cRef'], 'DWORD'), 'SHSearchMapInt': (4, ['const int *', 'const int *', 'int', 'int'], ['lpKeys', 'lpValues', 'iLen', 'iKey'], 'int'), 'MayQSForward': (6, ['IUnknown*', 'PVOID', 'REFGUID', 'ULONG', 'OLECMD *', 'OLECMDTEXT*'], ['lpUnknown', 'lpReserved', 'riidCmdGrp', 'cCmds', 'prgCmds', 'pCmdText'], 'HRESULT'), 'MayExecForward': (7, ['IUnknown*', 'INT', 'REFGUID', 'DWORD', 'DWORD', 'VARIANT*', 'VARIANT*'], ['lpUnknown', 'iUnk', 'pguidCmdGroup', 'nCmdID', 'nCmdexecopt', 'pvaIn', 'pvaOut'], 'HRESULT'), 'IsQSForward': (3, ['REFGUID', 'ULONG', 'OLECMD *'], ['pguidCmdGroup', 'cCmds', 'prgCmds'], 'HRESULT'), 'SHIsChildOrSelf': (2, ['HWND', 'HWND'], ['hParent', 'hChild'], 'BOOL'), 'SHSetDefaultDialogFont': (2, ['HWND', 'INT'], ['hWnd', 'id'], 'HRESULT'), 'SHRemoveDefaultDialogFont': (1, ['HWND'], ['hWnd'], 'HANDLE'), 'SHPinDllOfCLSID': (1, ['REFIID'], ['refiid'], 'HMODULE'), 'SHRegisterClassW': (1, ['WNDCLASSW *'], ['lpWndClass'], 'DWORD'), 'SHUnregisterClassesA': (3, ['HINSTANCE', 'LPCSTR *', 'INT'], ['hInst', 'lppClasses', 'iCount'], 'void'), 'SHUnregisterClassesW': (3, ['HINSTANCE', 'LPCWSTR *', 'INT'], ['hInst', 'lppClasses', 'iCount'], 'void'), 'SHCreateWorkerWindowA': (6, ['WNDPROC', 'HWND', 'DWORD', 'DWORD', 'HMENU', 'LONG_PTR'], ['wndProc', 'hWndParent', 'dwExStyle', 'dwStyle', 'hMenu', 'wnd_extra'], 'HWND'), 'SHGetRestriction': (3, ['LPCWSTR', 'LPCWSTR', 'LPCWSTR'], ['lpSubKey', 'lpSubName', 'lpValue'], 'DWORD'), 'SHRestrictionLookup': (4, ['DWORD', 'LPCWSTR', 'LPPOLICYDATA', 'LPDWORD'], ['policy', 'initial', 'polTable', 'polArr'], 'DWORD'), 'SHWeakReleaseInterface': (2, ['IUnknown *', 'IUnknown *'], ['lpDest', '*lppUnknown'], 'VOID'), 'GUIDFromStringA': (2, ['LPCSTR', 'CLSID *'], ['idstr', 'id'], 'BOOL'), 'GUIDFromStringW': (2, ['LPCWSTR', 'CLSID *'], ['idstr', 'id'], 'BOOL'), 'SHCreateWorkerWindowW': (6, ['WNDPROC', 'HWND', 'DWORD', 'DWORD', 'HMENU', 'LONG_PTR'], ['wndProc', 'hWndParent', 'dwExStyle', 'dwStyle', 'hMenu', 'wnd_extra'], 'HWND'), 'SHInvokeDefaultCommand': (3, ['HWND', 'IShellFolder*', 'LPCITEMIDLIST'], ['hWnd', 'lpFolder', 'lpApidl'], 'HRESULT'), 'SHPackDispParamsV': (4, ['DISPPARAMS *', 'VARIANTARG *', 'UINT', 'va_list'], ['params', 'args', 'cnt', 'valist'], 'HRESULT'), 'PlaySoundWrapW': (3, ['LPCWSTR', 'HMODULE', 'DWORD'], ['pszSound', 'hmod', 'fdwSound'], 'BOOL'), 'SHGetIniStringW': (5, ['LPCWSTR', 'LPCWSTR', 'LPWSTR', 'DWORD', 'LPCWSTR'], ['appName', 'keyName', 'out', 'outLen', 'filename'], 'DWORD'), 'SHSetIniStringW': (4, ['LPCWSTR', 'LPCWSTR', 'LPCWSTR', 'LPCWSTR'], ['appName', 'keyName', 'str', 'filename'], 'BOOL'), 'SHGetFileInfoWrapW': (5, ['LPCWSTR', 'DWORD', 'SHFILEINFOW *', 'UINT', 'UINT'], ['path', 'dwFileAttributes', 'psfi', 'sizeofpsfi', 'flags'], 'DWORD'), 'DragQueryFileWrapW': (4, ['HDROP', 'UINT', 'LPWSTR', 'UINT'], ['hDrop', 'lFile', 'lpszFile', 'lLength'], 'UINT'), 'SHBrowseForFolderWrapW': (1, ['LPBROWSEINFOW'], ['lpBi'], 'LPITEMIDLIST'), 'SHGetPathFromIDListWrapW': (2, ['LPCITEMIDLIST', 'LPWSTR'], ['pidl', 'pszPath'], 'BOOL'), 'ShellExecuteExWrapW': (1, ['LPSHELLEXECUTEINFOW'], ['lpExecInfo'], 'BOOL'), 'SHFileOperationWrapW': (1, ['LPSHFILEOPSTRUCTW'], ['lpFileOp'], 'INT'), 'SHInterlockedCompareExchange': (3, ['PVOID *', 'PVOID', 'PVOID'], ['dest', 'xchg', 'compare'], 'PVOID'), 'GetFileVersionInfoSizeWrapW': (2, ['LPCWSTR', 'LPDWORD'], ['filename', 'handle'], 'DWORD'), 'VerQueryValueWrapW': (4, ['LPVOID', 'LPCWSTR', 'LPVOID *', 'UINT *'], ['pBlock', 'lpSubBlock', 'lplpBuffer', 'puLen'], 'WORD'), 'SHGetNewLinkInfoWrapW': (5, ['LPCWSTR', 'LPCWSTR', 'LPWSTR', 'BOOL *', 'UINT'], ['pszLinkTo', 'pszDir', 'pszName', 'pfMustCopy', 'uFlags'], 'BOOL'), 'SHDefExtractIconWrapW': (6, ['LPCWSTR', 'int', 'UINT', 'HICON*', 'HICON*', 'UINT'], ['pszIconFile', 'iIndex', 'uFlags', 'phiconLarge', 'phiconSmall', 'nIconSize'], 'UINT'), 'ExtractIconWrapW': (3, ['HINSTANCE', 'LPCWSTR', 'UINT'], ['hInstance', 'lpszExeFileName', 'nIconIndex'], 'HICON'), 'MLLoadLibraryA': (3, ['LPCSTR', 'HMODULE', 'DWORD'], ['new_mod', 'inst_hwnd', 'dwCrossCodePage'], 'HMODULE'), 'MLLoadLibraryW': (3, ['LPCWSTR', 'HMODULE', 'DWORD'], ['new_mod', 'inst_hwnd', 'dwCrossCodePage'], 'HMODULE'), 'ColorAdjustLuma': (3, ['COLORREF', 'int', 'BOOL'], ['cRGB', 'dwLuma', 'bUnknown'], 'COLORREF'), 'GetSaveFileNameWrapW': (1, ['LPOPENFILENAMEW'], ['ofn'], 'BOOL'), 'WNetRestoreConnectionWrapW': (2, ['HWND', 'LPWSTR'], ['hwndOwner', 'lpszDevice'], 'DWORD'), 'WNetGetLastErrorWrapW': (5, ['LPDWORD', 'LPWSTR', 'DWORD', 'LPWSTR', 'DWORD'], ['lpError', 'lpErrorBuf', 'nErrorBufSize', 'lpNameBuf', 'nNameBufSize'], 'DWORD'), 'PageSetupDlgWrapW': (1, ['LPPAGESETUPDLGW'], ['pagedlg'], 'BOOL'), 'PrintDlgWrapW': (1, ['LPPRINTDLGW'], ['printdlg'], 'BOOL'), 'GetOpenFileNameWrapW': (1, ['LPOPENFILENAMEW'], ['ofn'], 'BOOL'), 'ColorHLSToRGB': (3, ['WORD', 'WORD', 'WORD'], ['wHue', 'wLuminosity', 'wSaturation'], 'COLORREF'), 'SHGetMachineInfo': (1, ['DWORD'], ['dwFlags'], 'DWORD'), 'SHWinHelpOnDemandW': (5, ['HWND', 'LPCWSTR', 'DWORD', 'VOID *', 'DWORD'], ['hwnd', 'helpfile', 'flags1', 'ptr1', 'flags2'], 'DWORD'), 'SHWinHelpOnDemandA': (5, ['HWND', 'LPCSTR', 'DWORD', 'VOID *', 'DWORD'], ['hwnd', 'helpfile', 'flags1', 'ptr1', 'flags2'], 'DWORD'), 'MLFreeLibrary': (1, ['HMODULE'], ['hModule'], 'BOOL'), 'SHFlushSFCacheWrap': (0, [], [], 'BOOL'), 'MLIsMLHInstance': (1, ['HINSTANCE'], ['hInst'], 'BOOL'), 'MLSetMLHInstance': (2, ['HINSTANCE', 'HANDLE'], ['hInst', 'hHeap'], 'DWORD'), 'MLClearMLHInstance': (1, ['DWORD'], ['x'], 'DWORD'), 'SHSendMessageBroadcastA': (3, ['UINT', 'WPARAM', 'LPARAM'], ['uMsg', 'wParam', 'lParam'], 'DWORD'), 'SHSendMessageBroadcastW': (3, ['UINT', 'WPARAM', 'LPARAM'], ['uMsg', 'wParam', 'lParam'], 'DWORD'), 'CLSIDFromStringWrap': (2, ['LPCWSTR', 'CLSID *'], ['idstr', 'id'], 'HRESULT'), 'SHLoadRegUIStringW': (4, ['HKEY', 'LPCWSTR', 'LPWSTR', 'DWORD'], ['hkey', 'value', 'buf', 'size'], 'HRESULT'), 'ColorRGBToHLS': (4, ['COLORREF', 'LPWORD', 'LPWORD', 'LPWORD'], ['cRGB', 'pwHue', 'pwLuminance', 'pwSaturation'], 'VOID'), 'SHCreateShellPalette': (1, ['HDC'], ['hdc'], 'HPALETTE'), 'SHGetInverseCMAP': (2, ['LPDWORD', 'DWORD'], ['dest', 'dwSize'], 'HRESULT'), 'GetMenuPosFromID': (2, ['HMENU', 'UINT'], ['hMenu', 'wID'], 'INT'), 'SHMenuIndexFromID': (2, ['HMENU', 'UINT'], ['hMenu', 'uID'], 'DWORD'), 'FixSlashesAndColonW': (1, ['LPWSTR'], ['lpwstr'], 'VOID'), 'SHGetAppCompatFlags': (1, ['DWORD'], ['dwUnknown'], 'DWORD'), 'SHCoCreateInstanceAC': (5, ['REFCLSID', 'LPUNKNOWN', 'DWORD', 'REFIID', 'LPVOID *'], ['rclsid', 'pUnkOuter', 'dwClsContext', 'iid', 'ppv'], 'HRESULT'), 'SHSkipJunction': (2, ['IBindCtx *', 'const CLSID *'], ['pbc', 'pclsid'], 'BOOL'), 'SHGetShellKey': (3, ['DWORD', 'LPCWSTR', 'BOOL'], ['flags', 'sub_key', 'create'], 'HKEY'), 'SHQueueUserWorkItem': (7, ['LPTHREAD_START_ROUTINE', 'LPVOID', 'LONG', 'DWORD_PTR', 'DWORD_PTR *', 'LPCSTR', 'DWORD'], ['pfnCallback', 'pContext', 'lPriority', 'dwTag', 'pdwId', 'pszModule', 'dwFlags'], 'BOOL'), 'SHSetTimerQueueTimer': (7, ['HANDLE', 'WAITORTIMERCALLBACK', 'LPVOID', 'DWORD', 'DWORD', 'LPCSTR', 'DWORD'], ['hQueue', 'pfnCallback', 'pContext', 'dwDueTime', 'dwPeriod', 'lpszLibrary', 'dwFlags'], 'HANDLE'), 'SKAllocValueW': (6, ['DWORD', 'LPCWSTR', 'LPCWSTR', 'DWORD *', 'LPVOID *', 'DWORD *'], ['flags', 'subkey', 'value', 'type', 'data', 'count'], 'HRESULT'), 'SKDeleteValueW': (3, ['DWORD', 'LPCWSTR', 'LPCWSTR'], ['flags', 'subkey', 'value'], 'HRESULT'), 'SKGetValueW': (6, ['DWORD', 'LPCWSTR', 'LPCWSTR', 'DWORD *', 'void *', 'DWORD *'], ['flags', 'subkey', 'value', 'type', 'data', 'count'], 'HRESULT'), 'SKSetValueW': (6, ['DWORD', 'LPCWSTR', 'LPCWSTR', 'DWORD', 'void *', 'DWORD'], ['flags', 'subkey', 'value', 'type', 'data', 'count'], 'HRESULT'), 'GetUIVersion': (0, [], [], 'DWORD'), 'ZoneComputePaneSize': (1, ['HWND'], ['hwnd'], 'UINT'), 'SHChangeNotifyWrap': (4, ['LONG', 'UINT', 'LPCVOID', 'LPCVOID'], ['wEventId', 'uFlags', 'dwItem1', 'dwItem2'], 'void'), 'GetShellSecurityDescriptor': (2, ['const PSHELL_USER_PERMISSION *', 'int'], ['apUserPerm', 'cUserPerm'], 'PSECURITY_DESCRIPTOR'), 'SHFormatDateTimeW': (4, ['const FILETIME UNALIGNED *', 'DWORD *', 'LPWSTR', 'UINT'], ['fileTime', 'flags', 'buf', 'size'], 'INT'), 'SHFormatDateTimeA': (4, ['const FILETIME UNALIGNED *', 'DWORD *', 'LPSTR', 'UINT'], ['fileTime', 'flags', 'buf', 'size'], 'INT'), 'ZoneCheckUrlExW': (8, ['LPWSTR', 'PVOID', 'DWORD', 'DWORD', 'DWORD', 'DWORD', 'DWORD', 'DWORD'], ['szURL', 'pUnknown', 'dwUnknown2', 'dwUnknown3', 'dwUnknown4', 'dwUnknown5', 'dwUnknown6', 'dwUnknown7'], 'INT'), 'SHVerbExistsNA': (4, ['LPSTR', 'PVOID', 'PVOID', 'DWORD'], ['verb', 'pUnknown', 'pUnknown2', 'dwUnknown3'], 'INT'), 'SHGetObjectCompatFlags': (2, ['IUnknown *', 'const CLSID *'], ['pUnk', 'clsid'], 'DWORD'), 'SHGetWebFolderFilePathW': (3, ['LPCWSTR', 'LPWSTR', 'DWORD'], ['lpszFile', 'lpszPath', 'dwPathLen'], 'HRESULT'), 'PathBuildRootA': (2, ['LPSTR', 'int'], ['lpszPath', 'drive'], 'LPSTR'), 'PathBuildRootW': (2, ['LPWSTR', 'int'], ['lpszPath', 'drive'], 'LPWSTR'), 'PathRemoveArgsA': (1, ['LPSTR'], ['lpszPath'], 'void'), 'PathRemoveArgsW': (1, ['LPWSTR'], ['lpszPath'], 'void'), 'PathFileExistsDefExtW': (2, ['LPWSTR', 'DWORD'], ['lpszPath', 'dwWhich'], 'BOOL'), 'PathFileExistsDefExtA': (2, ['LPSTR', 'DWORD'], ['lpszPath', 'dwWhich'], 'BOOL'), 'PathFindOnPathExA': (3, ['LPSTR', 'LPCSTR *', 'DWORD'], ['lpszFile', 'lppszOtherDirs', 'dwWhich'], 'BOOL'), 'PathFindOnPathExW': (3, ['LPWSTR', 'LPCWSTR *', 'DWORD'], ['lpszFile', 'lppszOtherDirs', 'dwWhich'], 'BOOL'), 'PathFindOnPathA': (2, ['LPSTR', 'LPCSTR *'], ['lpszFile', 'lppszOtherDirs'], 'BOOL'), 'PathFindOnPathW': (2, ['LPWSTR', 'LPCWSTR *'], ['lpszFile', 'lppszOtherDirs'], 'BOOL'), 'PathCompactPathExA': (4, ['LPSTR', 'LPCSTR', 'UINT', 'DWORD'], ['lpszDest', 'lpszPath', 'cchMax', 'dwFlags'], 'BOOL'), 'PathCompactPathExW': (4, ['LPWSTR', 'LPCWSTR', 'UINT', 'DWORD'], ['lpszDest', 'lpszPath', 'cchMax', 'dwFlags'], 'BOOL'), 'PathIsDirectoryA': (1, ['LPCSTR'], ['lpszPath'], 'BOOL'), 'PathIsDirectoryW': (1, ['LPCWSTR'], ['lpszPath'], 'BOOL'), 'PathFileExistsAndAttributesA': (2, ['LPCSTR', 'DWORD *'], ['lpszPath', 'dwAttr'], 'BOOL'), 'PathFileExistsAndAttributesW': (2, ['LPCWSTR', 'DWORD *'], ['lpszPath', 'dwAttr'], 'BOOL'), 'PathIsContentTypeA': (2, ['LPCSTR', 'LPCSTR'], ['path', 'content_type'], 'BOOL'), 'PathIsContentTypeW': (2, ['LPCWSTR', 'LPCWSTR'], ['lpszPath', 'lpszContentType'], 'BOOL'), 'PathIsSystemFolderA': (2, ['LPCSTR', 'DWORD'], ['lpszPath', 'dwAttrib'], 'BOOL'), 'PathIsSystemFolderW': (2, ['LPCWSTR', 'DWORD'], ['lpszPath', 'dwAttrib'], 'BOOL'), 'PathMakePrettyA': (1, ['LPSTR'], ['lpszPath'], 'BOOL'), 'PathMakePrettyW': (1, ['LPWSTR'], ['lpszPath'], 'BOOL'), 'PathCompactPathA': (3, ['HDC', 'LPSTR', 'UINT'], ['hDC', 'lpszPath', 'dx'], 'BOOL'), 'PathCompactPathW': (3, ['HDC', 'LPWSTR', 'UINT'], ['hDC', 'lpszPath', 'dx'], 'BOOL'), 'PathMakeSystemFolderA': (1, ['LPCSTR'], ['lpszPath'], 'BOOL'), 'PathMakeSystemFolderW': (1, ['LPCWSTR'], ['lpszPath'], 'BOOL'), 'PathUnmakeSystemFolderA': (1, ['LPCSTR'], ['lpszPath'], 'BOOL'), 'PathUnmakeSystemFolderW': (1, ['LPCWSTR'], ['lpszPath'], 'BOOL'), 'PathSetDlgItemPathA': (3, ['HWND', 'int', 'LPCSTR'], ['hDlg', 'id', 'lpszPath'], 'VOID'), 'PathSetDlgItemPathW': (3, ['HWND', 'int', 'LPCWSTR'], ['hDlg', 'id', 'lpszPath'], 'VOID'), 'PathIsNetworkPathA': (1, ['LPCSTR'], ['lpszPath'], 'BOOL'), 'PathIsNetworkPathW': (1, ['LPCWSTR'], ['lpszPath'], 'BOOL'), 'PathIsDirectoryEmptyA': (1, ['LPCSTR'], ['lpszPath'], 'BOOL'), 'PathIsDirectoryEmptyW': (1, ['LPCWSTR'], ['lpszPath'], 'BOOL'), 'PathFindSuffixArrayA': (3, ['LPCSTR', 'LPCSTR *', 'int'], ['lpszSuffix', 'lppszArray', 'dwCount'], 'LPCSTR'), 'PathFindSuffixArrayW': (3, ['LPCWSTR', 'LPCWSTR *', 'int'], ['lpszSuffix', 'lppszArray', 'dwCount'], 'LPCWSTR'), 'PathUndecorateA': (1, ['char *'], ['path'], 'void'), 'PathUndecorateW': (1, ['WCHAR *'], ['path'], 'void'), 'SHGetWebFolderFilePathA': (3, ['LPCSTR', 'LPSTR', 'DWORD'], ['lpszFile', 'lpszPath', 'dwPathLen'], 'HRESULT'), 'SHRegGetCLSIDKeyW': (5, ['REFGUID', 'LPCWSTR', 'BOOL', 'BOOL', 'PHKEY'], ['guid', 'lpszValue', 'bUseHKCU', 'bCreate', 'phKey'], 'HRESULT'), 'SHDeleteOrphanKeyA': (2, ['HKEY', 'LPCSTR'], ['hKey', 'lpszSubKey'], 'DWORD'), 'SHDeleteOrphanKeyW': (2, ['HKEY', 'LPCWSTR'], ['hKey', 'lpszSubKey'], 'DWORD'), 'SHGetValueGoodBootA': (6, ['HKEY', 'LPCSTR', 'LPCSTR', 'LPDWORD', 'LPVOID', 'LPDWORD'], ['hkey', 'pSubKey', 'pValue', 'pwType', 'pvData', 'pbData'], 'DWORD'), 'SHGetValueGoodBootW': (6, ['HKEY', 'LPCWSTR', 'LPCWSTR', 'LPDWORD', 'LPVOID', 'LPDWORD'], ['hkey', 'pSubKey', 'pValue', 'pwType', 'pvData', 'pbData'], 'DWORD'), 'RegisterMIMETypeForExtensionA': (2, ['LPCSTR', 'LPCSTR'], ['lpszSubKey', 'lpszValue'], 'BOOL'), 'RegisterMIMETypeForExtensionW': (2, ['LPCWSTR', 'LPCWSTR'], ['lpszSubKey', 'lpszValue'], 'BOOL'), 'UnregisterMIMETypeForExtensionA': (1, ['LPCSTR'], ['lpszSubKey'], 'BOOL'), 'UnregisterMIMETypeForExtensionW': (1, ['LPCWSTR'], ['lpszSubKey'], 'BOOL'), 'GetMIMETypeSubKeyA': (3, ['LPCSTR', 'LPSTR', 'DWORD'], ['lpszType', 'lpszBuffer', 'dwLen'], 'BOOL'), 'GetMIMETypeSubKeyW': (3, ['LPCWSTR', 'LPWSTR', 'DWORD'], ['lpszType', 'lpszBuffer', 'dwLen'], 'BOOL'), 'RegisterExtensionForMIMETypeA': (2, ['LPCSTR', 'LPCSTR'], ['lpszExt', 'lpszType'], 'BOOL'), 'RegisterExtensionForMIMETypeW': (2, ['LPCWSTR', 'LPCWSTR'], ['lpszExt', 'lpszType'], 'BOOL'), 'UnregisterExtensionForMIMETypeA': (1, ['LPCSTR'], ['lpszType'], 'BOOL'), 'UnregisterExtensionForMIMETypeW': (1, ['LPCWSTR'], ['lpszType'], 'BOOL'), 'SHRegGetCLSIDKeyA': (5, ['REFGUID', 'LPCSTR', 'BOOL', 'BOOL', 'PHKEY'], ['guid', 'lpszValue', 'bUseHKCU', 'bCreate', 'phKey'], 'HRESULT'), 'SHRegisterValidateTemplate': (2, ['LPCWSTR', 'BOOL'], ['filename', 'unknown'], 'HRESULT'), 'SHCreateStreamWrapper': (4, ['LPBYTE', 'DWORD', 'DWORD', 'IStream *'], ['lpbData', 'dwDataLen', 'dwReserved', '*lppStream'], 'HRESULT'), 'DllMain': (3, ['HINSTANCE', 'DWORD', 'LPVOID'], ['hinstDLL', 'fdwReason', 'fImpLoad'], 'BOOL'), 'WhichPlatform': (0, [], [], 'UINT'), 'SHGetViewStatePropertyBag': (5, ['PCIDLIST_ABSOLUTE', 'PCWSTR', 'DWORD', 'REFIID', 'void *'], ['pidl', 'bag_name', 'flags', 'riid', '*ppv'], 'HRESULT'), 'SHIsLowMemoryMachine': (1, ['DWORD'], ['type'], 'BOOL'), 'StopWatchMode': (0, [], [], 'DWORD'), 'StopWatchFlush': (0, [], [], 'void'), 'StopWatchW': (5, ['DWORD', 'LPCWSTR', 'DWORD', 'DWORD', 'DWORD'], ['dwClass', 'lpszStr', 'dwUnknown', 'dwMode', 'dwTimeStamp'], 'DWORD'), 'StopWatchA': (5, ['DWORD', 'LPCSTR', 'DWORD', 'DWORD', 'DWORD'], ['dwClass', 'lpszStr', 'dwUnknown', 'dwMode', 'dwTimeStamp'], 'DWORD'), 'GetPerfTime': (0, [], [], 'DWORD'), 'SHTruncateString': (0, [], [], 'DWORD'), 'StrCatW': (2, ['LPWSTR', 'LPCWSTR'], ['lpszStr', 'lpszSrc'], 'LPWSTR'), 'StrCpyW': (2, ['LPWSTR', 'LPCWSTR'], ['lpszStr', 'lpszSrc'], 'LPWSTR'), 'StrRetToStrA': (3, ['LPSTRRET', 'const ITEMIDLIST *', 'LPSTR *'], ['lpStrRet', 'pidl', 'ppszName'], 'HRESULT'), 'StrRetToStrW': (3, ['LPSTRRET', 'const ITEMIDLIST *', 'LPWSTR *'], ['lpStrRet', 'pidl', 'ppszName'], 'HRESULT'), 'StrRetToBSTR': (3, ['STRRET *', 'LPCITEMIDLIST', 'BSTR*'], ['lpStrRet', 'pidl', 'pBstrOut'], 'HRESULT'), 'StrFormatKBSizeA': (3, ['LONGLONG', 'LPSTR', 'UINT'], ['llBytes', 'lpszDest', 'cchMax'], 'LPSTR'), 'StrFormatKBSizeW': (3, ['LONGLONG', 'LPWSTR', 'UINT'], ['llBytes', 'lpszDest', 'cchMax'], 'LPWSTR'), 'StrNCatA': (3, ['LPSTR', 'LPCSTR', 'INT'], ['lpszStr', 'lpszCat', 'cchMax'], 'LPSTR'), 'StrNCatW': (3, ['LPWSTR', 'LPCWSTR', 'INT'], ['lpszStr', 'lpszCat', 'cchMax'], 'LPWSTR'), 'SHStrDupA': (2, ['LPCSTR', 'LPWSTR *'], ['lpszStr', 'lppszDest'], 'HRESULT'), 'SHStrDupW': (2, ['LPCWSTR', 'LPWSTR *'], ['src', 'dest'], 'HRESULT'), 'StrFromTimeIntervalA': (4, ['LPSTR', 'UINT', 'DWORD', 'int'], ['lpszStr', 'cchMax', 'dwMS', 'iDigits'], 'INT'), 'StrFromTimeIntervalW': (4, ['LPWSTR', 'UINT', 'DWORD', 'int'], ['lpszStr', 'cchMax', 'dwMS', 'iDigits'], 'INT'), 'StrFormatByteSizeW': (3, ['LONGLONG', 'LPWSTR', 'UINT'], ['llBytes', 'lpszDest', 'cchMax'], 'LPWSTR'), 'StrFormatByteSize64A': (3, ['LONGLONG', 'LPSTR', 'UINT'], ['llBytes', 'lpszDest', 'cchMax'], 'LPSTR'), 'StrFormatByteSizeA': (3, ['DWORD', 'LPSTR', 'UINT'], ['dwBytes', 'lpszDest', 'cchMax'], 'LPSTR'), 'SHStripMneumonicA': (1, ['LPCSTR'], ['lpszStr'], 'char'), 'SHStripMneumonicW': (1, ['LPCWSTR'], ['lpszStr'], 'WCHAR'), 'SHAnsiToUnicodeCP': (4, ['DWORD', 'LPCSTR', 'LPWSTR', 'int'], ['dwCp', 'lpSrcStr', 'lpDstStr', 'iLen'], 'DWORD'), 'SHAnsiToUnicode': (3, ['LPCSTR', 'LPWSTR', 'int'], ['lpSrcStr', 'lpDstStr', 'iLen'], 'DWORD'), 'SHUnicodeToAnsiCP': (4, ['UINT', 'LPCWSTR', 'LPSTR', 'int'], ['CodePage', 'lpSrcStr', 'lpDstStr', 'dstlen'], 'DWORD'), 'SHUnicodeToAnsi': (3, ['LPCWSTR', 'LPSTR', 'INT'], ['lpSrcStr', 'lpDstStr', 'iLen'], 'INT'), 'DoesStringRoundTripA': (3, ['LPCSTR', 'LPSTR', 'INT'], ['lpSrcStr', 'lpDst', 'iLen'], 'BOOL'), 'DoesStringRoundTripW': (3, ['LPCWSTR', 'LPSTR', 'INT'], ['lpSrcStr', 'lpDst', 'iLen'], 'BOOL'), 'CreateAllAccessSecurityAttributes': (3, ['LPSECURITY_ATTRIBUTES', 'PSECURITY_DESCRIPTOR', 'DWORD'], ['lpAttr', 'lpSec', 'p3'], 'LPSECURITY_ATTRIBUTES'), 'SHGlobalCounterGetValue': (1, ['HANDLE'], ['hSem'], 'LONG'), 'SHGlobalCounterIncrement': (1, ['HANDLE'], ['hSem'], 'LONG'), 'SHGlobalCounterDecrement': (1, ['HANDLE'], ['hSem'], 'DWORD'), 'SHGlobalCounterCreateNamedW': (2, ['LPCWSTR', 'DWORD'], ['lpszName', 'iInitial'], 'HANDLE'), 'SHGlobalCounterCreateNamedA': (2, ['LPCSTR', 'DWORD'], ['lpszName', 'iInitial'], 'HANDLE'), 'MLBuildResURLW': (6, ['LPCWSTR', 'HMODULE', 'DWORD', 'LPCWSTR', 'LPWSTR', 'DWORD'], ['lpszLibName', 'hMod', 'dwFlags', 'lpszRes', 'lpszDest', 'dwDestLen'], 'HRESULT'), 'SHAutoComplete': (2, ['HWND', 'DWORD'], ['hwndEdit', 'dwFlags'], 'HRESULT'), 'MLBuildResURLA': (6, ['LPCSTR', 'HMODULE', 'DWORD', 'LPCSTR', 'LPSTR', 'DWORD'], ['lpszLibName', 'hMod', 'dwFlags', 'lpszRes', 'lpszDest', 'dwDestLen'], 'HRESULT'), 'wvnsprintfA': (4, ['LPSTR', 'INT', 'LPCSTR', 'va_list'], ['buffer', 'maxlen', 'spec', 'args'], 'INT'), 'wvnsprintfW': (4, ['LPWSTR', 'INT', 'LPCWSTR', 'va_list'], ['buffer', 'maxlen', 'spec', 'args'], 'INT')}


dictRS_shlwapi =  {'AssocCreate': 'S_OK', 'AssocGetPerceivedType': 'S_OK', 'AssocQueryKeyA': 'S_OK', 'AssocQueryStringA': 'S_OK', 'AssocQueryStringByKeyA': 'S_OK', 'SHAddDataBlock': 'S_OK', 'SHWriteDataBlockList': 'S_OK', 'SHReadDataBlockList': 'S_OK', 'SHRemoveDataBlock': 'True', 'SHMessageBoxCheckExA': 'The value returned from the dialogue procedure', 'SHMessageBoxCheckA': 'The value returned from the dialogue procedure (e', 'SHMapHandle': 'handle', 'SHAllocShared': 'handle', 'SHLockShared': 'pointer', 'SHUnlockShared': 'True', 'SHFreeShared': 'True', 'RegisterDefaultAcceptHeaders': 'S_OK', 'ConnectToConnectionPoint': 'S_OK', 'PathSkipLeadingSlashesA': "The next character after the '//' or the string if not present", 'SHLoadMenuPopup': 'True', 'SHRemoveAllSubMenus': '0', 'SHLoadFromPropertyBag': 'S_OK', 'SHIsExpandableFolder': 'S_OK', 'SHSetDefaultDialogFont': 'S_OK', 'SHPinDllOfCLSID': 'handle', 'SHCreateWorkerWindowA': 'handle', 'GUIDFromStringA': 'True', 'SHInvokeDefaultCommand': 'S_OK', 'SHSetIniStringW': 'True', 'SHInvokeCommand': 'S_OK', 'MLLoadLibraryA': 'handle', 'SHGetInverseCMAP': 'S_OK', 'GetMenuPosFromID': 'The index of the menu item in hMenu', 'PathFindOnPathExA': 'True', 'PathFindOnPathA': 'True', 'PathCompactPathExA': 'True', 'PathUnmakeSystemFolderA': 'True', 'PathFindSuffixArrayA': 'The index of the position of lpszSuffix in lppszArray', 'SHGetWebFolderFilePathA': 'S_OK', 'SHDeleteOrphanKeyA': 'ERROR_SUCCESS', 'RegisterMIMETypeForExtensionA': 'True', 'UnregisterMIMETypeForExtensionA': 'True', 'GetMIMETypeSubKeyA': 'True', 'RegisterExtensionForMIMETypeA': 'True', 'UnregisterExtensionForMIMETypeA': 'True', 'SHRegGetCLSIDKeyA': 'S_OK', 'SHRegisterValidateTemplate': 'ERROR_SUCCESS', 'SHCreateStreamWrapper': 'S_OK', 'StopWatchW': 'ERROR_SUCCESS', 'StrRetToStrA': 'S_OK', 'StrRetToBSTR': 'S_OK', 'SHStrDupA': 'S_OK', 'SHUnicodeToAnsiCP': 'The length in bytes of the result at lpDstStr (including the terminator)', 'CreateAllAccessSecurityAttributes': 'lpAttr initialised using lpSec', 'SHAutoComplete': 'S_OK', 'MLBuildResURLA': 'S_OK', 'wvnsprintfA': '10'}


dict4_urlmon =  {'AsyncInstallDistributionUnit': (9, ['const WCHAR *', 'const WCHAR *', 'const WCHAR *', 'DWORD', 'DWORD', 'const WCHAR *', 'IBindCtx *', 'void *', 'DWORD'], ['szDistUnit', 'szTYPE', 'szExt', 'dwFileVersionMS', 'dwFileVersionLS', 'szURL', 'pbc', 'pvReserved', 'flags'], 'HRESULT'), 'RegisterBindStatusCallback': (4, ['IBindCtx *', 'IBindStatusCallback *', 'IBindStatusCallback *', 'DWORD'], ['pbc', 'pbsc', '*ppbscPrevious', 'dwReserved'], 'HRESULT'), 'RevokeBindStatusCallback': (2, ['IBindCtx *', 'IBindStatusCallback *'], ['pbc', 'pbsc'], 'HRESULT'), 'CreateAsyncBindCtx': (4, ['DWORD', 'IBindStatusCallback *', 'IEnumFORMATETC *', 'IBindCtx *'], ['reserved', 'callback', 'format', '*pbind'], 'HRESULT'), 'CreateAsyncBindCtxEx': (6, ['IBindCtx *', 'DWORD', 'IBindStatusCallback *', 'IEnumFORMATETC *', 'IBindCtx**', 'DWORD'], ['ibind', 'options', 'callback', 'format', 'pbind', 'reserved'], 'HRESULT'), 'URLDownloadToFileW': (5, ['LPUNKNOWN', 'LPCWSTR', 'LPCWSTR', 'DWORD', 'LPBINDSTATUSCALLBACK'], ['pCaller', 'szURL', 'szFileName', 'dwReserved', 'lpfnCB'], 'HRESULT'), 'URLDownloadToFileA': (5, ['LPUNKNOWN', 'LPCSTR', 'LPCSTR', 'DWORD', 'LPBINDSTATUSCALLBACK'], ['pCaller', 'szURL', 'szFileName', 'dwReserved', 'lpfnCB'], 'HRESULT'), 'CreateFormatEnumerator': (3, ['UINT', 'FORMATETC *', 'IEnumFORMATETC**'], ['cfmtetc', 'rgfmtetc', 'ppenumfmtetc'], 'HRESULT'), 'RegisterFormatEnumerator': (3, ['LPBC', 'IEnumFORMATETC *', 'DWORD'], ['pBC', 'pEFetc', 'reserved'], 'HRESULT'), 'RevokeFormatEnumerator': (2, ['LPBC', 'IEnumFORMATETC *'], ['pbc', 'pEFetc'], 'HRESULT'), 'CoInternetParseUrl': (7, ['LPCWSTR', 'PARSEACTION', 'DWORD', 'LPWSTR', 'DWORD', 'DWORD *', 'DWORD'], ['pwzUrl', 'ParseAction', 'dwFlags', 'pszResult', 'cchResult', 'pcchResult', 'dwReserved'], 'HRESULT'), 'CoInternetCombineUrl': (7, ['LPCWSTR', 'LPCWSTR', 'DWORD', 'LPWSTR', 'DWORD', 'DWORD *', 'DWORD'], ['pwzBaseUrl', 'pwzRelativeUrl', 'dwCombineFlags', 'pwzResult', 'cchResult', 'pcchResult', 'dwReserved'], 'HRESULT'), 'CoInternetCompareUrl': (3, ['LPCWSTR', 'LPCWSTR', 'DWORD'], ['pwzUrl1', 'pwzUrl2', 'dwCompareFlags'], 'HRESULT'), 'CoInternetQueryInfo': (7, ['LPCWSTR', 'QUERYOPTION', 'DWORD', 'LPVOID', 'DWORD', 'DWORD *', 'DWORD'], ['pwzUrl', 'QueryOption', 'dwQueryFlags', 'pvBuffer', 'cbBuffer', 'pcbBuffer', 'dwReserved'], 'HRESULT'), 'CoInternetSetFeatureEnabled': (3, ['INTERNETFEATURELIST', 'DWORD', 'BOOL'], ['FeatureEntry', 'dwFlags', 'fEnable'], 'HRESULT'), 'CoInternetIsFeatureEnabled': (2, ['INTERNETFEATURELIST', 'DWORD'], ['FeatureEntry', 'dwFlags'], 'HRESULT'), 'CoInternetIsFeatureEnabledForUrl': (4, ['INTERNETFEATURELIST', 'DWORD', 'LPCWSTR', 'IInternetSecurityManager *'], ['FeatureEntry', 'dwFlags', 'szURL', 'pSecMgr'], 'HRESULT'), 'CoInternetIsFeatureZoneElevationEnabled': (4, ['LPCWSTR', 'LPCWSTR', 'IInternetSecurityManager *', 'DWORD'], ['szFromURL', 'szToURL', 'pSecMgr', 'dwFlags'], 'HRESULT'), 'FindMimeFromData': (8, ['LPBC', 'LPCWSTR', 'LPVOID', 'DWORD', 'LPCWSTR', 'DWORD', 'LPWSTR*', 'DWORD'], ['pBC', 'pwzUrl', 'pBuffer', 'cbSize', 'pwzMimeProposed', 'dwMimeFlags', 'ppwzMimeOut', 'dwReserved'], 'HRESULT'), 'CoInternetCreateSecurityManager': (3, ['IServiceProvider *', 'IInternetSecurityManager *', 'DWORD'], ['pSP', '*ppSM', 'dwReserved'], 'HRESULT'), 'CoInternetCreateZoneManager': (3, ['IServiceProvider*', 'IInternetZoneManager**', 'DWORD'], ['pSP', 'ppZM', 'dwReserved'], 'HRESULT'), 'CoInternetGetSecurityUrl': (4, ['LPCWSTR', 'LPWSTR *', 'PSUACTION', 'DWORD'], ['pwzUrl', 'ppwzSecUrl', 'psuAction', 'dwReserved'], 'HRESULT'), 'CoInternetGetSecurityUrlEx': (4, ['IUri *', 'IUri *', 'PSUACTION', 'DWORD_PTR'], ['pUri', '*ppSecUri', 'psuAction', 'dwReserved'], 'HRESULT'), 'CompareSecurityIds': (5, ['BYTE *', 'DWORD', 'BYTE *', 'DWORD', 'DWORD'], ['secid1', 'size1', 'secid2', 'size2', 'reserved'], 'HRESULT'), 'IsInternetESCEnabledLocal': (0, [], [], 'BOOL'), 'CoInternetGetSession': (3, ['DWORD', 'IInternetSession *', 'DWORD'], ['dwSessionMode', '*ppIInternetSession', 'dwReserved'], 'HRESULT'), 'UrlMkGetSessionOption': (5, ['DWORD', 'LPVOID', 'DWORD', 'DWORD*', 'DWORD'], ['dwOption', 'pBuffer', 'dwBufferLength', 'pdwBufferLength', 'dwReserved'], 'HRESULT'), 'UrlMkSetSessionOption': (4, ['DWORD', 'LPVOID', 'DWORD', 'DWORD'], ['dwOption', 'pBuffer', 'dwBufferLength', 'Reserved'], 'HRESULT'), 'ObtainUserAgentString': (3, ['DWORD', 'char *', 'DWORD *'], ['option', 'ret', 'ret_size'], 'HRESULT'), 'CreateURLMonikerEx': (4, ['IMoniker *', 'LPCWSTR', 'IMoniker *', 'DWORD'], ['pmkContext', 'szURL', '*ppmk', 'dwFlags'], 'HRESULT'), 'CreateURLMonikerEx2': (4, ['IMoniker *', 'IUri *', 'IMoniker *', 'DWORD'], ['pmkContext', 'pUri', '*ppmk', 'dwFlags'], 'HRESULT'), 'CreateURLMoniker': (3, ['IMoniker *', 'LPCWSTR', 'IMoniker *'], ['pmkContext', 'szURL', '*ppmk'], 'HRESULT'), 'IsAsyncMoniker': (1, ['IMoniker *'], ['pmk'], 'HRESULT'), 'BindAsyncMoniker': (5, ['IMoniker *', 'DWORD', 'IBindStatusCallback *', 'REFIID', 'LPVOID *'], ['pmk', 'grfOpt', 'pbsc', 'iidResult', 'ppvResult'], 'HRESULT'), 'MkParseDisplayNameEx': (4, ['IBindCtx *', 'LPCWSTR', 'ULONG *', 'LPMONIKER *'], ['pbc', 'szDisplayName', 'pchEaten', 'ppmk'], 'HRESULT'), 'URLDownloadToCacheFileA': (6, ['LPUNKNOWN', 'LPCSTR', 'LPSTR', 'DWORD', 'DWORD', 'LPBINDSTATUSCALLBACK'], ['lpUnkCaller', 'szURL', 'szFileName', 'dwBufLength', 'dwReserved', 'pBSC'], 'HRESULT'), 'URLDownloadToCacheFileW': (6, ['LPUNKNOWN', 'LPCWSTR', 'LPWSTR', 'DWORD', 'DWORD', 'LPBINDSTATUSCALLBACK'], ['lpUnkCaller', 'szURL', 'szFileName', 'dwBufLength', 'dwReserved', 'pBSC'], 'HRESULT'), 'HlinkSimpleNavigateToMoniker': (8, ['IMoniker *', 'LPCWSTR', 'LPCWSTR', 'IUnknown *', 'IBindCtx *', 'IBindStatusCallback *', 'DWORD', 'DWORD'], ['pmkTarget', 'szLocation', 'szTargetFrameName', 'pUnk', 'pbc', 'pbsc', 'grfHLNF', 'dwReserved'], 'HRESULT'), 'HlinkSimpleNavigateToString': (8, ['LPCWSTR', 'LPCWSTR', 'LPCWSTR', 'IUnknown *', 'IBindCtx *', 'IBindStatusCallback *', 'DWORD', 'DWORD'], ['szTarget', 'szLocation', 'szTargetFrameName', 'pUnk', 'pbc', 'pbsc', 'grfHLNF', 'dwReserved'], 'HRESULT'), 'HlinkNavigateString': (2, ['IUnknown *', 'LPCWSTR'], ['pUnk', 'szTarget'], 'HRESULT'), 'GetSoftwareUpdateInfo': (2, ['LPCWSTR', 'LPSOFTDISTINFO'], ['szDistUnit', 'psdi'], 'HRESULT'), 'URLOpenBlockingStreamA': (5, ['LPUNKNOWN', 'LPCSTR', 'LPSTREAM *', 'DWORD', 'LPBINDSTATUSCALLBACK'], ['pCaller', 'szURL', 'ppStream', 'dwReserved', 'lpfnCB'], 'HRESULT'), 'URLOpenBlockingStreamW': (5, ['LPUNKNOWN', 'LPCWSTR', 'LPSTREAM *', 'DWORD', 'LPBINDSTATUSCALLBACK'], ['pCaller', 'szURL', 'ppStream', 'dwReserved', 'lpfnCB'], 'HRESULT'), 'URLOpenStreamA': (4, ['LPUNKNOWN', 'LPCSTR', 'DWORD', 'LPBINDSTATUSCALLBACK'], ['pCaller', 'szURL', 'dwReserved', 'lpfnCB'], 'HRESULT'), 'URLOpenStreamW': (4, ['LPUNKNOWN', 'LPCWSTR', 'DWORD', 'LPBINDSTATUSCALLBACK'], ['pCaller', 'szURL', 'dwReserved', 'lpfnCB'], 'HRESULT'), 'URLOpenPullStreamW': (4, ['IUnknown *', 'const WCHAR *', 'DWORD', 'IBindStatusCallback *'], ['caller', 'url', 'reserved', 'callback'], 'HRESULT'), 'CreateUri': (4, ['LPCWSTR', 'DWORD', 'DWORD_PTR', 'IUri *'], ['pwzURI', 'dwFlags', 'dwReserved', '*ppURI'], 'HRESULT'), 'CreateUriWithFragment': (5, ['LPCWSTR', 'LPCWSTR', 'DWORD', 'DWORD_PTR', 'IUri *'], ['pwzURI', 'pwzFragment', 'dwFlags', 'dwReserved', '*ppURI'], 'HRESULT'), 'CreateIUriBuilder': (4, ['IUri *', 'DWORD', 'DWORD_PTR', 'IUriBuilder *'], ['pIUri', 'dwFlags', 'dwReserved', '*ppIUriBuilder'], 'HRESULT'), 'CoInternetCombineIUri': (5, ['IUri *', 'IUri *', 'DWORD', 'IUri *', 'DWORD_PTR'], ['pBaseUri', 'pRelativeUri', 'dwCombineFlags', '*ppCombinedUri', 'dwReserved'], 'HRESULT'), 'CoInternetCombineUrlEx': (5, ['IUri *', 'LPCWSTR', 'DWORD', 'IUri *', 'DWORD_PTR'], ['pBaseUri', 'pwzRelativeUrl', 'dwCombineFlags', '*ppCombinedUri', 'dwReserved'], 'HRESULT'), 'CoInternetParseIUri': (7, ['IUri *', 'PARSEACTION', 'DWORD', 'LPWSTR', 'DWORD', 'DWORD *', 'DWORD_PTR'], ['pIUri', 'ParseAction', 'dwFlags', 'pwzResult', 'cchResult', 'pcchResult', 'dwReserved'], 'HRESULT'), 'DllMain': (3, ['HINSTANCE', 'DWORD', 'LPVOID'], ['hinstDLL', 'fdwReason', 'fImpLoad'], 'BOOL'), 'DllInstall': (2, ['BOOL', 'LPCWSTR'], ['bInstall', 'cmdline'], 'HRESULT'), 'DllCanUnloadNow': (0, [], [], 'HRESULT'), 'DllGetClassObject': (3, ['REFCLSID', 'REFIID', 'LPVOID *'], ['rclsid', 'riid', 'ppv'], 'HRESULT'), 'DllRegisterServer': (0, [], [], 'HRESULT'), 'DllUnregisterServer': (0, [], [], 'HRESULT'), 'DllRegisterServerEx': (0, [], [], 'HRESULT'), 'IsValidURL': (3, ['LPBC', 'LPCWSTR', 'DWORD'], ['pBC', 'szURL', 'dwReserved'], 'HRESULT'), 'FaultInIEFeature': (4, ['HWND', 'uCLSSPEC *', 'QUERYCONTEXT *', 'DWORD'], ['hwnd', 'pClassSpec', 'pQuery', 'flags'], 'HRESULT'), 'CoGetClassObjectFromURL': (10, ['REFCLSID', 'LPCWSTR', 'DWORD', 'DWORD', 'LPCWSTR', 'LPBINDCTX', 'DWORD', 'LPVOID', 'REFIID', 'LPVOID *'], ['rclsid', 'szCodeURL', 'dwFileVersionMS', 'dwFileVersionLS', 'szContentType', 'pBindCtx', 'dwClsContext', 'pvReserved', 'riid', 'ppv'], 'HRESULT'), 'ReleaseBindInfo': (1, ['BINDINFO*'], ['pbindinfo'], 'void'), 'CopyStgMedium': (2, ['const STGMEDIUM *', 'STGMEDIUM *'], ['src', 'dst'], 'HRESULT'), 'CopyBindInfo': (2, ['const BINDINFO *', 'BINDINFO *'], ['pcbiSrc', 'pcbiDest'], 'HRESULT'), 'GetClassFileOrMime': (7, ['LPBC', 'LPCWSTR', 'LPVOID', 'DWORD', 'LPCWSTR', 'DWORD', 'CLSID *'], ['pBC', 'pszFilename', 'pBuffer', 'cbBuffer', 'pszMimeType', 'dwReserved', 'pclsid'], 'HRESULT'), 'Extract': (2, ['void *', 'LPCSTR'], ['dest', 'szCabName'], 'HRESULT'), 'IsLoggingEnabledA': (1, ['LPCSTR'], ['url'], 'BOOL'), 'IsLoggingEnabledW': (1, ['LPCWSTR'], ['url'], 'BOOL'), 'IsProtectedModeURL': (1, ['const WCHAR *'], ['url'], 'BOOL'), 'LogSqmBits': (2, ['DWORD', 'DWORD'], ['unk1', 'unk2'], 'int'), 'LogSqmUXCommandOffsetInternal': (4, ['DWORD', 'DWORD', 'DWORD', 'DWORD'], ['unk1', 'unk2', 'unk3', 'unk4'], 'void'), 'MapUriToBrowserEmulationState': (3, ['DWORD', 'DWORD', 'DWORD'], ['unk1', 'unk2', 'unk3'], 'int'), 'MapBrowserEmulationModeToUserAgent': (2, ['DWORD', 'DWORD'], ['unk1', 'unk2'], 'int'), 'CoInternetGetBrowserProfile': (1, ['DWORD'], ['unk'], 'HRESULT'), 'FlushUrlmonZonesCache': (0, [], [], 'void'), 'RegisterMediaTypes': (3, ['UINT', 'LPCSTR *', 'CLIPFORMAT *'], ['types', 'szTypes', 'cfTypes'], 'HRESULT'), 'ShouldShowIntranetWarningSecband': (1, ['DWORD'], ['unk'], 'BOOL'), 'GetIUriPriv': (2, ['IUri *', 'void *'], ['uri', '*p'], 'HRESULT')}


dictRS_urlmon =  {'RegisterBindStatusCallback': 'S_OK', 'RevokeBindStatusCallback': 'S_OK', 'CoInternetGetSession': 'S_OK', 'CreateURLMonikerEx': 'S_OK', 'CreateURLMoniker': 'S_OK', 'BindAsyncMoniker': 'S_OK', 'CreateUri': 'S_OK', 'CreateUriWithFragment': 'S_OK', 'DllGetClassObject': 'S_OK', 'IsValidURL': 'S_OK'}


dict4_user32 =  {'CreateCaret': (4, ['HWND', 'HBITMAP', 'INT', 'INT'], ['hwnd', 'bitmap', 'width', 'height'], 'BOOL'), 'DestroyCaret': (0, [], [], 'BOOL'), 'SetCaretPos': (2, ['INT', 'INT'], ['x', 'y'], 'BOOL'), 'HideCaret': (1, ['HWND'], ['hwnd'], 'BOOL'), 'ShowCaret': (1, ['HWND'], ['hwnd'], 'BOOL'), 'GetCaretPos': (1, ['LPPOINT'], ['pt'], 'BOOL'), 'SetCaretBlinkTime': (1, ['UINT'], ['msecs'], 'BOOL'), 'GetCaretBlinkTime': (0, [], [], 'UINT'), 'RegisterClassA': (1, ['const WNDCLASSA*'], ['wc'], 'ATOM'), 'RegisterClassW': (1, ['const WNDCLASSW*'], ['wc'], 'ATOM'), 'RegisterClassExA': (1, ['const WNDCLASSEXA*'], ['wc'], 'ATOM'), 'RegisterClassExW': (1, ['const WNDCLASSEXW*'], ['wc'], 'ATOM'), 'UnregisterClassA': (2, ['LPCSTR', 'HINSTANCE'], ['className', 'hInstance'], 'BOOL'), 'UnregisterClassW': (2, ['LPCWSTR', 'HINSTANCE'], ['className', 'hInstance'], 'BOOL'), 'GetClassWord': (2, ['HWND', 'INT'], ['hwnd', 'offset'], 'WORD'), 'GetClassLongW': (2, ['HWND', 'INT'], ['hwnd', 'offset'], 'DWORD'), 'GetClassLongA': (2, ['HWND', 'INT'], ['hwnd', 'offset'], 'DWORD'), 'SetClassWord': (3, ['HWND', 'INT', 'WORD'], ['hwnd', 'offset', 'newval'], 'WORD'), 'SetClassLongW': (3, ['HWND', 'INT', 'LONG'], ['hwnd', 'offset', 'newval'], 'DWORD'), 'SetClassLongA': (3, ['HWND', 'INT', 'LONG'], ['hwnd', 'offset', 'newval'], 'DWORD'), 'GetClassNameA': (3, ['HWND', 'LPSTR', 'INT'], ['hwnd', 'buffer', 'count'], 'INT'), 'GetClassNameW': (3, ['HWND', 'LPWSTR', 'INT'], ['hwnd', 'buffer', 'count'], 'INT'), 'RealGetWindowClassA': (3, ['HWND', 'LPSTR', 'UINT'], ['hwnd', 'buffer', 'count'], 'UINT'), 'RealGetWindowClassW': (3, ['HWND', 'LPWSTR', 'UINT'], ['hwnd', 'buffer', 'count'], 'UINT'), 'GetClassInfoA': (3, ['HINSTANCE', 'LPCSTR', 'WNDCLASSA *'], ['hInstance', 'name', 'wc'], 'BOOL'), 'GetClassInfoW': (3, ['HINSTANCE', 'LPCWSTR', 'WNDCLASSW *'], ['hInstance', 'name', 'wc'], 'BOOL'), 'GetClassInfoExA': (3, ['HINSTANCE', 'LPCSTR', 'WNDCLASSEXA *'], ['hInstance', 'name', 'wc'], 'BOOL'), 'GetClassInfoExW': (3, ['HINSTANCE', 'LPCWSTR', 'WNDCLASSEXW *'], ['hInstance', 'name', 'wc'], 'BOOL'), 'GetClassLongPtrA': (2, ['HWND', 'INT'], ['hwnd', 'offset'], 'ULONG_PTR'), 'GetClassLongPtrW': (2, ['HWND', 'INT'], ['hwnd', 'offset'], 'ULONG_PTR'), 'SetClassLongPtrW': (3, ['HWND', 'INT', 'LONG_PTR'], ['hwnd', 'offset', 'newval'], 'ULONG_PTR'), 'SetClassLongPtrA': (3, ['HWND', 'INT', 'LONG_PTR'], ['hwnd', 'offset', 'newval'], 'ULONG_PTR'), 'RegisterClipboardFormatW': (1, ['LPCWSTR'], ['name'], 'UINT'), 'RegisterClipboardFormatA': (1, ['LPCSTR'], ['name'], 'UINT'), 'GetClipboardFormatNameW': (3, ['UINT', 'LPWSTR', 'INT'], ['format', 'buffer', 'maxlen'], 'INT'), 'GetClipboardFormatNameA': (3, ['UINT', 'LPSTR', 'INT'], ['format', 'buffer', 'maxlen'], 'INT'), 'OpenClipboard': (1, ['HWND'], ['hwnd'], 'BOOL'), 'CloseClipboard': (0, [], [], 'BOOL'), 'EmptyClipboard': (0, [], [], 'BOOL'), 'GetClipboardOwner': (0, [], [], 'HWND'), 'GetOpenClipboardWindow': (0, [], [], 'HWND'), 'SetClipboardViewer': (1, ['HWND'], ['hwnd'], 'HWND'), 'GetClipboardViewer': (0, [], [], 'HWND'), 'ChangeClipboardChain': (2, ['HWND', 'HWND'], ['hwnd', 'next'], 'BOOL'), 'SetClipboardData': (2, ['UINT', 'HANDLE'], ['format', 'data'], 'HANDLE'), 'CountClipboardFormats': (0, [], [], 'INT'), 'EnumClipboardFormats': (1, ['UINT'], ['format'], 'UINT'), 'IsClipboardFormatAvailable': (1, ['UINT'], ['format'], 'BOOL'), 'GetUpdatedClipboardFormats': (3, ['UINT *', 'UINT', 'UINT *'], ['formats', 'size', 'out_size'], 'BOOL'), 'GetClipboardData': (1, ['UINT'], ['format'], 'HANDLE'), 'GetPriorityClipboardFormat': (2, ['UINT *', 'INT'], ['list', 'nCount'], 'INT'), 'GetClipboardSequenceNumber': (0, [], [], 'DWORD'), 'AddClipboardFormatListener': (1, ['HWND'], ['hwnd'], 'BOOL'), 'RemoveClipboardFormatListener': (1, ['HWND'], ['hwnd'], 'BOOL'), 'CreateIconFromResourceEx': (7, ['LPBYTE', 'UINT', 'BOOL', 'DWORD', 'INT', 'INT', 'UINT'], ['bits', 'cbSize', 'bIcon', 'dwVersion', 'width', 'height', 'cFlag'], 'HICON'), 'CreateIconFromResource': (4, ['LPBYTE', 'UINT', 'BOOL', 'DWORD'], ['bits', 'cbSize', 'bIcon', 'dwVersion'], 'HICON'), 'CreateCursor': (7, ['HINSTANCE', 'int', 'int', 'int', 'int', 'const void *', 'const void *'], ['instance', 'hotspot_x', 'hotspot_y', 'width', 'height', 'and', 'xor'], 'HCURSOR'), 'CreateIcon': (7, ['HINSTANCE', 'int', 'int', 'BYTE', 'BYTE', 'const void *', 'const void *'], ['instance', 'width', 'height', 'planes', 'depth', 'and', 'xor'], 'HICON'), 'CopyIcon': (1, ['HICON'], ['icon'], 'HICON'), 'DestroyIcon': (1, ['HICON'], ['hIcon'], 'BOOL'), 'DestroyCursor': (1, ['HCURSOR'], ['hCursor'], 'BOOL'), 'DrawIcon': (4, ['HDC', 'INT', 'INT', 'HICON'], ['hdc', 'x', 'y', 'hIcon'], 'BOOL'), 'GetCursor': (0, [], [], 'HCURSOR'), 'SetSystemCursor': (2, ['HCURSOR', 'DWORD'], ['hcur', 'id'], 'BOOL'), 'LookupIconIdFromDirectoryEx': (5, ['LPBYTE', 'BOOL', 'INT', 'INT', 'UINT'], ['xdir', 'bIcon', 'width', 'height', 'cFlag'], 'INT'), 'LookupIconIdFromDirectory': (2, ['LPBYTE', 'BOOL'], ['dir', 'bIcon'], 'INT'), 'LoadCursorW': (2, ['HINSTANCE', 'LPCWSTR'], ['hInstance', 'name'], 'HCURSOR'), 'LoadCursorA': (2, ['HINSTANCE', 'LPCSTR'], ['hInstance', 'name'], 'HCURSOR'), 'LoadIconW': (2, ['HINSTANCE', 'LPCWSTR'], ['hInstance', 'name'], 'HICON'), 'LoadIconA': (2, ['HINSTANCE', 'LPCSTR'], ['hInstance', 'name'], 'HICON'), 'GetCursorFrameInfo': (5, ['HCURSOR', 'DWORD', 'DWORD', 'DWORD *', 'DWORD *'], ['hCursor', 'reserved', 'istep', 'rate_jiffies', 'num_steps'], 'HCURSOR'), 'GetIconInfo': (2, ['HICON', 'PICONINFO'], ['hIcon', 'iconinfo'], 'BOOL'), 'GetIconInfoExA': (2, ['HICON', 'ICONINFOEXA *'], ['icon', 'info'], 'BOOL'), 'GetIconInfoExW': (2, ['HICON', 'ICONINFOEXW *'], ['icon', 'info'], 'BOOL'), 'CreateIconIndirect': (1, ['PICONINFO'], ['iconinfo'], 'HICON'), 'LoadImageA': (6, ['HINSTANCE', 'LPCSTR', 'UINT', 'INT', 'INT', 'UINT'], ['hinst', 'name', 'type', 'desiredx', 'desiredy', 'loadflags'], 'HANDLE'), 'LoadImageW': (6, ['HINSTANCE', 'LPCWSTR', 'UINT', 'INT', 'INT', 'UINT'], ['hinst', 'name', 'type', 'desiredx', 'desiredy', 'loadflags'], 'HANDLE'), 'CopyImage': (5, ['HANDLE', 'UINT', 'INT', 'INT', 'UINT'], ['hnd', 'type', 'desiredx', 'desiredy', 'flags'], 'HANDLE'), 'LoadBitmapA': (2, ['HINSTANCE', 'LPCSTR'], ['instance', 'name'], 'HBITMAP'), 'DdeConnectList': (5, ['DWORD', 'HSZ', 'HSZ', 'HCONVLIST', 'PCONVCONTEXT'], ['idInst', 'hszService', 'hszTopic', 'hConvList', 'pCC'], 'HCONVLIST'), 'DdeQueryNextServer': (2, ['HCONVLIST', 'HCONV'], ['hConvList', 'hConvPrev'], 'HCONV'), 'DdeDisconnectList': (1, ['HCONVLIST'], ['hConvList'], 'BOOL'), 'DdeConnect': (4, ['DWORD', 'HSZ', 'HSZ', 'PCONVCONTEXT'], ['idInst', 'hszService', 'hszTopic', 'pCC'], 'HCONV'), 'DdeReconnect': (1, ['HCONV'], ['hConv'], 'HCONV'), 'DdeClientTransaction': (8, ['LPBYTE', 'DWORD', 'HCONV', 'HSZ', 'UINT', 'UINT', 'DWORD', 'LPDWORD'], ['pData', 'cbData', 'hConv', 'hszItem', 'wFmt', 'wType', 'dwTimeout', 'pdwResult'], 'HDDEDATA'), 'DdeAbandonTransaction': (3, ['DWORD', 'HCONV', 'DWORD'], ['idInst', 'hConv', 'idTransaction'], 'BOOL'), 'DdeDisconnect': (1, ['HCONV'], ['hConv'], 'BOOL'), 'DdeImpersonateClient': (1, ['HCONV'], ['hConv'], 'BOOL'), 'PackDDElParam': (3, ['UINT', 'UINT_PTR', 'UINT_PTR'], ['msg', 'uiLo', 'uiHi'], 'LPARAM'), 'UnpackDDElParam': (4, ['UINT', 'LPARAM', 'PUINT_PTR', 'PUINT_PTR'], ['msg', 'lParam', 'uiLo', 'uiHi'], 'BOOL'), 'FreeDDElParam': (2, ['UINT', 'LPARAM'], ['msg', 'lParam'], 'BOOL'), 'ReuseDDElParam': (5, ['LPARAM', 'UINT', 'UINT', 'UINT_PTR', 'UINT_PTR'], ['lParam', 'msgIn', 'msgOut', 'uiLo', 'uiHi'], 'LPARAM'), 'ImpersonateDdeClientWindow': (2, ['HWND', 'HWND'], ['hWndClient', 'hWndServer'], 'BOOL'), 'DdeSetQualityOfService': (3, ['HWND', 'const SECURITY_QUALITY_OF_SERVICE *', 'PSECURITY_QUALITY_OF_SERVICE'], ['hwndClient', 'pqosNew', 'pqosPrev'], 'BOOL'), 'DdeGetLastError': (1, ['DWORD'], ['idInst'], 'UINT'), 'DdeQueryStringA': (5, ['DWORD', 'HSZ', 'LPSTR', 'DWORD', 'INT'], ['idInst', 'hsz', 'psz', 'cchMax', 'iCodePage'], 'DWORD'), 'DdeQueryStringW': (5, ['DWORD', 'HSZ', 'LPWSTR', 'DWORD', 'INT'], ['idInst', 'hsz', 'psz', 'cchMax', 'iCodePage'], 'DWORD'), 'DdeCreateStringHandleA': (3, ['DWORD', 'LPCSTR', 'INT'], ['idInst', 'psz', 'codepage'], 'HSZ'), 'DdeCreateStringHandleW': (3, ['DWORD', 'LPCWSTR', 'INT'], ['idInst', 'psz', 'codepage'], 'HSZ'), 'DdeFreeStringHandle': (2, ['DWORD', 'HSZ'], ['idInst', 'hsz'], 'BOOL'), 'DdeKeepStringHandle': (2, ['DWORD', 'HSZ'], ['idInst', 'hsz'], 'BOOL'), 'DdeCmpStringHandles': (2, ['HSZ', 'HSZ'], ['hsz1', 'hsz2'], 'INT'), 'DdeInitializeA': (4, ['LPDWORD', 'PFNCALLBACK', 'DWORD', 'DWORD'], ['pidInst', 'pfnCallback', 'afCmd', 'ulRes'], 'UINT'), 'DdeInitializeW': (4, ['LPDWORD', 'PFNCALLBACK', 'DWORD', 'DWORD'], ['pidInst', 'pfnCallback', 'afCmd', 'ulRes'], 'UINT'), 'DdeUninitialize': (1, ['DWORD'], ['idInst'], 'BOOL'), 'DdeCreateDataHandle': (7, ['DWORD', 'LPBYTE', 'DWORD', 'DWORD', 'HSZ', 'UINT', 'UINT'], ['idInst', 'pSrc', 'cb', 'cbOff', 'hszItem', 'wFmt', 'afCmd'], 'HDDEDATA'), 'DdeAddData': (4, ['HDDEDATA', 'LPBYTE', 'DWORD', 'DWORD'], ['hData', 'pSrc', 'cb', 'cbOff'], 'HDDEDATA'), 'DdeGetData': (4, ['HDDEDATA', 'LPBYTE', 'DWORD', 'DWORD'], ['hData', 'pDst', 'cbMax', 'cbOff'], 'DWORD'), 'DdeAccessData': (2, ['HDDEDATA', 'LPDWORD'], ['hData', 'pcbDataSize'], 'LPBYTE'), 'DdeUnaccessData': (1, ['HDDEDATA'], ['hData'], 'BOOL'), 'DdeFreeDataHandle': (1, ['HDDEDATA'], ['hData'], 'BOOL'), 'DdeEnableCallback': (3, ['DWORD', 'HCONV', 'UINT'], ['idInst', 'hConv', 'wCmd'], 'BOOL'), 'DdeSetUserHandle': (3, ['HCONV', 'DWORD', 'DWORD'], ['hConv', 'id', 'hUser'], 'BOOL'), 'DdeQueryConvInfo': (3, ['HCONV', 'DWORD', 'PCONVINFO'], ['hConv', 'id', 'lpConvInfo'], 'UINT'), 'DdePostAdvise': (3, ['DWORD', 'HSZ', 'HSZ'], ['idInst', 'hszTopic', 'hszItem'], 'BOOL'), 'DdeNameService': (4, ['DWORD', 'HSZ', 'HSZ', 'UINT'], ['idInst', 'hsz1', 'hsz2', 'afCmd'], 'HDDEDATA'), 'DefDlgProcA': (4, ['HWND', 'UINT', 'WPARAM', 'LPARAM'], ['hwnd', 'msg', 'wParam', 'lParam'], 'LRESULT'), 'DefDlgProcW': (4, ['HWND', 'UINT', 'WPARAM', 'LPARAM'], ['hwnd', 'msg', 'wParam', 'lParam'], 'LRESULT'), 'DefWindowProcA': (4, ['HWND', 'UINT', 'WPARAM', 'LPARAM'], ['hwnd', 'msg', 'wParam', 'lParam'], 'LRESULT'), 'DesktopWndProc': (4, ['HWND', 'UINT', 'WPARAM', 'LPARAM'], ['hwnd', 'message', 'wParam', 'lParam'], 'LRESULT'), 'PaintDesktop': (1, ['HDC'], ['hdc'], 'BOOL'), 'SetDeskWallPaper': (1, ['LPCSTR'], ['filename'], 'BOOL'), 'CreateDialogParamA': (5, ['HINSTANCE', 'LPCSTR', 'HWND', 'DLGPROC', 'LPARAM'], ['hInst', 'name', 'owner', 'dlgProc', 'param'], 'HWND'), 'CreateDialogParamW': (5, ['HINSTANCE', 'LPCWSTR', 'HWND', 'DLGPROC', 'LPARAM'], ['hInst', 'name', 'owner', 'dlgProc', 'param'], 'HWND'), 'CreateDialogIndirectParamAorW': (6, ['HINSTANCE', 'LPCVOID', 'HWND', 'DLGPROC', 'LPARAM', 'DWORD'], ['hInst', 'dlgTemplate', 'owner', 'dlgProc', 'param', 'flags'], 'HWND'), 'CreateDialogIndirectParamA': (5, ['HINSTANCE', 'LPCDLGTEMPLATEA', 'HWND', 'DLGPROC', 'LPARAM'], ['hInst', 'dlgTemplate', 'owner', 'dlgProc', 'param'], 'HWND'), 'CreateDialogIndirectParamW': (5, ['HINSTANCE', 'LPCDLGTEMPLATEW', 'HWND', 'DLGPROC', 'LPARAM'], ['hInst', 'dlgTemplate', 'owner', 'dlgProc', 'param'], 'HWND'), 'DialogBoxParamA': (5, ['HINSTANCE', 'LPCSTR', 'HWND', 'DLGPROC', 'LPARAM'], ['hInst', 'name', 'owner', 'dlgProc', 'param'], 'INT_PTR'), 'DialogBoxParamW': (5, ['HINSTANCE', 'LPCWSTR', 'HWND', 'DLGPROC', 'LPARAM'], ['hInst', 'name', 'owner', 'dlgProc', 'param'], 'INT_PTR'), 'DialogBoxIndirectParamAorW': (6, ['HINSTANCE', 'LPCVOID', 'HWND', 'DLGPROC', 'LPARAM', 'DWORD'], ['hInstance', 'template', 'owner', 'dlgProc', 'param', 'flags'], 'INT_PTR'), 'DialogBoxIndirectParamA': (5, ['HINSTANCE', 'LPCDLGTEMPLATEA', 'HWND', 'DLGPROC', 'LPARAM'], ['hInstance', 'template', 'owner', 'dlgProc', 'param'], 'INT_PTR'), 'DialogBoxIndirectParamW': (5, ['HINSTANCE', 'LPCDLGTEMPLATEW', 'HWND', 'DLGPROC', 'LPARAM'], ['hInstance', 'template', 'owner', 'dlgProc', 'param'], 'INT_PTR'), 'EndDialog': (2, ['HWND', 'INT_PTR'], ['hwnd', 'retval'], 'BOOL'), 'IsDialogMessageW': (2, ['HWND', 'LPMSG'], ['hwndDlg', 'msg'], 'BOOL'), 'GetDlgCtrlID': (1, ['HWND'], ['hwnd'], 'INT'), 'GetDlgItem': (2, ['HWND', 'INT'], ['hwndDlg', 'id'], 'HWND'), 'SendDlgItemMessageA': (5, ['HWND', 'INT', 'UINT', 'WPARAM', 'LPARAM'], ['hwnd', 'id', 'msg', 'wParam', 'lParam'], 'LRESULT'), 'SendDlgItemMessageW': (5, ['HWND', 'INT', 'UINT', 'WPARAM', 'LPARAM'], ['hwnd', 'id', 'msg', 'wParam', 'lParam'], 'LRESULT'), 'SetDlgItemTextA': (3, ['HWND', 'INT', 'LPCSTR'], ['hwnd', 'id', 'lpString'], 'BOOL'), 'SetDlgItemTextW': (3, ['HWND', 'INT', 'LPCWSTR'], ['hwnd', 'id', 'lpString'], 'BOOL'), 'GetDlgItemTextA': (4, ['HWND', 'INT', 'LPSTR', 'INT'], ['hwnd', 'id', 'str', 'len'], 'UINT'), 'GetDlgItemTextW': (4, ['HWND', 'INT', 'LPWSTR', 'INT'], ['hwnd', 'id', 'str', 'len'], 'UINT'), 'SetDlgItemInt': (4, ['HWND', 'INT', 'UINT', 'BOOL'], ['hwnd', 'id', 'value', 'fSigned'], 'BOOL'), 'GetDlgItemInt': (4, ['HWND', 'INT', 'BOOL *', 'BOOL'], ['hwnd', 'id', 'translated', 'fSigned'], 'UINT'), 'CheckDlgButton': (3, ['HWND', 'INT', 'UINT'], ['hwnd', 'id', 'check'], 'BOOL'), 'IsDlgButtonChecked': (2, ['HWND', 'int'], ['hwnd', 'id'], 'UINT'), 'CheckRadioButton': (4, ['HWND', 'int', 'int', 'int'], ['hwndDlg', 'firstID', 'lastID', 'checkID'], 'BOOL'), 'GetDialogBaseUnits': (0, [], [], 'DWORD'), 'MapDialogRect': (2, ['HWND', 'LPRECT'], ['hwnd', 'rect'], 'BOOL'), 'GetNextDlgGroupItem': (3, ['HWND', 'HWND', 'BOOL'], ['hwndDlg', 'hwndCtrl', 'fPrevious'], 'HWND'), 'GetNextDlgTabItem': (3, ['HWND', 'HWND', 'BOOL'], ['hwndDlg', 'hwndCtrl', 'fPrevious'], 'HWND'), 'DlgDirSelectExA': (4, ['HWND', 'LPSTR', 'INT', 'INT'], ['hwnd', 'str', 'len', 'id'], 'BOOL'), 'DlgDirSelectExW': (4, ['HWND', 'LPWSTR', 'INT', 'INT'], ['hwnd', 'str', 'len', 'id'], 'BOOL'), 'DlgDirSelectComboBoxExA': (4, ['HWND', 'LPSTR', 'INT', 'INT'], ['hwnd', 'str', 'len', 'id'], 'BOOL'), 'DlgDirSelectComboBoxExW': (4, ['HWND', 'LPWSTR', 'INT', 'INT'], ['hwnd', 'str', 'len', 'id'], 'BOOL'), 'DlgDirListA': (5, ['HWND', 'LPSTR', 'INT', 'INT', 'UINT'], ['hDlg', 'spec', 'idLBox', 'idStatic', 'attrib'], 'INT'), 'DlgDirListW': (5, ['HWND', 'LPWSTR', 'INT', 'INT', 'UINT'], ['hDlg', 'spec', 'idLBox', 'idStatic', 'attrib'], 'INT'), 'DlgDirListComboBoxA': (5, ['HWND', 'LPSTR', 'INT', 'INT', 'UINT'], ['hDlg', 'spec', 'idCBox', 'idStatic', 'attrib'], 'INT'), 'DlgDirListComboBoxW': (5, ['HWND', 'LPWSTR', 'INT', 'INT', 'UINT'], ['hDlg', 'spec', 'idCBox', 'idStatic', 'attrib'], 'INT'), 'GetCharWidthInfo': (0, [], [], 'BOOL'), 'SetActiveWindow': (1, ['HWND'], ['hwnd'], 'HWND'), 'SetFocus': (1, ['HWND'], ['hwnd'], 'HWND'), 'SetForegroundWindow': (1, ['HWND'], ['hwnd'], 'BOOL'), 'GetActiveWindow': (0, [], [], 'HWND'), 'GetFocus': (0, [], [], 'HWND'), 'GetForegroundWindow': (0, [], [], 'HWND'), 'SetShellWindowEx': (2, ['HWND', 'HWND'], ['hwndShell', 'hwndListView'], 'BOOL'), 'SetShellWindow': (1, ['HWND'], ['hwndShell'], 'BOOL'), 'GetShellWindow': (0, [], [], 'HWND'), 'GetProgmanWindow': (0, [], [], 'HWND'), 'GetTaskmanWindow': (0, [], [], 'HWND'), 'SetWindowsHookA': (2, ['INT', 'HOOKPROC'], ['id', 'proc'], 'HHOOK'), 'SetWindowsHookW': (2, ['INT', 'HOOKPROC'], ['id', 'proc'], 'HHOOK'), 'SetWindowsHookExA': (4, ['INT', 'HOOKPROC', 'HINSTANCE', 'DWORD'], ['id', 'proc', 'inst', 'tid'], 'HHOOK'), 'SetWindowsHookExW': (4, ['INT', 'HOOKPROC', 'HINSTANCE', 'DWORD'], ['id', 'proc', 'inst', 'tid'], 'HHOOK'), 'UnhookWindowsHook': (2, ['INT', 'HOOKPROC'], ['id', 'proc'], 'BOOL'), 'UnhookWindowsHookEx': (1, ['HHOOK'], ['hhook'], 'BOOL'), 'CallNextHookEx': (4, ['HHOOK', 'INT', 'WPARAM', 'LPARAM'], ['hhook', 'code', 'wparam', 'lparam'], 'LRESULT'), 'CallMsgFilterA': (2, ['LPMSG', 'INT'], ['msg', 'code'], 'BOOL'), 'CallMsgFilterW': (2, ['LPMSG', 'INT'], ['msg', 'code'], 'BOOL'), 'SetWinEventHook': (7, ['DWORD', 'DWORD', 'HMODULE', 'WINEVENTPROC', 'DWORD', 'DWORD', 'DWORD'], ['event_min', 'event_max', 'inst', 'proc', 'pid', 'tid', 'flags'], 'HWINEVENTHOOK'), 'UnhookWinEvent': (1, ['HWINEVENTHOOK'], ['hEventHook'], 'BOOL'), 'NotifyWinEvent': (4, ['DWORD', 'HWND', 'LONG', 'LONG'], ['event', 'hwnd', 'object_id', 'child_id'], 'void'), 'IsWinEventHookInstalled': (1, ['DWORD'], ['dwEvent'], 'BOOL'), 'RegisterUserApiHook': (2, ['const struct user_api_hook *', 'struct user_api_hook *'], ['new', 'old'], 'BOOL'), 'UnregisterUserApiHook': (0, [], [], 'void'), 'IconTitleWndProc': (4, ['HWND', 'UINT', 'WPARAM', 'LPARAM'], ['hWnd', 'msg', 'wParam', 'lParam'], 'LRESULT'), 'SendInput': (3, ['UINT', 'LPINPUT', 'int'], ['count', 'inputs', 'size'], 'UINT'), 'GetCursorInfo': (1, ['PCURSORINFO'], ['pci'], 'BOOL'), 'GetCapture': (0, [], [], 'HWND'), 'GetQueueStatus': (1, ['UINT'], ['flags'], 'DWORD'), 'GetInputState': (0, [], [], 'BOOL'), 'GetLastInputInfo': (1, ['PLASTINPUTINFO'], ['plii'], 'BOOL'), 'AttachThreadInput': (3, ['DWORD', 'DWORD', 'BOOL'], ['from', 'to', 'attach'], 'BOOL'), 'SetKeyboardState': (1, ['LPBYTE'], ['state'], 'BOOL'), 'VkKeyScanA': (1, ['CHAR'], ['cChar'], 'SHORT'), 'VkKeyScanW': (1, ['WCHAR'], ['cChar'], 'SHORT'), 'VkKeyScanExA': (2, ['CHAR', 'HKL'], ['cChar', 'dwhkl'], 'WORD'), 'VkKeyScanExW': (2, ['WCHAR', 'HKL'], ['chr', 'layout'], 'WORD'), 'OemKeyScan': (1, ['WORD'], ['oem'], 'DWORD'), 'GetKeyboardType': (1, ['INT'], ['nTypeFlag'], 'INT'), 'MapVirtualKeyA': (2, ['UINT', 'UINT'], ['code', 'maptype'], 'UINT'), 'MapVirtualKeyW': (2, ['UINT', 'UINT'], ['code', 'maptype'], 'UINT'), 'MapVirtualKeyExA': (3, ['UINT', 'UINT', 'HKL'], ['code', 'maptype', 'hkl'], 'UINT'), 'MapVirtualKeyExW': (3, ['UINT', 'UINT', 'HKL'], ['code', 'type', 'layout'], 'UINT'), 'GetKBCodePage': (0, [], [], 'UINT'), 'GetKeyboardLayout': (1, ['DWORD'], ['thread_id'], 'HKL'), 'GetKeyboardLayoutNameA': (1, ['LPSTR'], ['pszKLID'], 'BOOL'), 'GetKeyboardLayoutNameW': (1, ['WCHAR *'], ['name'], 'BOOL'), 'GetKeyNameTextA': (3, ['LONG', 'LPSTR', 'INT'], ['lParam', 'lpBuffer', 'nSize'], 'INT'), 'GetKeyNameTextW': (3, ['LONG', 'LPWSTR', 'INT'], ['lparam', 'buffer', 'size'], 'INT'), 'ToUnicode': (6, ['UINT', 'UINT', 'const BYTE *', 'LPWSTR', 'int', 'UINT'], ['virtKey', 'scanCode', 'lpKeyState', 'lpwStr', 'size', 'flags'], 'INT'), 'ToUnicodeEx': (7, ['UINT', 'UINT', 'const BYTE *', 'WCHAR *', 'int', 'UINT', 'HKL'], ['virt', 'scan', 'state', 'str', 'size', 'flags', 'layout'], 'INT'), 'ToAscii': (5, ['UINT', 'UINT', 'const BYTE *', 'LPWORD', 'UINT'], ['virtKey', 'scanCode', 'lpKeyState', 'lpChar', 'flags'], 'INT'), 'ToAsciiEx': (6, ['UINT', 'UINT', 'const BYTE *', 'LPWORD', 'UINT', 'HKL'], ['virtKey', 'scanCode', 'lpKeyState', 'lpChar', 'flags', 'dwhkl'], 'INT'), 'ActivateKeyboardLayout': (2, ['HKL', 'UINT'], ['layout', 'flags'], 'HKL'), 'BlockInput': (1, ['BOOL'], ['fBlockIt'], 'BOOL'), 'GetKeyboardLayoutList': (2, ['INT', 'HKL *'], ['size', 'layouts'], 'UINT'), 'RegisterHotKey': (4, ['HWND', 'INT', 'UINT', 'UINT'], ['hwnd', 'id', 'modifiers', 'vk'], 'BOOL'), 'UnregisterHotKey': (2, ['HWND', 'INT'], ['hwnd', 'id'], 'BOOL'), 'LoadKeyboardLayoutW': (2, ['const WCHAR *', 'UINT'], ['name', 'flags'], 'HKL'), 'LoadKeyboardLayoutA': (2, ['LPCSTR', 'UINT'], ['pwszKLID', 'Flags'], 'HKL'), 'UnloadKeyboardLayout': (1, ['HKL'], ['layout'], 'BOOL'), 'GetMouseMovePointsEx': (5, ['UINT', 'LPMOUSEMOVEPOINT', 'LPMOUSEMOVEPOINT', 'int', 'DWORD'], ['size', 'ptin', 'ptout', 'count', 'resolution'], 'int'), 'EnableMouseInPointer': (1, ['BOOL'], ['enable'], 'BOOL'), 'RegisterDeviceNotificationA': (3, ['HANDLE', 'LPVOID', 'DWORD'], ['hRecipient', 'pNotificationFilter', 'dwFlags'], 'HDEVNOTIFY'), 'RegisterDeviceNotificationW': (3, ['HANDLE', 'void *', 'DWORD'], ['handle', 'filter', 'flags'], 'HDEVNOTIFY'), 'UnregisterDeviceNotification': (1, ['HDEVNOTIFY'], ['handle'], 'BOOL'), 'GetListBoxInfo': (1, ['HWND'], ['hwnd'], 'DWORD'), 'CharNextExW': (3, ['WORD', 'LPCWSTR', 'DWORD'], ['codepage', 'ptr', 'flags'], 'LPWSTR'), 'CharPrevExW': (4, ['WORD', 'LPCWSTR', 'LPCWSTR', 'DWORD'], ['codepage', 'start', 'ptr', 'flags'], 'LPSTR'), 'CharToOemA': (2, ['LPCSTR', 'LPSTR'], ['s', 'd'], 'BOOL'), 'CharToOemBuffA': (3, ['LPCSTR', 'LPSTR', 'DWORD'], ['s', 'd', 'len'], 'BOOL'), 'CharToOemBuffW': (3, ['LPCWSTR', 'LPSTR', 'DWORD'], ['s', 'd', 'len'], 'BOOL'), 'CharToOemW': (2, ['LPCWSTR', 'LPSTR'], ['s', 'd'], 'BOOL'), 'OemToCharA': (2, ['LPCSTR', 'LPSTR'], ['s', 'd'], 'BOOL'), 'OemToCharBuffA': (3, ['LPCSTR', 'LPSTR', 'DWORD'], ['s', 'd', 'len'], 'BOOL'), 'OemToCharBuffW': (3, ['LPCSTR', 'LPWSTR', 'DWORD'], ['s', 'd', 'len'], 'BOOL'), 'OemToCharW': (2, ['LPCSTR', 'LPWSTR'], ['s', 'd'], 'BOOL'), 'DefFrameProcA': (5, ['HWND', 'HWND', 'UINT', 'WPARAM', 'LPARAM'], ['hwnd', 'hwndMDIClient', 'message', 'wParam', 'lParam'], 'LRESULT'), 'DefFrameProcW': (5, ['HWND', 'HWND', 'UINT', 'WPARAM', 'LPARAM'], ['hwnd', 'hwndMDIClient', 'message', 'wParam', 'lParam'], 'LRESULT'), 'DefMDIChildProcA': (4, ['HWND', 'UINT', 'WPARAM', 'LPARAM'], ['hwnd', 'message', 'wParam', 'lParam'], 'LRESULT'), 'DefMDIChildProcW': (4, ['HWND', 'UINT', 'WPARAM', 'LPARAM'], ['hwnd', 'message', 'wParam', 'lParam'], 'LRESULT'), 'TranslateMDISysAccel': (2, ['HWND', 'LPMSG'], ['hwndClient', 'msg'], 'BOOL'), 'CalcChildScroll': (2, ['HWND', 'INT'], ['hwnd', 'scroll'], 'void'), 'ScrollChildren': (4, ['HWND', 'UINT', 'WPARAM', 'LPARAM'], ['hWnd', 'uMsg', 'wParam', 'lParam'], 'void'), 'CascadeChildWindows': (2, ['HWND', 'UINT'], ['parent', 'flags'], 'WORD'), 'TileChildWindows': (2, ['HWND', 'UINT'], ['parent', 'flags'], 'WORD'), 'DrawMenuBarTemp': (5, ['HWND', 'HDC', 'LPRECT', 'HMENU', 'HFONT'], ['hwnd', 'hDC', 'lprect', 'hMenu', 'hFont'], 'DWORD'), 'TrackPopupMenuEx': (6, ['HMENU', 'UINT', 'INT', 'INT', 'HWND', 'LPTPMPARAMS'], ['hMenu', 'wFlags', 'x', 'y', 'hWnd', 'lpTpm'], 'BOOL'), 'TrackPopupMenu': (7, ['HMENU', 'UINT', 'INT', 'INT', 'INT', 'HWND', 'const RECT *'], ['hMenu', 'wFlags', 'x', 'y', 'nReserved', 'hWnd', 'lpRect'], 'BOOL'), 'PopupMenuWndProc': (4, ['HWND', 'UINT', 'WPARAM', 'LPARAM'], ['hwnd', 'message', 'wParam', 'lParam'], 'LRESULT'), 'ChangeMenuA': (5, ['HMENU', 'UINT', 'LPCSTR', 'UINT', 'UINT'], ['hMenu', 'pos', 'data', 'id', 'flags'], 'BOOL'), 'ChangeMenuW': (5, ['HMENU', 'UINT', 'LPCWSTR', 'UINT', 'UINT'], ['hMenu', 'pos', 'data', 'id', 'flags'], 'BOOL'), 'CheckMenuItem': (3, ['HMENU', 'UINT', 'UINT'], ['hMenu', 'id', 'flags'], 'DWORD'), 'EnableMenuItem': (3, ['HMENU', 'UINT', 'UINT'], ['hMenu', 'id', 'wFlags'], 'BOOL'), 'GetMenuStringW': (5, ['HMENU', 'UINT', 'LPWSTR', 'INT', 'UINT'], ['hMenu', 'wItemID', 'str', 'nMaxSiz', 'wFlags'], 'INT'), 'HiliteMenuItem': (4, ['HWND', 'HMENU', 'UINT', 'UINT'], ['hWnd', 'hMenu', 'wItemID', 'wHilite'], 'BOOL'), 'GetMenuState': (3, ['HMENU', 'UINT', 'UINT'], ['hMenu', 'wItemID', 'wFlags'], 'UINT'), 'GetMenuItemCount': (1, ['HMENU'], ['hMenu'], 'INT'), 'GetMenuItemID': (2, ['HMENU', 'INT'], ['hMenu', 'nPos'], 'UINT'), 'InsertMenuW': (5, ['HMENU', 'UINT', 'UINT', 'UINT_PTR', 'LPCWSTR'], ['hMenu', 'pos', 'flags', 'id', 'str'], 'BOOL'), 'InsertMenuA': (5, ['HMENU', 'UINT', 'UINT', 'UINT_PTR', 'LPCSTR'], ['hMenu', 'pos', 'flags', 'id', 'str'], 'BOOL'), 'AppendMenuA': (4, ['HMENU', 'UINT', 'UINT_PTR', 'LPCSTR'], ['hMenu', 'flags', 'id', 'data'], 'BOOL'), 'AppendMenuW': (4, ['HMENU', 'UINT', 'UINT_PTR', 'LPCWSTR'], ['hMenu', 'flags', 'id', 'data'], 'BOOL'), 'RemoveMenu': (3, ['HMENU', 'UINT', 'UINT'], ['hMenu', 'id', 'flags'], 'BOOL'), 'DeleteMenu': (3, ['HMENU', 'UINT', 'UINT'], ['hMenu', 'id', 'flags'], 'BOOL'), 'ModifyMenuW': (5, ['HMENU', 'UINT', 'UINT', 'UINT_PTR', 'LPCWSTR'], ['hMenu', 'pos', 'flags', 'id', 'str'], 'BOOL'), 'ModifyMenuA': (5, ['HMENU', 'UINT', 'UINT', 'UINT_PTR', 'LPCSTR'], ['hMenu', 'pos', 'flags', 'id', 'str'], 'BOOL'), 'CreatePopupMenu': (0, [], [], 'HMENU'), 'GetMenuCheckMarkDimensions': (0, [], [], 'DWORD'), 'SetMenuItemBitmaps': (5, ['HMENU', 'UINT', 'UINT', 'HBITMAP', 'HBITMAP'], ['hMenu', 'nPos', 'wFlags', 'hNewUnCheck', 'hNewCheck'], 'BOOL'), 'CreateMenu': (0, [], [], 'HMENU'), 'DestroyMenu': (1, ['HMENU'], ['hMenu'], 'BOOL'), 'GetSystemMenu': (2, ['HWND', 'BOOL'], ['hWnd', 'bRevert'], 'HMENU'), 'SetSystemMenu': (2, ['HWND', 'HMENU'], ['hwnd', 'hMenu'], 'BOOL'), 'GetMenu': (1, ['HWND'], ['hWnd'], 'HMENU'), 'GetMenuBarInfo': (4, ['HWND', 'LONG', 'LONG', 'PMENUBARINFO'], ['hwnd', 'idObject', 'idItem', 'pmbi'], 'BOOL'), 'SetMenu': (2, ['HWND', 'HMENU'], ['hWnd', 'hMenu'], 'BOOL'), 'GetSubMenu': (2, ['HMENU', 'INT'], ['hMenu', 'nPos'], 'HMENU'), 'DrawMenuBar': (1, ['HWND'], ['hWnd'], 'BOOL'), 'EndMenu': (0, [], [], 'BOOL'), 'LoadMenuA': (2, ['HINSTANCE', 'LPCSTR'], ['instance', 'name'], 'HMENU'), 'LoadMenuW': (2, ['HINSTANCE', 'LPCWSTR'], ['instance', 'name'], 'HMENU'), 'LoadMenuIndirectW': (1, ['LPCVOID'], ['template'], 'HMENU'), 'LoadMenuIndirectA': (1, ['LPCVOID'], ['template'], 'HMENU'), 'IsMenu': (1, ['HMENU'], ['hmenu'], 'BOOL'), 'GetMenuItemInfoA': (4, ['HMENU', 'UINT', 'BOOL', 'LPMENUITEMINFOA'], ['hmenu', 'item', 'bypos', 'lpmii'], 'BOOL'), 'GetMenuItemInfoW': (4, ['HMENU', 'UINT', 'BOOL', 'LPMENUITEMINFOW'], ['hmenu', 'item', 'bypos', 'lpmii'], 'BOOL'), 'SetMenuItemInfoA': (4, ['HMENU', 'UINT', 'BOOL', 'const MENUITEMINFOA *'], ['hmenu', 'item', 'bypos', 'lpmii'], 'BOOL'), 'SetMenuItemInfoW': (4, ['HMENU', 'UINT', 'BOOL', 'const MENUITEMINFOW *'], ['hmenu', 'item', 'bypos', 'lpmii'], 'BOOL'), 'SetMenuDefaultItem': (3, ['HMENU', 'UINT', 'UINT'], ['hmenu', 'uItem', 'bypos'], 'BOOL'), 'GetMenuDefaultItem': (3, ['HMENU', 'UINT', 'UINT'], ['hmenu', 'bypos', 'flags'], 'UINT'), 'InsertMenuItemA': (4, ['HMENU', 'UINT', 'BOOL', 'const MENUITEMINFOA *'], ['hMenu', 'uItem', 'bypos', 'lpmii'], 'BOOL'), 'InsertMenuItemW': (4, ['HMENU', 'UINT', 'BOOL', 'const MENUITEMINFOW *'], ['hMenu', 'uItem', 'bypos', 'lpmii'], 'BOOL'), 'CheckMenuRadioItem': (5, ['HMENU', 'UINT', 'UINT', 'UINT', 'UINT'], ['hMenu', 'first', 'last', 'check', 'flags'], 'BOOL'), 'GetMenuItemRect': (4, ['HWND', 'HMENU', 'UINT', 'RECT *'], ['hwnd', 'hMenu', 'uItem', 'rect'], 'BOOL'), 'SetMenuContextHelpId': (2, ['HMENU', 'DWORD'], ['hMenu', 'dwContextHelpID'], 'BOOL'), 'GetMenuContextHelpId': (1, ['HMENU'], ['hMenu'], 'DWORD'), 'MenuItemFromPoint': (3, ['HWND', 'HMENU', 'POINT'], ['hWnd', 'hMenu', 'ptScreen'], 'INT'), 'CalcMenuBar': (5, ['HWND', 'DWORD', 'DWORD', 'DWORD', 'RECT *'], ['hwnd', 'left', 'right', 'top', 'rect'], 'DWORD'), 'TranslateAcceleratorA': (3, ['HWND', 'HACCEL', 'LPMSG'], ['hWnd', 'hAccel', 'msg'], 'INT'), 'TranslateAcceleratorW': (3, ['HWND', 'HACCEL', 'LPMSG'], ['hWnd', 'hAccel', 'msg'], 'INT'), 'MessageWndProc': (4, ['HWND', 'UINT', 'WPARAM', 'LPARAM'], ['hwnd', 'message', 'wParam', 'lParam'], 'LRESULT'), 'SendMessageTimeoutW': (7, ['HWND', 'UINT', 'WPARAM', 'LPARAM', 'UINT', 'UINT', 'PDWORD_PTR'], ['hwnd', 'msg', 'wparam', 'lparam', 'flags', 'timeout', 'res_ptr'], 'LRESULT'), 'SendMessageTimeoutA': (7, ['HWND', 'UINT', 'WPARAM', 'LPARAM', 'UINT', 'UINT', 'PDWORD_PTR'], ['hwnd', 'msg', 'wparam', 'lparam', 'flags', 'timeout', 'res_ptr'], 'LRESULT'), 'SendMessageW': (4, ['HWND', 'UINT', 'WPARAM', 'LPARAM'], ['hwnd', 'msg', 'wparam', 'lparam'], 'LRESULT'), 'SendMessageA': (4, ['HWND', 'UINT', 'WPARAM', 'LPARAM'], ['hwnd', 'msg', 'wparam', 'lparam'], 'LRESULT'), 'SendNotifyMessageA': (4, ['HWND', 'UINT', 'WPARAM', 'LPARAM'], ['hwnd', 'msg', 'wparam', 'lparam'], 'BOOL'), 'SendNotifyMessageW': (4, ['HWND', 'UINT', 'WPARAM', 'LPARAM'], ['hwnd', 'msg', 'wparam', 'lparam'], 'BOOL'), 'SendMessageCallbackA': (6, ['HWND', 'UINT', 'WPARAM', 'LPARAM', 'SENDASYNCPROC', 'ULONG_PTR'], ['hwnd', 'msg', 'wparam', 'lparam', 'callback', 'data'], 'BOOL'), 'SendMessageCallbackW': (6, ['HWND', 'UINT', 'WPARAM', 'LPARAM', 'SENDASYNCPROC', 'ULONG_PTR'], ['hwnd', 'msg', 'wparam', 'lparam', 'callback', 'data'], 'BOOL'), 'ReplyMessage': (1, ['LRESULT'], ['result'], 'BOOL'), 'InSendMessage': (0, [], [], 'BOOL'), 'InSendMessageEx': (1, ['LPVOID'], ['reserved'], 'DWORD'), 'PostMessageA': (4, ['HWND', 'UINT', 'WPARAM', 'LPARAM'], ['hwnd', 'msg', 'wparam', 'lparam'], 'BOOL'), 'PostMessageW': (4, ['HWND', 'UINT', 'WPARAM', 'LPARAM'], ['hwnd', 'msg', 'wparam', 'lparam'], 'BOOL'), 'PostThreadMessageA': (4, ['DWORD', 'UINT', 'WPARAM', 'LPARAM'], ['thread', 'msg', 'wparam', 'lparam'], 'BOOL'), 'PostThreadMessageW': (4, ['DWORD', 'UINT', 'WPARAM', 'LPARAM'], ['thread', 'msg', 'wparam', 'lparam'], 'BOOL'), 'PostQuitMessage': (1, ['INT'], ['exit_code'], 'void'), 'IsDialogMessageA': (2, ['HWND', 'LPMSG'], ['hwndDlg', 'pmsg'], 'BOOL'), 'TranslateMessage': (1, ['const MSG *'], ['msg'], 'BOOL'), 'GetMessagePos': (0, [], [], 'DWORD'), 'GetMessageTime': (0, [], [], 'LONG'), 'GetMessageExtraInfo': (0, [], [], 'LPARAM'), 'SetMessageExtraInfo': (1, ['LPARAM'], ['lParam'], 'LPARAM'), 'GetCurrentInputMessageSource': (1, ['INPUT_MESSAGE_SOURCE *'], ['source'], 'BOOL'), 'WaitMessage': (0, [], [], 'BOOL'), 'MsgWaitForMultipleObjectsEx': (5, ['DWORD', 'const HANDLE *', 'DWORD', 'DWORD', 'DWORD'], ['count', 'pHandles', 'timeout', 'mask', 'flags'], 'DWORD'), 'MsgWaitForMultipleObjects': (5, ['DWORD', 'const HANDLE *', 'BOOL', 'DWORD', 'DWORD'], ['count', 'handles', 'wait_all', 'timeout', 'mask'], 'DWORD'), 'WaitForInputIdle': (2, ['HANDLE', 'DWORD'], ['hProcess', 'dwTimeOut'], 'DWORD'), 'RegisterWindowMessageA': (1, ['LPCSTR'], ['str'], 'UINT'), 'RegisterWindowMessageW': (1, ['LPCWSTR'], ['str'], 'UINT'), 'BroadcastSystemMessageA': (5, ['DWORD', 'LPDWORD', 'UINT', 'WPARAM', 'LPARAM'], ['flags', 'recipients', 'msg', 'wp', 'lp'], 'LONG'), 'BroadcastSystemMessageW': (5, ['DWORD', 'LPDWORD', 'UINT', 'WPARAM', 'LPARAM'], ['flags', 'recipients', 'msg', 'wp', 'lp'], 'LONG'), 'BroadcastSystemMessageExA': (6, ['DWORD', 'LPDWORD', 'UINT', 'WPARAM', 'LPARAM', 'PBSMINFO'], ['flags', 'recipients', 'msg', 'wp', 'lp', 'pinfo'], 'LONG'), 'BroadcastSystemMessageExW': (6, ['DWORD', 'LPDWORD', 'UINT', 'WPARAM', 'LPARAM', 'PBSMINFO'], ['flags', 'recipients', 'msg', 'wp', 'lp', 'pinfo'], 'LONG'), 'SetMessageQueue': (1, ['INT'], ['size'], 'BOOL'), 'MessageBeep': (1, ['UINT'], ['i'], 'BOOL'), 'SetCoalescableTimer': (5, ['HWND', 'UINT_PTR', 'UINT', 'TIMERPROC', 'ULONG'], ['hwnd', 'id', 'timeout', 'proc', 'tolerance'], 'UINT_PTR'), 'SetTimer': (4, ['HWND', 'UINT_PTR', 'UINT', 'TIMERPROC'], ['hwnd', 'id', 'timeout', 'proc'], 'UINT_PTR'), 'SetSystemTimer': (4, ['HWND', 'UINT_PTR', 'UINT', 'TIMERPROC'], ['hwnd', 'id', 'timeout', 'proc'], 'UINT_PTR'), 'KillTimer': (2, ['HWND', 'UINT_PTR'], ['hwnd', 'id'], 'BOOL'), 'KillSystemTimer': (2, ['HWND', 'UINT_PTR'], ['hwnd', 'id'], 'BOOL'), 'IsGUIThread': (1, ['BOOL'], ['convert'], 'BOOL'), 'GetGUIThreadInfo': (2, ['DWORD', 'GUITHREADINFO *'], ['id', 'info'], 'BOOL'), 'IsHungAppWindow': (1, ['HWND'], ['hWnd'], 'BOOL'), 'ChangeWindowMessageFilter': (2, ['UINT', 'DWORD'], ['message', 'flag'], 'BOOL'), 'ChangeWindowMessageFilterEx': (4, ['HWND', 'UINT', 'DWORD', 'CHANGEFILTERSTRUCT *'], ['hwnd', 'message', 'action', 'changefilter'], 'BOOL'), 'ImmSetActiveContext': (0, [], [], 'BOOL'), 'UserSignalProc': (4, ['UINT', 'DWORD', 'DWORD', 'HMODULE16'], ['uCode', 'dwThreadOrProcessID', 'dwFlags', 'hModule'], 'WORD'), 'GetAltTabInfoA': (5, ['HWND', 'int', 'PALTTABINFO', 'LPSTR', 'UINT'], ['hwnd', 'iItem', 'pati', 'pszItemText', 'cchItemText'], 'BOOL'), 'GetAltTabInfoW': (5, ['HWND', 'int', 'PALTTABINFO', 'LPWSTR', 'UINT'], ['hwnd', 'iItem', 'pati', 'pszItemText', 'cchItemText'], 'BOOL'), 'SetDebugErrorLevel': (1, ['DWORD'], ['dwLevel'], 'VOID'), 'SetWindowStationUser': (2, ['DWORD', 'DWORD'], ['x1', 'x2'], 'DWORD'), 'RegisterLogonProcess': (2, ['HANDLE', 'BOOL'], ['hprocess', 'x'], 'DWORD'), 'SetLogonNotifyWindow': (2, ['HWINSTA', 'HWND'], ['hwinsta', 'hwnd'], 'DWORD'), 'RegisterSystemThread': (2, ['DWORD', 'DWORD'], ['flags', 'reserved'], 'void'), 'RegisterShellHookWindow': (1, ['HWND'], ['hWnd'], 'BOOL'), 'DeregisterShellHookWindow': (1, ['HWND'], ['hWnd'], 'BOOL'), 'GetAppCompatFlags': (1, ['HTASK'], ['hTask'], 'DWORD'), 'GetAppCompatFlags2': (1, ['HTASK'], ['hTask'], 'DWORD'), 'AlignRects': (4, ['LPRECT', 'DWORD', 'DWORD', 'DWORD'], ['rect', 'b', 'c', 'd'], 'BOOL'), 'LoadLocalFonts': (0, [], [], 'VOID'), 'User32InitializeImmEntryTable': (1, ['DWORD'], ['magic'], 'BOOL'), 'WINNLSGetIMEHotkey': (1, ['HWND'], ['hwnd'], 'UINT'), 'WINNLSEnableIME': (2, ['HWND', 'BOOL'], ['hwnd', 'enable'], 'BOOL'), 'WINNLSGetEnableStatus': (1, ['HWND'], ['hwnd'], 'BOOL'), 'SendIMEMessageExA': (2, ['HWND', 'LPARAM'], ['hwnd', 'lparam'], 'LRESULT'), 'SendIMEMessageExW': (2, ['HWND', 'LPARAM'], ['hwnd', 'lparam'], 'LRESULT'), 'DisableProcessWindowsGhosting': (0, [], [], 'VOID'), 'UserHandleGrantAccess': (3, ['HANDLE', 'HANDLE', 'BOOL'], ['handle', 'job', 'grant'], 'BOOL'), 'RegisterPowerSettingNotification': (3, ['HANDLE', 'const GUID *', 'DWORD'], ['recipient', 'guid', 'flags'], 'HPOWERNOTIFY'), 'UnregisterPowerSettingNotification': (1, ['HPOWERNOTIFY'], ['handle'], 'BOOL'), 'GetGestureConfig': (6, ['HWND', 'DWORD', 'DWORD', 'UINT *', 'GESTURECONFIG *', 'UINT'], ['hwnd', 'reserved', 'flags', 'count', 'config', 'size'], 'BOOL'), 'SetGestureConfig': (5, ['HWND', 'DWORD', 'UINT', 'PGESTURECONFIG', 'UINT'], ['hwnd', 'reserved', 'id', 'config', 'size'], 'BOOL'), 'IsTouchWindow': (2, ['HWND', 'PULONG'], ['hwnd', 'flags'], 'BOOL'), 'IsWindowRedirectedForPrint': (1, ['HWND'], ['hwnd'], 'BOOL'), 'RegisterPointerDeviceNotifications': (2, ['HWND', 'BOOL'], ['hwnd', 'notifyrange'], 'BOOL'), 'GetPointerDevices': (2, ['UINT32 *', 'POINTER_DEVICE_INFO *'], ['device_count', 'devices'], 'BOOL'), 'RegisterTouchHitTestingWindow': (2, ['HWND', 'ULONG'], ['hwnd', 'value'], 'BOOL'), 'GetPointerType': (2, ['UINT32', 'POINTER_INPUT_TYPE *'], ['id', 'type'], 'BOOL'), 'ImeWndProcA': (4, ['HWND', 'UINT', 'WPARAM', 'LPARAM'], ['hwnd', 'msg', 'wParam', 'lParam'], 'LRESULT'), 'ImeWndProcW': (0, [], [], 'LRESULT'), 'MessageBoxA': (4, ['HWND', 'LPCSTR', 'LPCSTR', 'UINT'], ['hWnd', 'text', 'title', 'type'], 'INT'), 'MessageBoxW': (4, ['HWND', 'LPCWSTR', 'LPCWSTR', 'UINT'], ['hwnd', 'text', 'title', 'type'], 'INT'), 'MessageBoxExA': (5, ['HWND', 'LPCSTR', 'LPCSTR', 'UINT', 'WORD'], ['hWnd', 'text', 'title', 'type', 'langid'], 'INT'), 'MessageBoxExW': (5, ['HWND', 'LPCWSTR', 'LPCWSTR', 'UINT', 'WORD'], ['hWnd', 'text', 'title', 'type', 'langid'], 'INT'), 'MessageBoxTimeoutA': (6, ['HWND', 'LPCSTR', 'LPCSTR', 'UINT', 'WORD', 'DWORD'], ['hWnd', 'text', 'title', 'type', 'langid', 'timeout'], 'INT'), 'MessageBoxTimeoutW': (6, ['HWND', 'LPCWSTR', 'LPCWSTR', 'UINT', 'WORD', 'DWORD'], ['hWnd', 'text', 'title', 'type', 'langid', 'timeout'], 'INT'), 'MessageBoxIndirectA': (1, ['LPMSGBOXPARAMSA'], ['msgbox'], 'INT'), 'MessageBoxIndirectW': (1, ['LPMSGBOXPARAMSW'], ['msgbox'], 'INT'), 'GetTitleBarInfo': (2, ['HWND', 'PTITLEBARINFO'], ['hwnd', 'tbi'], 'BOOL'), 'BeginPaint': (2, ['HWND', 'PAINTSTRUCT *'], ['hwnd', 'lps'], 'HDC'), 'EndPaint': (2, ['HWND', 'const PAINTSTRUCT *'], ['hwnd', 'lps'], 'BOOL'), 'GetDCEx': (3, ['HWND', 'HRGN', 'DWORD'], ['hwnd', 'hrgnClip', 'flags'], 'HDC'), 'GetDC': (1, ['HWND'], ['hwnd'], 'HDC'), 'GetWindowDC': (1, ['HWND'], ['hwnd'], 'HDC'), 'ReleaseDC': (2, ['HWND', 'HDC'], ['hwnd', 'hdc'], 'INT'), 'WindowFromDC': (1, ['HDC'], ['hdc'], 'HWND'), 'LockWindowUpdate': (1, ['HWND'], ['hwnd'], 'BOOL'), 'RedrawWindow': (4, ['HWND', 'const RECT *', 'HRGN', 'UINT'], ['hwnd', 'rect', 'hrgn', 'flags'], 'BOOL'), 'UpdateWindow': (1, ['HWND'], ['hwnd'], 'BOOL'), 'InvalidateRgn': (3, ['HWND', 'HRGN', 'BOOL'], ['hwnd', 'hrgn', 'erase'], 'BOOL'), 'InvalidateRect': (3, ['HWND', 'const RECT *', 'BOOL'], ['hwnd', 'rect', 'erase'], 'BOOL'), 'ValidateRgn': (2, ['HWND', 'HRGN'], ['hwnd', 'hrgn'], 'BOOL'), 'ValidateRect': (2, ['HWND', 'const RECT *'], ['hwnd', 'rect'], 'BOOL'), 'GetUpdateRgn': (3, ['HWND', 'HRGN', 'BOOL'], ['hwnd', 'hrgn', 'erase'], 'INT'), 'GetUpdateRect': (3, ['HWND', 'LPRECT', 'BOOL'], ['hwnd', 'rect', 'erase'], 'BOOL'), 'ExcludeUpdateRgn': (2, ['HDC', 'HWND'], ['hdc', 'hwnd'], 'INT'), 'ScrollWindowEx': (8, ['HWND', 'INT', 'INT', 'const RECT *', 'const RECT *', 'HRGN', 'LPRECT', 'UINT'], ['hwnd', 'dx', 'dy', 'rect', 'clipRect', 'hrgnUpdate', 'rcUpdate', 'flags'], 'INT'), 'ScrollWindow': (5, ['HWND', 'INT', 'INT', 'const RECT *', 'const RECT *'], ['hwnd', 'dx', 'dy', 'rect', 'clipRect'], 'BOOL'), 'ScrollDC': (7, ['HDC', 'INT', 'INT', 'const RECT *', 'const RECT *', 'HRGN', 'LPRECT'], ['hdc', 'dx', 'dy', 'scroll', 'clip', 'ret_update_rgn', 'update_rect'], 'BOOL'), 'PrintWindow': (3, ['HWND', 'HDC', 'UINT'], ['hwnd', 'hdcBlt', 'nFlags'], 'BOOL'), 'EnumPropsA': (2, ['HWND', 'PROPENUMPROCA'], ['hwnd', 'func'], 'INT'), 'EnumPropsW': (2, ['HWND', 'PROPENUMPROCW'], ['hwnd', 'func'], 'INT'), 'GetPropA': (2, ['HWND', 'LPCSTR'], ['hwnd', 'str'], 'HANDLE'), 'GetPropW': (2, ['HWND', 'LPCWSTR'], ['hwnd', 'str'], 'HANDLE'), 'SetPropA': (3, ['HWND', 'LPCSTR', 'HANDLE'], ['hwnd', 'str', 'handle'], 'BOOL'), 'SetPropW': (3, ['HWND', 'LPCWSTR', 'HANDLE'], ['hwnd', 'str', 'handle'], 'BOOL'), 'RemovePropA': (2, ['HWND', 'LPCSTR'], ['hwnd', 'str'], 'HANDLE'), 'RemovePropW': (2, ['HWND', 'LPCWSTR'], ['hwnd', 'str'], 'HANDLE'), 'EnumPropsExA': (3, ['HWND', 'PROPENUMPROCEXA', 'LPARAM'], ['hwnd', 'func', 'lParam'], 'INT'), 'EnumPropsExW': (3, ['HWND', 'PROPENUMPROCEXW', 'LPARAM'], ['hwnd', 'func', 'lParam'], 'INT'), 'GetRawInputDeviceList': (3, ['RAWINPUTDEVICELIST *', 'UINT *', 'UINT'], ['devices', 'device_count', 'size'], 'UINT'), 'GetRawInputData': (5, ['HRAWINPUT', 'UINT', 'void *', 'UINT *', 'UINT'], ['rawinput', 'command', 'data', 'data_size', 'header_size'], 'UINT'), 'GetRawInputDeviceInfoA': (4, ['HANDLE', 'UINT', 'void *', 'UINT *'], ['device', 'command', 'data', 'data_size'], 'UINT'), 'GetRawInputDeviceInfoW': (4, ['HANDLE', 'UINT', 'void *', 'UINT *'], ['handle', 'command', 'data', 'data_size'], 'UINT'), 'DefRawInputProc': (3, ['RAWINPUT *', 'INT', 'UINT'], ['*data', 'data_count', 'header_size'], 'LRESULT'), 'LoadAcceleratorsW': (2, ['HINSTANCE', 'LPCWSTR'], ['instance', 'name'], 'HACCEL'), 'LoadAcceleratorsA': (2, ['HINSTANCE', 'LPCSTR'], ['instance', 'lpTableName'], 'HACCEL'), 'CopyAcceleratorTableA': (3, ['HACCEL', 'LPACCEL', 'INT'], ['src', 'dst', 'count'], 'INT'), 'CopyAcceleratorTableW': (3, ['HACCEL', 'LPACCEL', 'INT'], ['src', 'dst', 'count'], 'INT'), 'CreateAcceleratorTableA': (2, ['LPACCEL', 'INT'], ['lpaccel', 'count'], 'HACCEL'), 'CreateAcceleratorTableW': (2, ['LPACCEL', 'INT'], ['lpaccel', 'count'], 'HACCEL'), 'DestroyAcceleratorTable': (1, ['HACCEL'], ['handle'], 'BOOL'), 'GetGuiResources': (2, ['HANDLE', 'DWORD'], ['hProcess', 'uiFlags'], 'DWORD'), 'GetScrollBarInfo': (3, ['HWND', 'LONG', 'LPSCROLLBARINFO'], ['hwnd', 'idObject', 'info'], 'BOOL'), 'SystemParametersInfoForDpi': (5, ['UINT', 'UINT', 'PVOID', 'UINT', 'UINT'], ['action', 'val', 'ptr', 'winini', 'dpi'], 'BOOL'), 'SystemParametersInfoW': (4, ['UINT', 'UINT', 'PVOID', 'UINT'], ['uiAction', 'uiParam', 'pvParam', 'fWinIni'], 'BOOL'), 'SystemParametersInfoA': (4, ['UINT', 'UINT', 'PVOID', 'UINT'], ['uiAction', 'uiParam', 'pvParam', 'fuWinIni'], 'BOOL'), 'GetSystemMetrics': (1, ['INT'], ['index'], 'INT'), 'GetSystemMetricsForDpi': (2, ['INT', 'UINT'], ['index', 'dpi'], 'INT'), 'SwapMouseButton': (1, ['BOOL'], ['fSwap'], 'BOOL'), 'SetDoubleClickTime': (1, ['UINT'], ['interval'], 'BOOL'), 'GetDoubleClickTime': (0, [], [], 'UINT'), 'SetSysColors': (3, ['INT', 'const INT *', 'const COLORREF *'], ['count', 'colors', 'values'], 'BOOL'), 'SetSysColorsTemp': (3, ['const COLORREF *', 'const HBRUSH *', 'DWORD_PTR'], ['pPens', 'pBrushes', 'n'], 'DWORD_PTR'), 'ChangeDisplaySettingsA': (2, ['LPDEVMODEA', 'DWORD'], ['devmode', 'flags'], 'LONG'), 'ChangeDisplaySettingsW': (2, ['LPDEVMODEW', 'DWORD'], ['devmode', 'flags'], 'LONG'), 'ChangeDisplaySettingsExA': (5, ['LPCSTR', 'LPDEVMODEA', 'HWND', 'DWORD', 'LPVOID'], ['devname', 'devmode', 'hwnd', 'flags', 'lparam'], 'LONG'), 'ChangeDisplaySettingsExW': (5, ['LPCWSTR', 'LPDEVMODEW', 'HWND', 'DWORD', 'LPVOID'], ['devname', 'devmode', 'hwnd', 'flags', 'lparam'], 'LONG'), 'EnumDisplaySettingsW': (3, ['LPCWSTR', 'DWORD', 'LPDEVMODEW'], ['name', 'n', 'devmode'], 'BOOL'), 'EnumDisplaySettingsA': (3, ['LPCSTR', 'DWORD', 'LPDEVMODEA'], ['name', 'n', 'devmode'], 'BOOL'), 'EnumDisplaySettingsExA': (4, ['LPCSTR', 'DWORD', 'LPDEVMODEA', 'DWORD'], ['lpszDeviceName', 'iModeNum', 'lpDevMode', 'dwFlags'], 'BOOL'), 'EnumDisplaySettingsExW': (4, ['LPCWSTR', 'DWORD', 'LPDEVMODEW', 'DWORD'], ['lpszDeviceName', 'iModeNum', 'lpDevMode', 'dwFlags'], 'BOOL'), 'SetProcessDpiAwarenessContext': (1, ['DPI_AWARENESS_CONTEXT'], ['context'], 'BOOL'), 'GetProcessDpiAwarenessInternal': (2, ['HANDLE', 'DPI_AWARENESS *'], ['process', 'awareness'], 'BOOL'), 'SetProcessDpiAwarenessInternal': (1, ['DPI_AWARENESS'], ['awareness'], 'BOOL'), 'AreDpiAwarenessContextsEqual': (2, ['DPI_AWARENESS_CONTEXT', 'DPI_AWARENESS_CONTEXT'], ['ctx1', 'ctx2'], 'BOOL'), 'GetAwarenessFromDpiAwarenessContext': (1, ['DPI_AWARENESS_CONTEXT'], ['context'], 'DPI_AWARENESS'), 'IsValidDpiAwarenessContext': (1, ['DPI_AWARENESS_CONTEXT'], ['context'], 'BOOL'), 'SetProcessDPIAware': (0, [], [], 'BOOL'), 'IsProcessDPIAware': (0, [], [], 'BOOL'), 'EnableNonClientDpiScaling': (1, ['HWND'], ['hwnd'], 'BOOL'), 'GetDpiForSystem': (0, [], [], 'UINT'), 'GetDpiForMonitorInternal': (4, ['HMONITOR', 'UINT', 'UINT *', 'UINT *'], ['monitor', 'type', 'x', 'y'], 'BOOL'), 'GetThreadDpiAwarenessContext': (0, [], [], 'DPI_AWARENESS_CONTEXT'), 'SetThreadDpiAwarenessContext': (1, ['DPI_AWARENESS_CONTEXT'], ['context'], 'DPI_AWARENESS_CONTEXT'), 'LogicalToPhysicalPointForPerMonitorDPI': (2, ['HWND', 'POINT *'], ['hwnd', 'pt'], 'BOOL'), 'PhysicalToLogicalPointForPerMonitorDPI': (2, ['HWND', 'POINT *'], ['hwnd', 'pt'], 'BOOL'), 'MonitorFromRect': (2, ['const RECT *', 'DWORD'], ['rect', 'flags'], 'HMONITOR'), 'MonitorFromPoint': (2, ['POINT', 'DWORD'], ['pt', 'flags'], 'HMONITOR'), 'MonitorFromWindow': (2, ['HWND', 'DWORD'], ['hWnd', 'dwFlags'], 'HMONITOR'), 'GetMonitorInfoA': (2, ['HMONITOR', 'LPMONITORINFO'], ['monitor', 'info'], 'BOOL'), 'GetMonitorInfoW': (2, ['HMONITOR', 'LPMONITORINFO'], ['monitor', 'info'], 'BOOL'), 'EnumDisplayMonitors': (4, ['HDC', 'LPRECT', 'MONITORENUMPROC', 'LPARAM'], ['hdc', 'rect', 'proc', 'lp'], 'BOOL'), 'EnumDisplayDevicesA': (4, ['LPCSTR', 'DWORD', 'DISPLAY_DEVICEA *', 'DWORD'], ['device', 'index', 'info', 'flags'], 'BOOL'), 'EnumDisplayDevicesW': (4, ['LPCWSTR', 'DWORD', 'DISPLAY_DEVICEW *', 'DWORD'], ['device', 'index', 'info', 'flags'], 'BOOL'), 'GetAutoRotationState': (1, ['AR_STATE *'], ['state'], 'BOOL'), 'GetDisplayAutoRotationPreferences': (1, ['ORIENTATION_PREFERENCE *'], ['orientation'], 'BOOL'), 'GetPhysicalCursorPos': (1, ['POINT *'], ['point'], 'BOOL'), 'SetPhysicalCursorPos': (2, ['INT', 'INT'], ['x', 'y'], 'BOOL'), 'WindowFromPhysicalPoint': (1, ['POINT'], ['pt'], 'HWND'), 'LogicalToPhysicalPoint': (2, ['HWND', 'POINT *'], ['hwnd', 'point'], 'BOOL'), 'PhysicalToLogicalPoint': (2, ['HWND', 'POINT *'], ['hwnd', 'point'], 'BOOL'), 'GetDisplayConfigBufferSizes': (3, ['UINT32', 'UINT32 *', 'UINT32 *'], ['flags', 'num_path_info', 'num_mode_info'], 'LONG'), 'QueryDisplayConfig': (6, ['UINT32', 'UINT32 *', 'DISPLAYCONFIG_PATH_INFO *', 'UINT32 *', 'DISPLAYCONFIG_MODE_INFO *', 'DISPLAYCONFIG_TOPOLOGY_ID *'], ['flags', 'numpathelements', 'pathinfo', 'numinfoelements', 'modeinfo', 'topologyid'], 'LONG'), 'DisplayConfigGetDeviceInfo': (1, ['DISPLAYCONFIG_DEVICE_INFO_HEADER *'], ['packet'], 'LONG'), 'SetDisplayConfig': (5, ['UINT32', 'DISPLAYCONFIG_PATH_INFO *', 'UINT32', 'DISPLAYCONFIG_MODE_INFO *', 'UINT32'], ['path_info_count', 'path_info', 'mode_info_count', 'mode_info', 'flags'], 'LONG'), 'DrawTextExW': (6, ['HDC', 'LPWSTR', 'INT', 'LPRECT', 'UINT', 'LPDRAWTEXTPARAMS'], ['hdc', 'str', 'i_count', 'rect', 'flags', 'dtp'], 'INT'), 'DrawTextExA': (6, ['HDC', 'LPSTR', 'INT', 'LPRECT', 'UINT', 'LPDRAWTEXTPARAMS'], ['hdc', 'str', 'count', 'rect', 'flags', 'dtp'], 'INT'), 'DrawTextW': (5, ['HDC', 'LPCWSTR', 'INT', 'LPRECT', 'UINT'], ['hdc', 'str', 'count', 'rect', 'flags'], 'INT'), 'DrawTextA': (5, ['HDC', 'LPCSTR', 'INT', 'LPRECT', 'UINT'], ['hdc', 'str', 'count', 'rect', 'flags'], 'INT'), 'GrayStringA': (9, ['HDC', 'HBRUSH', 'GRAYSTRINGPROC', 'LPARAM', 'INT', 'INT', 'INT', 'INT', 'INT'], ['hdc', 'hbr', 'gsprc', 'lParam', 'cch', 'x', 'y', 'cx', 'cy'], 'BOOL'), 'GrayStringW': (9, ['HDC', 'HBRUSH', 'GRAYSTRINGPROC', 'LPARAM', 'INT', 'INT', 'INT', 'INT', 'INT'], ['hdc', 'hbr', 'gsprc', 'lParam', 'cch', 'x', 'y', 'cx', 'cy'], 'BOOL'), 'TabbedTextOutA': (8, ['HDC', 'INT', 'INT', 'LPCSTR', 'INT', 'INT', 'const INT *', 'INT'], ['hdc', 'x', 'y', 'lpstr', 'count', 'cTabStops', 'lpTabPos', 'nTabOrg'], 'LONG'), 'TabbedTextOutW': (8, ['HDC', 'INT', 'INT', 'LPCWSTR', 'INT', 'INT', 'const INT *', 'INT'], ['hdc', 'x', 'y', 'str', 'count', 'cTabStops', 'lpTabPos', 'nTabOrg'], 'LONG'), 'GetTabbedTextExtentA': (5, ['HDC', 'LPCSTR', 'INT', 'INT', 'const INT *'], ['hdc', 'lpstr', 'count', 'cTabStops', 'lpTabPos'], 'DWORD'), 'GetTabbedTextExtentW': (5, ['HDC', 'LPCWSTR', 'INT', 'INT', 'const INT *'], ['hdc', 'lpstr', 'count', 'cTabStops', 'lpTabPos'], 'DWORD'), 'DrawEdge': (4, ['HDC', 'LPRECT', 'UINT', 'UINT'], ['hdc', 'rc', 'edge', 'flags'], 'BOOL'), 'DrawFrameControl': (4, ['HDC', 'LPRECT', 'UINT', 'UINT'], ['hdc', 'rc', 'uType', 'uState'], 'BOOL'), 'SetRect': (5, ['LPRECT', 'INT', 'INT', 'INT', 'INT'], ['rect', 'left', 'top', 'right', 'bottom'], 'BOOL'), 'SetRectEmpty': (1, ['LPRECT'], ['rect'], 'BOOL'), 'CopyRect': (2, ['RECT *', 'const RECT *'], ['dest', 'src'], 'BOOL'), 'IsRectEmpty': (1, ['const RECT *'], ['rect'], 'BOOL'), 'PtInRect': (2, ['const RECT *', 'POINT'], ['rect', 'pt'], 'BOOL'), 'OffsetRect': (3, ['LPRECT', 'INT', 'INT'], ['rect', 'x', 'y'], 'BOOL'), 'InflateRect': (3, ['LPRECT', 'INT', 'INT'], ['rect', 'x', 'y'], 'BOOL'), 'IntersectRect': (3, ['LPRECT', 'const RECT *', 'const RECT *'], ['dest', 'src1', 'src2'], 'BOOL'), 'UnionRect': (3, ['LPRECT', 'const RECT *', 'const RECT *'], ['dest', 'src1', 'src2'], 'BOOL'), 'EqualRect': (2, ['const RECT*', 'const RECT*'], ['rect1', 'rect2'], 'BOOL'), 'SubtractRect': (3, ['LPRECT', 'const RECT *', 'const RECT *'], ['dest', 'src1', 'src2'], 'BOOL'), 'FillRect': (3, ['HDC', 'const RECT *', 'HBRUSH'], ['hdc', 'rect', 'hbrush'], 'INT'), 'InvertRect': (2, ['HDC', 'const RECT *'], ['hdc', 'rect'], 'BOOL'), 'FrameRect': (3, ['HDC', 'const RECT *', 'HBRUSH'], ['hdc', 'rect', 'hbrush'], 'INT'), 'DrawFocusRect': (2, ['HDC', 'const RECT*'], ['hdc', 'rc'], 'BOOL'), 'DrawAnimatedRects': (4, ['HWND', 'INT', 'const RECT*', 'const RECT*'], ['hwnd', 'idAni', 'lprcFrom', 'lprcTo'], 'BOOL'), 'DrawStateA': (10, ['HDC', 'HBRUSH', 'DRAWSTATEPROC', 'LPARAM', 'WPARAM', 'INT', 'INT', 'INT', 'INT', 'UINT'], ['hdc', 'hbr', 'func', 'ldata', 'wdata', 'x', 'y', 'cx', 'cy', 'flags'], 'BOOL'), 'DrawStateW': (10, ['HDC', 'HBRUSH', 'DRAWSTATEPROC', 'LPARAM', 'WPARAM', 'INT', 'INT', 'INT', 'INT', 'UINT'], ['hdc', 'hbr', 'func', 'ldata', 'wdata', 'x', 'y', 'cx', 'cy', 'flags'], 'BOOL'), 'UserSelectPalette': (3, ['HDC', 'HPALETTE', 'BOOL'], ['hDC', 'hPal', 'bForceBackground'], 'HPALETTE'), 'UserRealizePalette': (1, ['HDC'], ['hDC'], 'UINT'), 'DllMain': (3, ['HINSTANCE', 'DWORD', 'LPVOID'], ['inst', 'reason', 'reserved'], 'BOOL'), 'ExitWindowsEx': (2, ['UINT', 'DWORD'], ['flags', 'reason'], 'BOOL'), 'LockWorkStation': (0, [], [], 'BOOL'), 'RegisterServicesProcess': (1, ['DWORD'], ['ServicesProcessId'], 'int'), 'ShutdownBlockReasonCreate': (2, ['HWND', 'LPCWSTR'], ['hwnd', 'reason'], 'BOOL'), 'ShutdownBlockReasonDestroy': (1, ['HWND'], ['hwnd'], 'BOOL'), 'DestroyWindow': (1, ['HWND'], ['hwnd'], 'BOOL'), 'CloseWindow': (1, ['HWND'], ['hwnd'], 'BOOL'), 'OpenIcon': (1, ['HWND'], ['hwnd'], 'BOOL'), 'FindWindowExW': (4, ['HWND', 'HWND', 'LPCWSTR', 'LPCWSTR'], ['parent', 'child', 'className', 'title'], 'HWND'), 'FindWindowA': (2, ['LPCSTR', 'LPCSTR'], ['className', 'title'], 'HWND'), 'FindWindowExA': (4, ['HWND', 'HWND', 'LPCSTR', 'LPCSTR'], ['parent', 'child', 'className', 'title'], 'HWND'), 'FindWindowW': (2, ['LPCWSTR', 'LPCWSTR'], ['className', 'title'], 'HWND'), 'GetDesktopWindow': (0, [], [], 'HWND'), 'EnableWindow': (2, ['HWND', 'BOOL'], ['hwnd', 'enable'], 'BOOL'), 'IsWindowEnabled': (1, ['HWND'], ['hWnd'], 'BOOL'), 'IsWindowUnicode': (1, ['HWND'], ['hwnd'], 'BOOL'), 'GetWindowDpiAwarenessContext': (1, ['HWND'], ['hwnd'], 'DPI_AWARENESS_CONTEXT'), 'GetDpiForWindow': (1, ['HWND'], ['hwnd'], 'UINT'), 'GetWindowWord': (2, ['HWND', 'INT'], ['hwnd', 'offset'], 'WORD'), 'GetWindowLongA': (2, ['HWND', 'INT'], ['hwnd', 'offset'], 'LONG'), 'GetWindowLongW': (2, ['HWND', 'INT'], ['hwnd', 'offset'], 'LONG'), 'SetWindowWord': (3, ['HWND', 'INT', 'WORD'], ['hwnd', 'offset', 'newval'], 'WORD'), 'GetWindowTextA': (3, ['HWND', 'LPSTR', 'INT'], ['hwnd', 'lpString', 'nMaxCount'], 'INT'), 'InternalGetWindowText': (3, ['HWND', 'LPWSTR', 'INT'], ['hwnd', 'lpString', 'nMaxCount'], 'INT'), 'GetWindowTextW': (3, ['HWND', 'LPWSTR', 'INT'], ['hwnd', 'lpString', 'nMaxCount'], 'INT'), 'GetWindowTextLengthA': (1, ['HWND'], ['hwnd'], 'INT'), 'GetWindowTextLengthW': (1, ['HWND'], ['hwnd'], 'INT'), 'IsWindow': (1, ['HWND'], ['hwnd'], 'BOOL'), 'GetWindowThreadProcessId': (2, ['HWND', 'LPDWORD'], ['hwnd', 'process'], 'DWORD'), 'GetParent': (1, ['HWND'], ['hwnd'], 'HWND'), 'GetAncestor': (2, ['HWND', 'UINT'], ['hwnd', 'type'], 'HWND'), 'SetParent': (2, ['HWND', 'HWND'], ['hwnd', 'parent'], 'HWND'), 'IsChild': (2, ['HWND', 'HWND'], ['parent', 'child'], 'BOOL'), 'IsWindowVisible': (1, ['HWND'], ['hwnd'], 'BOOL'), 'GetTopWindow': (1, ['HWND'], ['hwnd'], 'HWND'), 'GetWindow': (2, ['HWND', 'UINT'], ['hwnd', 'rel'], 'HWND'), 'ShowOwnedPopups': (2, ['HWND', 'BOOL'], ['owner', 'fShow'], 'BOOL'), 'GetLastActivePopup': (1, ['HWND'], ['hwnd'], 'HWND'), 'EnumWindows': (2, ['WNDENUMPROC', 'LPARAM'], ['lpEnumFunc', 'lParam'], 'BOOL'), 'EnumThreadWindows': (3, ['DWORD', 'WNDENUMPROC', 'LPARAM'], ['id', 'func', 'lParam'], 'BOOL'), 'EnumDesktopWindows': (3, ['HDESK', 'WNDENUMPROC', 'LPARAM'], ['desktop', 'func', 'lparam'], 'BOOL'), 'EnumChildWindows': (3, ['HWND', 'WNDENUMPROC', 'LPARAM'], ['parent', 'func', 'lParam'], 'BOOL'), 'AnyPopup': (0, [], [], 'BOOL'), 'FlashWindow': (2, ['HWND', 'BOOL'], ['hWnd', 'bInvert'], 'BOOL'), 'FlashWindowEx': (1, ['PFLASHWINFO'], ['pfinfo'], 'BOOL'), 'GetWindowContextHelpId': (1, ['HWND'], ['hwnd'], 'DWORD'), 'SetWindowContextHelpId': (2, ['HWND', 'DWORD'], ['hwnd', 'id'], 'BOOL'), 'DragDetect': (2, ['HWND', 'POINT'], ['hWnd', 'pt'], 'BOOL'), 'GetWindowModuleFileNameA': (3, ['HWND', 'LPSTR', 'UINT'], ['hwnd', 'module', 'size'], 'UINT'), 'GetWindowModuleFileNameW': (3, ['HWND', 'LPWSTR', 'UINT'], ['hwnd', 'module', 'size'], 'UINT'), 'SwitchDesktop': (1, ['HDESK'], ['hDesktop'], 'BOOL'), 'SetLayeredWindowAttributes': (4, ['HWND', 'COLORREF', 'BYTE', 'DWORD'], ['hwnd', 'key', 'alpha', 'flags'], 'BOOL'), 'GetLayeredWindowAttributes': (4, ['HWND', 'COLORREF *', 'BYTE *', 'DWORD *'], ['hwnd', 'key', 'alpha', 'flags'], 'BOOL'), 'UpdateLayeredWindowIndirect': (2, ['HWND', 'const UPDATELAYEREDWINDOWINFO *'], ['hwnd', 'info'], 'BOOL'), 'UpdateLayeredWindow': (9, ['HWND', 'HDC', 'POINT *', 'SIZE *', 'HDC', 'POINT *', 'COLORREF', 'BLENDFUNCTION *', 'DWORD'], ['hwnd', 'hdcDst', 'pptDst', 'psize', 'hdcSrc', 'pptSrc', 'crKey', 'pblend', 'flags'], 'BOOL'), 'GetProcessDefaultLayout': (1, ['DWORD *'], ['layout'], 'BOOL'), 'SetProcessDefaultLayout': (1, ['DWORD'], ['layout'], 'BOOL'), 'GetWindowLongPtrW': (2, ['HWND', 'INT'], ['hwnd', 'offset'], 'LONG_PTR'), 'GetWindowLongPtrA': (2, ['HWND', 'INT'], ['hwnd', 'offset'], 'LONG_PTR'), 'SetWindowLongPtrW': (3, ['HWND', 'INT', 'LONG_PTR'], ['hwnd', 'offset', 'newval'], 'LONG_PTR'), 'SetWindowLongPtrA': (3, ['HWND', 'INT', 'LONG_PTR'], ['hwnd', 'offset', 'newval'], 'LONG_PTR'), 'RegisterTouchWindow': (2, ['HWND', 'ULONG'], ['hwnd', 'flags'], 'BOOL'), 'UnregisterTouchWindow': (1, ['HWND'], ['hwnd'], 'BOOL'), 'CloseTouchInputHandle': (1, ['HTOUCHINPUT'], ['handle'], 'BOOL'), 'GetTouchInputInfo': (4, ['HTOUCHINPUT', 'UINT', 'TOUCHINPUT *', 'int'], ['handle', 'count', 'ptr', 'size'], 'BOOL'), 'GetGestureInfo': (2, ['HGESTUREINFO', 'PGESTUREINFO'], ['handle', 'ptr'], 'BOOL'), 'GetWindowDisplayAffinity': (2, ['HWND', 'DWORD *'], ['hwnd', 'affinity'], 'BOOL'), 'SetWindowDisplayAffinity': (2, ['HWND', 'DWORD'], ['hwnd', 'affinity'], 'BOOL'), 'SetWindowCompositionAttribute': (2, ['HWND', 'void *'], ['hwnd', 'data'], 'BOOL'), 'InternalGetWindowIcon': (2, ['HWND', 'UINT'], ['hwnd', 'type'], 'HICON'), 'WinHelpA': (4, ['HWND', 'LPCSTR', 'UINT', 'ULONG_PTR'], ['hWnd', 'lpHelpFile', 'wCommand', 'dwData'], 'BOOL'), 'WinHelpW': (4, ['HWND', 'LPCWSTR', 'UINT', 'ULONG_PTR'], ['hWnd', 'helpFile', 'command', 'dwData'], 'BOOL'), 'SwitchToThisWindow': (2, ['HWND', 'BOOL'], ['hwnd', 'alt_tab'], 'void'), 'GetWindowRect': (2, ['HWND', 'LPRECT'], ['hwnd', 'rect'], 'BOOL'), 'GetWindowRgnBox': (2, ['HWND', 'LPRECT'], ['hwnd', 'prect'], 'int'), 'SetWindowRgn': (3, ['HWND', 'HRGN', 'BOOL'], ['hwnd', 'hrgn', 'bRedraw'], 'int'), 'GetClientRect': (2, ['HWND', 'LPRECT'], ['hwnd', 'rect'], 'BOOL'), 'WindowFromPoint': (1, ['POINT'], ['pt'], 'HWND'), 'ChildWindowFromPoint': (2, ['HWND', 'POINT'], ['hwndParent', 'pt'], 'HWND'), 'RealChildWindowFromPoint': (2, ['HWND', 'POINT'], ['hwndParent', 'pt'], 'HWND'), 'ChildWindowFromPointEx': (3, ['HWND', 'POINT', 'UINT'], ['hwndParent', 'pt', 'uFlags'], 'HWND'), 'MapWindowPoints': (4, ['HWND', 'HWND', 'LPPOINT', 'UINT'], ['hwndFrom', 'hwndTo', 'lppt', 'count'], 'INT'), 'ClientToScreen': (2, ['HWND', 'LPPOINT'], ['hwnd', 'lppnt'], 'BOOL'), 'ScreenToClient': (2, ['HWND', 'LPPOINT'], ['hwnd', 'lppnt'], 'BOOL'), 'IsIconic': (1, ['HWND'], ['hWnd'], 'BOOL'), 'IsZoomed': (1, ['HWND'], ['hWnd'], 'BOOL'), 'AllowSetForegroundWindow': (1, ['DWORD'], ['procid'], 'BOOL'), 'LockSetForegroundWindow': (1, ['UINT'], ['lockcode'], 'BOOL'), 'BringWindowToTop': (1, ['HWND'], ['hwnd'], 'BOOL'), 'MoveWindow': (6, ['HWND', 'INT', 'INT', 'INT', 'INT', 'BOOL'], ['hwnd', 'x', 'y', 'cx', 'cy', 'repaint'], 'BOOL'), 'ShowWindowAsync': (2, ['HWND', 'INT'], ['hwnd', 'cmd'], 'BOOL'), 'ShowWindow': (2, ['HWND', 'INT'], ['hwnd', 'cmd'], 'BOOL'), 'GetInternalWindowPos': (3, ['HWND', 'LPRECT', 'LPPOINT'], ['hwnd', 'rectWnd', 'ptIcon'], 'UINT'), 'GetWindowPlacement': (2, ['HWND', 'WINDOWPLACEMENT *'], ['hwnd', 'wndpl'], 'BOOL'), 'SetWindowPlacement': (2, ['HWND', 'const WINDOWPLACEMENT *'], ['hwnd', 'wpl'], 'BOOL'), 'AnimateWindow': (3, ['HWND', 'DWORD', 'DWORD'], ['hwnd', 'dwTime', 'dwFlags'], 'BOOL'), 'SetInternalWindowPos': (4, ['HWND', 'UINT', 'LPRECT', 'LPPOINT'], ['hwnd', 'showCmd', 'rect', 'pt'], 'void'), 'SetWindowPos': (7, ['HWND', 'HWND', 'INT', 'INT', 'INT', 'INT', 'UINT'], ['hwnd', 'hwndInsertAfter', 'x', 'y', 'cx', 'cy', 'flags'], 'BOOL'), 'BeginDeferWindowPos': (1, ['INT'], ['count'], 'HDWP'), 'DeferWindowPos': (8, ['HDWP', 'HWND', 'HWND', 'INT', 'INT', 'INT', 'INT', 'UINT'], ['hdwp', 'hwnd', 'hwndAfter', 'x', 'y', 'cx', 'cy', 'flags'], 'HDWP'), 'EndDeferWindowPos': (1, ['HDWP'], ['hdwp'], 'BOOL'), 'ArrangeIconicWindows': (1, ['HWND'], ['parent'], 'UINT'), 'ButtonWndProcA': (4, ['HWND', 'UINT', 'WPARAM', 'LPARAM'], ['hwnd', 'msg', 'wParam', 'lParam'], 'LRESULT'), 'ButtonWndProcW': (0, [], [], 'LRESULT'), 'ComboWndProcA': (0, [], [], 'LRESULT'), 'ComboWndProcW': (0, [], [], 'LRESULT'), 'EditWndProcA': (0, [], [], 'LRESULT'), 'EditWndProcW': (0, [], [], 'LRESULT'), 'ListBoxWndProcA': (0, [], [], 'LRESULT'), 'ListBoxWndProcW': (0, [], [], 'LRESULT'), 'MDIClientWndProcA': (0, [], [], 'LRESULT'), 'MDIClientWndProcW': (0, [], [], 'LRESULT'), 'ScrollBarWndProcA': (0, [], [], 'LRESULT'), 'ScrollBarWndProcW': (0, [], [], 'LRESULT'), 'StaticWndProcA': (0, [], [], 'LRESULT'), 'StaticWndProcW': (0, [], [], 'LRESULT'), 'CallWindowProcW': (5, ['WNDPROC', 'HWND', 'UINT', 'WPARAM', 'LPARAM'], ['func', 'hwnd', 'msg', 'wParam', 'lParam'], 'LRESULT'), 'UserRegisterWowHandlers': (2, ['const struct wow_handlers16 *', 'struct wow_handlers32 *'], ['new', 'orig'], 'void'), 'CreateWindowStationA': (4, ['LPCSTR', 'DWORD', 'ACCESS_MASK', 'LPSECURITY_ATTRIBUTES'], ['name', 'flags', 'access', 'sa'], 'HWINSTA'), 'CreateWindowStationW': (4, ['LPCWSTR', 'DWORD', 'ACCESS_MASK', 'LPSECURITY_ATTRIBUTES'], ['name', 'flags', 'access', 'sa'], 'HWINSTA'), 'OpenWindowStationA': (3, ['LPCSTR', 'BOOL', 'ACCESS_MASK'], ['name', 'inherit', 'access'], 'HWINSTA'), 'OpenWindowStationW': (3, ['LPCWSTR', 'BOOL', 'ACCESS_MASK'], ['name', 'inherit', 'access'], 'HWINSTA'), 'EnumWindowStationsA': (2, ['WINSTAENUMPROCA', 'LPARAM'], ['func', 'lparam'], 'BOOL'), 'EnumWindowStationsW': (2, ['WINSTAENUMPROCW', 'LPARAM'], ['func', 'lparam'], 'BOOL'), 'CreateDesktopA': (6, ['LPCSTR', 'LPCSTR', 'LPDEVMODEA', 'DWORD', 'ACCESS_MASK', 'LPSECURITY_ATTRIBUTES'], ['name', 'device', 'devmode', 'flags', 'access', 'sa'], 'HDESK'), 'CreateDesktopW': (6, ['LPCWSTR', 'LPCWSTR', 'LPDEVMODEW', 'DWORD', 'ACCESS_MASK', 'LPSECURITY_ATTRIBUTES'], ['name', 'device', 'devmode', 'flags', 'access', 'sa'], 'HDESK'), 'OpenDesktopA': (4, ['LPCSTR', 'DWORD', 'BOOL', 'ACCESS_MASK'], ['name', 'flags', 'inherit', 'access'], 'HDESK'), 'OpenDesktopW': (4, ['LPCWSTR', 'DWORD', 'BOOL', 'ACCESS_MASK'], ['name', 'flags', 'inherit', 'access'], 'HDESK'), 'SetThreadDesktop': (1, ['HDESK'], ['handle'], 'BOOL'), 'EnumDesktopsA': (3, ['HWINSTA', 'DESKTOPENUMPROCA', 'LPARAM'], ['winsta', 'func', 'lparam'], 'BOOL'), 'EnumDesktopsW': (3, ['HWINSTA', 'DESKTOPENUMPROCW', 'LPARAM'], ['winsta', 'func', 'lparam'], 'BOOL'), 'GetUserObjectInformationA': (5, ['HANDLE', 'INT', 'LPVOID', 'DWORD', 'LPDWORD'], ['handle', 'index', 'info', 'len', 'needed'], 'BOOL'), 'SetUserObjectInformationA': (4, ['HANDLE', 'INT', 'LPVOID', 'DWORD'], ['handle', 'index', 'info', 'len'], 'BOOL'), 'GetUserObjectSecurity': (5, ['HANDLE', 'PSECURITY_INFORMATION', 'PSECURITY_DESCRIPTOR', 'DWORD', 'LPDWORD'], ['handle', 'info', 'sid', 'len', 'needed'], 'BOOL'), 'SetUserObjectSecurity': (3, ['HANDLE', 'PSECURITY_INFORMATION', 'PSECURITY_DESCRIPTOR'], ['handle', 'info', 'sid'], 'BOOL'), 'wvsprintfA': (3, ['LPSTR', 'LPCSTR', 'va_list'], ['buffer', 'spec', 'args'], 'INT'), 'wvsprintfW': (3, ['LPWSTR', 'LPCWSTR', 'va_list'], ['buffer', 'spec', 'args'], 'INT')}


dictRS_user32 =  {'CreateIcon': 'handle', 'GetCursorFrameInfo': 'handle', 'LoadImageW': 'handle', 'CopyImage': 'handle', 'DdeConnectList': 'handle', 'DdeDisconnectList': 'True', 'DdeCreateStringHandleW': 'handle', 'DdeInitializeW': 'DMLERR_NO_ERROR', 'DdeUninitialize': 'True', 'DdePostAdvise': 'True', 'DdeNameService': 'Non-zero', 'SetWinEventHook': 'handle', 'UnhookWinEvent': 'True', 'GetMouseMovePointsEx': 'count of point set in the buffer', 'GetDC': 'handle', 'ReleaseDC': 'Non-zero', 'DestroyAcceleratorTable': 'True'}


dict4_wininet =  {'InternetGetCookieExW': (6, ['LPCWSTR', 'LPCWSTR', 'LPWSTR', 'LPDWORD', 'DWORD', 'void *'], ['lpszUrl', 'lpszCookieName', 'lpCookieData', 'lpdwSize', 'flags', 'reserved'], 'BOOL'), 'InternetGetCookieW': (4, ['const WCHAR *', 'const WCHAR *', 'WCHAR *', 'DWORD *'], ['url', 'name', 'data', 'size'], 'BOOL'), 'InternetGetCookieExA': (6, ['LPCSTR', 'LPCSTR', 'LPSTR', 'LPDWORD', 'DWORD', 'void *'], ['lpszUrl', 'lpszCookieName', 'lpCookieData', 'lpdwSize', 'flags', 'reserved'], 'BOOL'), 'InternetGetCookieA': (4, ['const char *', 'const char *', 'char *', 'DWORD *'], ['url', 'name', 'data', 'size'], 'BOOL'), 'IsDomainLegalCookieDomainW': (2, ['const WCHAR *', 'const WCHAR *'], ['domain', 'full_domain'], 'BOOL'), 'InternetSetCookieExW': (5, ['LPCWSTR', 'LPCWSTR', 'LPCWSTR', 'DWORD', 'DWORD_PTR'], ['lpszUrl', 'lpszCookieName', 'lpCookieData', 'flags', 'reserved'], 'DWORD'), 'InternetSetCookieW': (3, ['const WCHAR *', 'const WCHAR *', 'const WCHAR *'], ['url', 'name', 'data'], 'BOOL'), 'InternetSetCookieA': (3, ['LPCSTR', 'LPCSTR', 'LPCSTR'], ['lpszUrl', 'lpszCookieName', 'lpCookieData'], 'BOOL'), 'InternetSetCookieExA': (5, ['LPCSTR', 'LPCSTR', 'LPCSTR', 'DWORD', 'DWORD_PTR'], ['lpszURL', 'lpszCookieName', 'lpszCookieData', 'dwFlags', 'dwReserved'], 'DWORD'), 'InternetClearAllPerSiteCookieDecisions': (0, [], [], 'BOOL'), 'InternetEnumPerSiteCookieDecisionA': (4, ['LPSTR', 'ULONG *', 'ULONG *', 'ULONG'], ['pszSiteName', 'pcSiteNameSize', 'pdwDecision', 'dwIndex'], 'BOOL'), 'InternetEnumPerSiteCookieDecisionW': (4, ['LPWSTR', 'ULONG *', 'ULONG *', 'ULONG'], ['pszSiteName', 'pcSiteNameSize', 'pdwDecision', 'dwIndex'], 'BOOL'), 'InternetGetPerSiteCookieDecisionA': (2, ['LPCSTR', 'ULONG *'], ['pwchHostName', 'pResult'], 'BOOL'), 'InternetGetPerSiteCookieDecisionW': (2, ['LPCWSTR', 'ULONG *'], ['pwchHostName', 'pResult'], 'BOOL'), 'InternetSetPerSiteCookieDecisionA': (2, ['LPCSTR', 'DWORD'], ['pchHostName', 'dwDecision'], 'BOOL'), 'InternetSetPerSiteCookieDecisionW': (2, ['LPCWSTR', 'DWORD'], ['pchHostName', 'dwDecision'], 'BOOL'), 'WNetCachePassword': (0, [], [], 'DWORD'), 'WNetGetCachedPassword': (0, [], [], 'DWORD'), 'InternetErrorDlg': (5, ['HWND', 'HINTERNET', 'DWORD', 'DWORD', 'LPVOID*'], ['hWnd', 'hRequest', 'dwError', 'dwFlags', 'lppvData'], 'DWORD'), 'InternetShowSecurityInfoByURLA': (2, ['LPCSTR', 'HWND'], ['url', 'window'], 'BOOL'), 'InternetShowSecurityInfoByURLW': (2, ['LPCWSTR', 'HWND'], ['url', 'window'], 'BOOL'), 'FtpPutFileA': (5, ['HINTERNET', 'LPCSTR', 'LPCSTR', 'DWORD', 'DWORD_PTR'], ['hConnect', 'lpszLocalFile', 'lpszNewRemoteFile', 'dwFlags', 'dwContext'], 'BOOL'), 'FtpPutFileW': (5, ['HINTERNET', 'LPCWSTR', 'LPCWSTR', 'DWORD', 'DWORD_PTR'], ['hConnect', 'lpszLocalFile', 'lpszNewRemoteFile', 'dwFlags', 'dwContext'], 'BOOL'), 'FtpSetCurrentDirectoryA': (2, ['HINTERNET', 'LPCSTR'], ['hConnect', 'lpszDirectory'], 'BOOL'), 'FtpSetCurrentDirectoryW': (2, ['HINTERNET', 'LPCWSTR'], ['hConnect', 'lpszDirectory'], 'BOOL'), 'FtpCreateDirectoryA': (2, ['HINTERNET', 'LPCSTR'], ['hConnect', 'lpszDirectory'], 'BOOL'), 'FtpCreateDirectoryW': (2, ['HINTERNET', 'LPCWSTR'], ['hConnect', 'lpszDirectory'], 'BOOL'), 'FtpFindFirstFileA': (5, ['HINTERNET', 'LPCSTR', 'LPWIN32_FIND_DATAA', 'DWORD', 'DWORD_PTR'], ['hConnect', 'lpszSearchFile', 'lpFindFileData', 'dwFlags', 'dwContext'], 'HINTERNET'), 'FtpFindFirstFileW': (5, ['HINTERNET', 'LPCWSTR', 'LPWIN32_FIND_DATAW', 'DWORD', 'DWORD_PTR'], ['hConnect', 'lpszSearchFile', 'lpFindFileData', 'dwFlags', 'dwContext'], 'HINTERNET'), 'FtpGetCurrentDirectoryA': (3, ['HINTERNET', 'LPSTR', 'LPDWORD'], ['hFtpSession', 'lpszCurrentDirectory', 'lpdwCurrentDirectory'], 'BOOL'), 'FtpGetCurrentDirectoryW': (3, ['HINTERNET', 'LPWSTR', 'LPDWORD'], ['hFtpSession', 'lpszCurrentDirectory', 'lpdwCurrentDirectory'], 'BOOL'), 'FtpOpenFileA': (5, ['HINTERNET', 'LPCSTR', 'DWORD', 'DWORD', 'DWORD_PTR'], ['hFtpSession', 'lpszFileName', 'fdwAccess', 'dwFlags', 'dwContext'], 'HINTERNET'), 'FtpOpenFileW': (5, ['HINTERNET', 'LPCWSTR', 'DWORD', 'DWORD', 'DWORD_PTR'], ['hFtpSession', 'lpszFileName', 'fdwAccess', 'dwFlags', 'dwContext'], 'HINTERNET'), 'FtpGetFileA': (7, ['HINTERNET', 'LPCSTR', 'LPCSTR', 'BOOL', 'DWORD', 'DWORD', 'DWORD_PTR'], ['hInternet', 'lpszRemoteFile', 'lpszNewFile', 'fFailIfExists', 'dwLocalFlagsAttribute', 'dwInternetFlags', 'dwContext'], 'BOOL'), 'FtpGetFileW': (7, ['HINTERNET', 'LPCWSTR', 'LPCWSTR', 'BOOL', 'DWORD', 'DWORD', 'DWORD_PTR'], ['hInternet', 'lpszRemoteFile', 'lpszNewFile', 'fFailIfExists', 'dwLocalFlagsAttribute', 'dwInternetFlags', 'dwContext'], 'BOOL'), 'FtpGetFileSize': (2, ['HINTERNET', 'LPDWORD'], ['hFile', 'lpdwFileSizeHigh'], 'DWORD'), 'FtpDeleteFileA': (2, ['HINTERNET', 'LPCSTR'], ['hFtpSession', 'lpszFileName'], 'BOOL'), 'FtpDeleteFileW': (2, ['HINTERNET', 'LPCWSTR'], ['hFtpSession', 'lpszFileName'], 'BOOL'), 'FtpRemoveDirectoryA': (2, ['HINTERNET', 'LPCSTR'], ['hFtpSession', 'lpszDirectory'], 'BOOL'), 'FtpRemoveDirectoryW': (2, ['HINTERNET', 'LPCWSTR'], ['hFtpSession', 'lpszDirectory'], 'BOOL'), 'FtpRenameFileA': (3, ['HINTERNET', 'LPCSTR', 'LPCSTR'], ['hFtpSession', 'lpszSrc', 'lpszDest'], 'BOOL'), 'FtpRenameFileW': (3, ['HINTERNET', 'LPCWSTR', 'LPCWSTR'], ['hFtpSession', 'lpszSrc', 'lpszDest'], 'BOOL'), 'FtpCommandA': (6, ['HINTERNET', 'BOOL', 'DWORD', 'LPCSTR', 'DWORD_PTR', 'HINTERNET*'], ['hConnect', 'fExpectResponse', 'dwFlags', 'lpszCommand', 'dwContext', 'phFtpCommand'], 'BOOL'), 'FtpCommandW': (6, ['HINTERNET', 'BOOL', 'DWORD', 'LPCWSTR', 'DWORD_PTR', 'HINTERNET*'], ['hConnect', 'fExpectResponse', 'dwFlags', 'lpszCommand', 'dwContext', 'phFtpCommand'], 'BOOL'), 'GopherCreateLocatorA': (7, ['LPCSTR       ', 'INTERNET_PORT', 'LPCSTR       ', 'LPCSTR       ', 'DWORD        ', 'LPSTR        ', 'LPDWORD      '], ['lpszHost', 'nServerPort', 'lpszDisplayString', 'lpszSelectorString', 'dwGopherType', 'lpszLocator', 'lpdwBufferLength'], 'BOOL'), 'GopherCreateLocatorW': (7, ['LPCWSTR      ', 'INTERNET_PORT', 'LPCWSTR      ', 'LPCWSTR      ', 'DWORD        ', 'LPWSTR       ', 'LPDWORD      '], ['lpszHost', 'nServerPort', 'lpszDisplayString', 'lpszSelectorString', 'dwHopherType', 'lpszLocator', 'lpdwBufferLength'], 'BOOL'), 'GopherFindFirstFileA': (6, ['HINTERNET', 'LPCSTR   ', 'LPCSTR   ', 'LPGOPHER_FIND_DATAA\n          ', 'DWORD    ', 'DWORD_PTR'], ['hConnect', 'lpszLocator', 'lpszSearchString', 'lpFindData', 'dwFlags', 'dwContext'], 'HINTERNET'), 'GopherFindFirstFileW': (6, ['HINTERNET', 'LPCWSTR  ', 'LPCWSTR  ', 'LPGOPHER_FIND_DATAW\n          ', 'DWORD    ', 'DWORD_PTR'], ['hConnect', 'lpszLocator', 'lpszSearchString', 'lpFindData', 'dwFlags', 'dwContext'], 'HINTERNET'), 'GopherGetAttributeA': (8, ['HINTERNET', 'LPCSTR   ', 'LPCSTR   ', 'LPBYTE   ', 'DWORD    ', 'LPDWORD  ', 'GOPHER_ATTRIBUTE_ENUMERATORA\n          ', 'DWORD_PTR'], ['hConnect', 'lpszLocator', 'lpszAttributeName', 'lpBuffer', 'dwBufferLength', 'lpdwCharactersReturned', 'lpfnEnumerator', 'dwContext'], 'BOOL'), 'GopherGetAttributeW': (8, ['HINTERNET', 'LPCWSTR  ', 'LPCWSTR  ', 'LPBYTE   ', 'DWORD    ', 'LPDWORD  ', 'GOPHER_ATTRIBUTE_ENUMERATORW\n          ', 'DWORD_PTR'], ['hConnect', 'lpszLocator', 'lpszAttributeName', 'lpBuffer', 'dwBufferLength', 'lpdwCharactersReturned', 'lpfnEnumerator', 'dwContext'], 'BOOL'), 'GopherGetLocatorTypeA': (2, ['LPCSTR', 'LPDWORD'], ['lpszLocator', 'lpdwGopherType'], 'BOOL'), 'GopherGetLocatorTypeW': (2, ['LPCWSTR', 'LPDWORD'], ['lpszLocator', 'lpdwGopherType'], 'BOOL'), 'GopherOpenFileA': (5, ['HINTERNET', 'LPCSTR   ', 'LPCSTR   ', 'DWORD    ', 'DWORD_PTR'], ['hConnect', 'lpszLocator', 'lpszView', 'dwFlags', 'dwContext'], 'HINTERNET'), 'GopherOpenFileW': (5, ['HINTERNET', 'LPCWSTR  ', 'LPCWSTR  ', 'DWORD    ', 'DWORD_PTR'], ['hConnect', 'lpszLocator', 'lpszView', 'dwFlags', 'dwContext'], 'HINTERNET'), 'HttpAddRequestHeadersW': (4, ['HINTERNET', 'LPCWSTR', 'DWORD', 'DWORD'], ['hHttpRequest', 'lpszHeader', 'dwHeaderLength', 'dwModifier'], 'BOOL'), 'HttpAddRequestHeadersA': (4, ['HINTERNET', 'LPCSTR', 'DWORD', 'DWORD'], ['hHttpRequest', 'lpszHeader', 'dwHeaderLength', 'dwModifier'], 'BOOL'), 'HttpOpenRequestA': (8, ['HINTERNET', 'LPCSTR', 'LPCSTR', 'LPCSTR', 'LPCSTR', 'LPCSTR *', 'DWORD', 'DWORD_PTR'], ['hHttpSession', 'lpszVerb', 'lpszObjectName', 'lpszVersion', 'lpszReferrer', 'lpszAcceptTypes', 'dwFlags', 'dwContext'], 'HINTERNET'), 'HttpOpenRequestW': (8, ['HINTERNET', 'LPCWSTR', 'LPCWSTR', 'LPCWSTR', 'LPCWSTR', 'LPCWSTR *', 'DWORD', 'DWORD_PTR'], ['hHttpSession', 'lpszVerb', 'lpszObjectName', 'lpszVersion', 'lpszReferrer', 'lpszAcceptTypes', 'dwFlags', 'dwContext'], 'HINTERNET'), 'HttpQueryInfoW': (5, ['HINTERNET', 'DWORD', 'LPVOID', 'LPDWORD', 'LPDWORD'], ['hHttpRequest', 'dwInfoLevel', 'lpBuffer', 'lpdwBufferLength', 'lpdwIndex'], 'BOOL'), 'HttpQueryInfoA': (5, ['HINTERNET', 'DWORD', 'LPVOID', 'LPDWORD', 'LPDWORD'], ['hHttpRequest', 'dwInfoLevel', 'lpBuffer', 'lpdwBufferLength', 'lpdwIndex'], 'BOOL'), 'HttpEndRequestA': (4, ['HINTERNET', 'LPINTERNET_BUFFERSA', 'DWORD', 'DWORD_PTR'], ['hRequest', 'lpBuffersOut', 'dwFlags', 'dwContext'], 'BOOL'), 'HttpEndRequestW': (4, ['HINTERNET', 'LPINTERNET_BUFFERSW', 'DWORD', 'DWORD_PTR'], ['hRequest', 'lpBuffersOut', 'dwFlags', 'dwContext'], 'BOOL'), 'HttpSendRequestExA': (5, ['HINTERNET', 'LPINTERNET_BUFFERSA', 'LPINTERNET_BUFFERSA', 'DWORD', 'DWORD_PTR'], ['hRequest', 'lpBuffersIn', 'lpBuffersOut', 'dwFlags', 'dwContext'], 'BOOL'), 'HttpSendRequestExW': (5, ['HINTERNET', 'LPINTERNET_BUFFERSW', 'LPINTERNET_BUFFERSW', 'DWORD', 'DWORD_PTR'], ['hRequest', 'lpBuffersIn', 'lpBuffersOut', 'dwFlags', 'dwContext'], 'BOOL'), 'HttpSendRequestW': (5, ['HINTERNET', 'LPCWSTR', 'DWORD', 'LPVOID', 'DWORD'], ['hHttpRequest', 'lpszHeaders', 'dwHeaderLength', 'lpOptional', 'dwOptionalLength'], 'BOOL'), 'HttpSendRequestA': (5, ['HINTERNET', 'LPCSTR', 'DWORD', 'LPVOID', 'DWORD'], ['hHttpRequest', 'lpszHeaders', 'dwHeaderLength', 'lpOptional', 'dwOptionalLength'], 'BOOL'), 'IsHostInProxyBypassList': (3, ['INTERNET_SCHEME', 'LPCSTR', 'DWORD'], ['scheme', 'szHost', 'length'], 'BOOL'), 'DllInstall': (2, ['BOOL', 'LPCWSTR'], ['bInstall', 'cmdline'], 'HRESULT'), 'InternetInitializeAutoProxyDll': (1, ['DWORD'], ['dwReserved'], 'BOOL'), 'DetectAutoProxyUrl': (3, ['LPSTR', 'DWORD', 'DWORD'], ['lpszAutoProxyUrl', 'dwAutoProxyUrlLength', 'dwDetectFlags'], 'BOOL'), 'InternetOpenW': (5, ['LPCWSTR', 'DWORD', 'LPCWSTR', 'LPCWSTR', 'DWORD'], ['lpszAgent', 'dwAccessType', 'lpszProxy', 'lpszProxyBypass', 'dwFlags'], 'HINTERNET'), 'InternetOpenA': (5, ['LPCSTR', 'DWORD', 'LPCSTR', 'LPCSTR', 'DWORD'], ['lpszAgent', 'dwAccessType', 'lpszProxy', 'lpszProxyBypass', 'dwFlags'], 'HINTERNET'), 'InternetGetLastResponseInfoA': (3, ['LPDWORD', 'LPSTR', 'LPDWORD'], ['lpdwError', 'lpszBuffer', 'lpdwBufferLength'], 'BOOL'), 'InternetGetLastResponseInfoW': (3, ['LPDWORD', 'LPWSTR', 'LPDWORD'], ['lpdwError', 'lpszBuffer', 'lpdwBufferLength'], 'BOOL'), 'InternetGetConnectedState': (2, ['LPDWORD', 'DWORD'], ['lpdwStatus', 'dwReserved'], 'BOOL'), 'InternetGetConnectedStateExW': (4, ['LPDWORD', 'LPWSTR', 'DWORD', 'DWORD'], ['lpdwStatus', 'lpszConnectionName', 'dwNameLen', 'dwReserved'], 'BOOL'), 'InternetGetConnectedStateExA': (4, ['LPDWORD', 'LPSTR', 'DWORD', 'DWORD'], ['lpdwStatus', 'lpszConnectionName', 'dwNameLen', 'dwReserved'], 'BOOL'), 'InternetConnectW': (8, ['HINTERNET', 'LPCWSTR', 'INTERNET_PORT', 'LPCWSTR', 'LPCWSTR', 'DWORD', 'DWORD', 'DWORD_PTR'], ['hInternet', 'lpszServerName', 'nServerPort', 'lpszUserName', 'lpszPassword', 'dwService', 'dwFlags', 'dwContext'], 'HINTERNET'), 'InternetConnectA': (8, ['HINTERNET', 'LPCSTR', 'INTERNET_PORT', 'LPCSTR', 'LPCSTR', 'DWORD', 'DWORD', 'DWORD_PTR'], ['hInternet', 'lpszServerName', 'nServerPort', 'lpszUserName', 'lpszPassword', 'dwService', 'dwFlags', 'dwContext'], 'HINTERNET'), 'InternetFindNextFileA': (2, ['HINTERNET', 'LPVOID'], ['hFind', 'lpvFindData'], 'BOOL'), 'InternetFindNextFileW': (2, ['HINTERNET', 'LPVOID'], ['hFind', 'lpvFindData'], 'BOOL'), 'InternetCloseHandle': (1, ['HINTERNET'], ['hInternet'], 'BOOL'), 'InternetCrackUrlA': (4, ['const char *', 'DWORD', 'DWORD', 'URL_COMPONENTSA *'], ['url', 'url_length', 'flags', 'ret_comp'], 'BOOL'), 'InternetCrackUrlW': (4, ['const WCHAR *', 'DWORD', 'DWORD', 'URL_COMPONENTSW *'], ['lpszUrl', 'dwUrlLength', 'dwFlags', 'lpUC'], 'BOOL'), 'InternetAttemptConnect': (1, ['DWORD'], ['dwReserved'], 'DWORD'), 'InternetCanonicalizeUrlA': (4, ['LPCSTR', 'LPSTR', 'LPDWORD', 'DWORD'], ['lpszUrl', 'lpszBuffer', 'lpdwBufferLength', 'dwFlags'], 'BOOL'), 'InternetCanonicalizeUrlW': (4, ['LPCWSTR', 'LPWSTR', 'LPDWORD', 'DWORD'], ['lpszUrl', 'lpszBuffer', 'lpdwBufferLength', 'dwFlags'], 'BOOL'), 'InternetSetStatusCallbackA': (2, ['HINTERNET', 'INTERNET_STATUS_CALLBACK'], ['hInternet', 'lpfnIntCB'], 'INTERNET_STATUS_CALLBACK'), 'InternetSetStatusCallbackW': (2, ['HINTERNET', 'INTERNET_STATUS_CALLBACK'], ['hInternet', 'lpfnIntCB'], 'INTERNET_STATUS_CALLBACK'), 'InternetSetFilePointer': (5, ['HINTERNET', 'LONG', 'PVOID', 'DWORD', 'DWORD_PTR'], ['hFile', 'lDistanceToMove', 'pReserved', 'dwMoveContext', 'dwContext'], 'DWORD'), 'InternetWriteFile': (4, ['HINTERNET', 'LPCVOID', 'DWORD', 'LPDWORD'], ['hFile', 'lpBuffer', 'dwNumOfBytesToWrite', 'lpdwNumOfBytesWritten'], 'BOOL'), 'InternetReadFile': (4, ['HINTERNET', 'LPVOID', 'DWORD', 'LPDWORD'], ['hFile', 'lpBuffer', 'dwNumOfBytesToRead', 'pdwNumOfBytesRead'], 'BOOL'), 'InternetReadFileExA': (4, ['HINTERNET', 'LPINTERNET_BUFFERSA', 'DWORD', 'DWORD_PTR'], ['hFile', 'lpBuffersOut', 'dwFlags', 'dwContext'], 'BOOL'), 'InternetReadFileExW': (4, ['HINTERNET', 'LPINTERNET_BUFFERSW', 'DWORD', 'DWORD_PTR'], ['hFile', 'lpBuffer', 'dwFlags', 'dwContext'], 'BOOL'), 'InternetQueryOptionW': (4, ['HINTERNET', 'DWORD', 'LPVOID', 'LPDWORD'], ['hInternet', 'dwOption', 'lpBuffer', 'lpdwBufferLength'], 'BOOL'), 'InternetQueryOptionA': (4, ['HINTERNET', 'DWORD', 'LPVOID', 'LPDWORD'], ['hInternet', 'dwOption', 'lpBuffer', 'lpdwBufferLength'], 'BOOL'), 'InternetSetOptionW': (4, ['HINTERNET', 'DWORD', 'LPVOID', 'DWORD'], ['hInternet', 'dwOption', 'lpBuffer', 'dwBufferLength'], 'BOOL'), 'InternetSetOptionA': (4, ['HINTERNET', 'DWORD', 'LPVOID', 'DWORD'], ['hInternet', 'dwOption', 'lpBuffer', 'dwBufferLength'], 'BOOL'), 'InternetSetOptionExA': (5, ['HINTERNET', 'DWORD', 'LPVOID', 'DWORD', 'DWORD'], ['hInternet', 'dwOption', 'lpBuffer', 'dwBufferLength', 'dwFlags'], 'BOOL'), 'InternetSetOptionExW': (5, ['HINTERNET', 'DWORD', 'LPVOID', 'DWORD', 'DWORD'], ['hInternet', 'dwOption', 'lpBuffer', 'dwBufferLength', 'dwFlags'], 'BOOL'), 'InternetTimeFromSystemTimeA': (4, ['const SYSTEMTIME*', 'DWORD', 'LPSTR', 'DWORD'], ['time', 'format', 'string', 'size'], 'BOOL'), 'InternetTimeFromSystemTimeW': (4, ['const SYSTEMTIME*', 'DWORD', 'LPWSTR', 'DWORD'], ['time', 'format', 'string', 'size'], 'BOOL'), 'InternetTimeToSystemTimeA': (3, ['LPCSTR', 'SYSTEMTIME*', 'DWORD'], ['string', 'time', 'reserved'], 'BOOL'), 'InternetTimeToSystemTimeW': (3, ['LPCWSTR', 'SYSTEMTIME*', 'DWORD'], ['string', 'time', 'reserved'], 'BOOL'), 'InternetCheckConnectionW': (3, ['LPCWSTR', 'DWORD', 'DWORD'], ['lpszUrl', 'dwFlags', 'dwReserved'], 'BOOL'), 'InternetCheckConnectionA': (3, ['LPCSTR', 'DWORD', 'DWORD'], ['lpszUrl', 'dwFlags', 'dwReserved'], 'BOOL'), 'InternetOpenUrlW': (6, ['HINTERNET', 'LPCWSTR', 'LPCWSTR', 'DWORD', 'DWORD', 'DWORD_PTR'], ['hInternet', 'lpszUrl', 'lpszHeaders', 'dwHeadersLength', 'dwFlags', 'dwContext'], 'HINTERNET'), 'InternetOpenUrlA': (6, ['HINTERNET', 'LPCSTR', 'LPCSTR', 'DWORD', 'DWORD', 'DWORD_PTR'], ['hInternet', 'lpszUrl', 'lpszHeaders', 'dwHeadersLength', 'dwFlags', 'dwContext'], 'HINTERNET'), 'InternetQueryDataAvailable': (4, ['HINTERNET', 'LPDWORD', 'DWORD', 'DWORD_PTR'], ['hFile', 'lpdwNumberOfBytesAvailable', 'dwFlags', 'dwContext'], 'BOOL'), 'InternetLockRequestFile': (2, ['HINTERNET', 'HANDLE *'], ['hInternet', 'lphLockReqHandle'], 'BOOL'), 'InternetUnlockRequestFile': (0, [], [], 'BOOL'), 'InternetAutodial': (2, ['DWORD', 'HWND'], ['dwFlags', 'hwndParent'], 'BOOL'), 'InternetAutodialHangup': (1, ['DWORD'], ['dwReserved'], 'BOOL'), 'InternetCombineUrlA': (5, ['LPCSTR', 'LPCSTR', 'LPSTR', 'LPDWORD', 'DWORD'], ['lpszBaseUrl', 'lpszRelativeUrl', 'lpszBuffer', 'lpdwBufferLength', 'dwFlags'], 'BOOL'), 'InternetCombineUrlW': (5, ['LPCWSTR', 'LPCWSTR', 'LPWSTR', 'LPDWORD', 'DWORD'], ['lpszBaseUrl', 'lpszRelativeUrl', 'lpszBuffer', 'lpdwBufferLength', 'dwFlags'], 'BOOL'), 'InternetCreateUrlA': (4, ['LPURL_COMPONENTSA', 'DWORD', 'LPSTR', 'LPDWORD'], ['lpUrlComponents', 'dwFlags', 'lpszUrl', 'lpdwUrlLength'], 'BOOL'), 'InternetCreateUrlW': (4, ['LPURL_COMPONENTSW', 'DWORD', 'LPWSTR', 'LPDWORD'], ['lpUrlComponents', 'dwFlags', 'lpszUrl', 'lpdwUrlLength'], 'BOOL'), 'InternetConfirmZoneCrossingA': (4, ['HWND', 'LPSTR', 'LPSTR', 'BOOL'], ['hWnd', 'szUrlPrev', 'szUrlNew', 'bPost'], 'DWORD'), 'InternetConfirmZoneCrossingW': (4, ['HWND', 'LPWSTR', 'LPWSTR', 'BOOL'], ['hWnd', 'szUrlPrev', 'szUrlNew', 'bPost'], 'DWORD'), 'PrivacySetZonePreferenceW': (4, ['DWORD', 'DWORD', 'DWORD', 'LPCWSTR'], ['zone', 'type', 'template', 'preference'], 'DWORD'), 'PrivacyGetZonePreferenceW': (5, ['DWORD', 'DWORD', 'LPDWORD', 'LPWSTR', 'LPDWORD'], ['zone', 'type', 'template', 'preference', 'length'], 'DWORD'), 'InternetGetSecurityInfoByURLA': (3, ['LPSTR', 'PCCERT_CHAIN_CONTEXT *', 'DWORD *'], ['lpszURL', 'ppCertChain', 'pdwSecureFlags'], 'BOOL'), 'InternetGetSecurityInfoByURLW': (3, ['LPCWSTR', 'PCCERT_CHAIN_CONTEXT *', 'DWORD *'], ['lpszURL', 'ppCertChain', 'pdwSecureFlags'], 'BOOL'), 'InternetDialA': (0, [], [], 'DWORD'), 'InternetDialW': (0, [], [], 'DWORD'), 'InternetGoOnlineA': (0, [], [], 'BOOL'), 'InternetGoOnlineW': (0, [], [], 'BOOL'), 'InternetHangUp': (0, [], [], 'DWORD'), 'CreateMD5SSOHash': (0, [], [], 'BOOL'), 'ResumeSuspendedDownload': (0, [], [], 'BOOL'), 'InternetQueryFortezzaStatus': (0, [], [], 'BOOL'), 'ShowClientAuthCerts': (0, [], [], 'DWORD'), 'GetUrlCacheEntryInfoExA': (7, ['LPCSTR', 'LPINTERNET_CACHE_ENTRY_INFOA', 'LPDWORD', 'LPSTR', 'LPDWORD', 'LPVOID', 'DWORD'], ['lpszUrl', 'lpCacheEntryInfo', 'lpdwCacheEntryInfoBufSize', 'lpszReserved', 'lpdwReserved', 'lpReserved', 'dwFlags'], 'BOOL'), 'GetUrlCacheEntryInfoA': (3, ['LPCSTR', 'LPINTERNET_CACHE_ENTRY_INFOA', 'LPDWORD'], ['lpszUrlName', 'lpCacheEntryInfo', 'lpdwCacheEntryInfoBufferSize'], 'BOOL'), 'GetUrlCacheEntryInfoExW': (7, ['LPCWSTR', 'LPINTERNET_CACHE_ENTRY_INFOW', 'LPDWORD', 'LPWSTR', 'LPDWORD', 'LPVOID', 'DWORD'], ['lpszUrl', 'lpCacheEntryInfo', 'lpdwCacheEntryInfoBufSize', 'lpszReserved', 'lpdwReserved', 'lpReserved', 'dwFlags'], 'BOOL'), 'GetUrlCacheEntryInfoW': (3, ['LPCWSTR', 'LPINTERNET_CACHE_ENTRY_INFOW', 'LPDWORD'], ['lpszUrl', 'lpCacheEntryInfo', 'lpdwCacheEntryInfoBufferSize'], 'BOOL'), 'SetUrlCacheEntryInfoA': (3, ['LPCSTR', 'LPINTERNET_CACHE_ENTRY_INFOA', 'DWORD'], ['lpszUrlName', 'lpCacheEntryInfo', 'dwFieldControl'], 'BOOL'), 'SetUrlCacheEntryInfoW': (3, ['LPCWSTR', 'LPINTERNET_CACHE_ENTRY_INFOW', 'DWORD'], ['lpszUrl', 'lpCacheEntryInfo', 'dwFieldControl'], 'BOOL'), 'RetrieveUrlCacheEntryFileA': (4, ['LPCSTR', 'LPINTERNET_CACHE_ENTRY_INFOA', 'LPDWORD', 'DWORD'], ['lpszUrlName', 'lpCacheEntryInfo', 'lpdwCacheEntryInfoBufferSize', 'dwReserved'], 'BOOL'), 'RetrieveUrlCacheEntryFileW': (4, ['LPCWSTR', 'LPINTERNET_CACHE_ENTRY_INFOW', 'LPDWORD', 'DWORD'], ['lpszUrlName', 'lpCacheEntryInfo', 'lpdwCacheEntryInfoBufferSize', 'dwReserved'], 'BOOL'), 'FreeUrlCacheSpaceW': (3, ['LPCWSTR', 'DWORD', 'DWORD'], ['cache_path', 'size', 'filter'], 'BOOL'), 'FreeUrlCacheSpaceA': (3, ['LPCSTR', 'DWORD', 'DWORD'], ['lpszCachePath', 'dwSize', 'dwFilter'], 'BOOL'), 'UnlockUrlCacheEntryFileA': (2, ['LPCSTR', 'DWORD'], ['lpszUrlName', 'dwReserved'], 'BOOL'), 'UnlockUrlCacheEntryFileW': (2, ['LPCWSTR', 'DWORD'], ['lpszUrlName', 'dwReserved'], 'BOOL'), 'CreateUrlCacheEntryA': (5, ['LPCSTR', 'DWORD', 'LPCSTR', 'LPSTR', 'DWORD'], ['lpszUrlName', 'dwExpectedFileSize', 'lpszFileExtension', 'lpszFileName', 'dwReserved'], 'BOOL'), 'CreateUrlCacheEntryW': (5, ['LPCWSTR', 'DWORD', 'LPCWSTR', 'LPWSTR', 'DWORD'], ['lpszUrlName', 'dwExpectedFileSize', 'lpszFileExtension', 'lpszFileName', 'dwReserved'], 'BOOL'), 'CommitUrlCacheEntryA': (9, ['LPCSTR', 'LPCSTR', 'FILETIME', 'FILETIME', 'DWORD', 'LPBYTE', 'DWORD', 'LPCSTR', 'LPCSTR'], ['lpszUrlName', 'lpszLocalFileName', 'ExpireTime', 'LastModifiedTime', 'CacheEntryType', 'lpHeaderInfo', 'dwHeaderSize', 'lpszFileExtension', 'lpszOriginalUrl'], 'BOOL'), 'CommitUrlCacheEntryW': (9, ['LPCWSTR', 'LPCWSTR', 'FILETIME', 'FILETIME', 'DWORD', 'LPWSTR', 'DWORD', 'LPCWSTR', 'LPCWSTR'], ['lpszUrlName', 'lpszLocalFileName', 'ExpireTime', 'LastModifiedTime', 'CacheEntryType', 'lpHeaderInfo', 'dwHeaderSize', 'lpszFileExtension', 'lpszOriginalUrl'], 'BOOL'), 'ReadUrlCacheEntryStream': (5, ['IN HANDLE', 'IN  DWORD', 'IN OUT LPVOID', 'IN OUT LPDWORD', 'IN DWORD'], ['hUrlCacheStream', 'dwLocation', 'lpBuffer', 'lpdwLen', 'dwReserved'], 'BOOL'), 'RetrieveUrlCacheEntryStreamA': (5, ['LPCSTR', 'LPINTERNET_CACHE_ENTRY_INFOA', 'LPDWORD', 'BOOL', 'DWORD'], ['lpszUrlName', 'lpCacheEntryInfo', 'lpdwCacheEntryInfoBufferSize', 'fRandomRead', 'dwReserved'], 'HANDLE'), 'RetrieveUrlCacheEntryStreamW': (5, ['LPCWSTR', 'LPINTERNET_CACHE_ENTRY_INFOW', 'LPDWORD', 'BOOL', 'DWORD'], ['lpszUrlName', 'lpCacheEntryInfo', 'lpdwCacheEntryInfoBufferSize', 'fRandomRead', 'dwReserved'], 'HANDLE'), 'UnlockUrlCacheEntryStream': (2, ['IN HANDLE', 'IN DWORD'], ['hUrlCacheStream', 'dwReserved'], 'BOOL'), 'DeleteUrlCacheEntryA': (1, ['LPCSTR'], ['lpszUrlName'], 'BOOL'), 'DeleteUrlCacheEntryW': (1, ['LPCWSTR'], ['lpszUrlName'], 'BOOL'), 'DeleteUrlCacheContainerA': (0, [], [], 'BOOL'), 'DeleteUrlCacheContainerW': (0, [], [], 'BOOL'), 'CreateUrlCacheContainerA': (8, ['DWORD', 'DWORD', 'DWORD', 'DWORD', 'DWORD', 'DWORD', 'DWORD', 'DWORD'], ['d1', 'd2', 'd3', 'd4', 'd5', 'd6', 'd7', 'd8'], 'BOOL'), 'CreateUrlCacheContainerW': (8, ['DWORD', 'DWORD', 'DWORD', 'DWORD', 'DWORD', 'DWORD', 'DWORD', 'DWORD'], ['d1', 'd2', 'd3', 'd4', 'd5', 'd6', 'd7', 'd8'], 'BOOL'), 'FindFirstUrlCacheContainerA': (4, ['LPVOID', 'LPVOID', 'LPVOID', 'DWORD'], ['p1', 'p2', 'p3', 'd1'], 'HANDLE'), 'FindFirstUrlCacheContainerW': (4, ['LPVOID', 'LPVOID', 'LPVOID', 'DWORD'], ['p1', 'p2', 'p3', 'd1'], 'HANDLE'), 'FindNextUrlCacheContainerA': (3, ['HANDLE', 'LPVOID', 'LPVOID'], ['handle', 'p1', 'p2'], 'BOOL'), 'FindNextUrlCacheContainerW': (3, ['HANDLE', 'LPVOID', 'LPVOID'], ['handle', 'p1', 'p2'], 'BOOL'), 'FindFirstUrlCacheEntryExA': (0, [], [], 'HANDLE'), 'FindFirstUrlCacheEntryExW': (0, [], [], 'HANDLE'), 'FindFirstUrlCacheEntryA': (3, ['LPCSTR', 'LPINTERNET_CACHE_ENTRY_INFOA', 'LPDWORD'], ['lpszUrlSearchPattern', 'lpFirstCacheEntryInfo', 'lpdwFirstCacheEntryInfoBufferSize'], 'HANDLE'), 'FindFirstUrlCacheEntryW': (3, ['LPCWSTR', 'LPINTERNET_CACHE_ENTRY_INFOW', 'LPDWORD'], ['lpszUrlSearchPattern', 'lpFirstCacheEntryInfo', 'lpdwFirstCacheEntryInfoBufferSize'], 'HANDLE'), 'FindNextUrlCacheEntryA': (3, ['HANDLE', 'LPINTERNET_CACHE_ENTRY_INFOA', 'LPDWORD'], ['hEnumHandle', 'lpNextCacheEntryInfo', 'lpdwNextCacheEntryInfoBufferSize'], 'BOOL'), 'FindNextUrlCacheEntryW': (3, ['HANDLE', 'LPINTERNET_CACHE_ENTRY_INFOW', 'LPDWORD'], ['hEnumHandle', 'lpNextCacheEntryInfo', 'lpdwNextCacheEntryInfoBufferSize'], 'BOOL'), 'FindCloseUrlCache': (1, ['HANDLE'], ['hEnumHandle'], 'BOOL'), 'FindFirstUrlCacheGroup': (0, [], [], 'HANDLE'), 'FindNextUrlCacheEntryExA': (0, [], [], 'BOOL'), 'FindNextUrlCacheEntryExW': (0, [], [], 'BOOL'), 'FindNextUrlCacheGroup': (0, [], [], 'BOOL'), 'CreateUrlCacheGroup': (2, ['DWORD', 'LPVOID'], ['dwFlags', 'lpReserved'], 'GROUPID'), 'DeleteUrlCacheGroup': (3, ['GROUPID', 'DWORD', 'LPVOID'], ['GroupId', 'dwFlags', 'lpReserved'], 'BOOL'), 'DeleteWpadCacheForNetworks': (1, ['DWORD'], ['unk1'], 'BOOL'), 'SetUrlCacheEntryGroupA': (6, ['LPCSTR', 'DWORD', 'GROUPID', 'LPBYTE', 'DWORD', 'LPVOID'], ['lpszUrlName', 'dwFlags', 'GroupId', 'pbGroupAttributes', 'cbGroupAttributes', 'lpReserved'], 'BOOL'), 'SetUrlCacheEntryGroupW': (6, ['LPCWSTR', 'DWORD', 'GROUPID', 'LPBYTE', 'DWORD', 'LPVOID'], ['lpszUrlName', 'dwFlags', 'GroupId', 'pbGroupAttributes', 'cbGroupAttributes', 'lpReserved'], 'BOOL'), 'GetUrlCacheConfigInfoW': (3, ['LPINTERNET_CACHE_CONFIG_INFOW', 'LPDWORD', 'DWORD'], ['info', 'size', 'flags'], 'BOOL'), 'GetUrlCacheConfigInfoA': (3, ['LPINTERNET_CACHE_CONFIG_INFOA', 'LPDWORD', 'DWORD'], ['info', 'size', 'flags'], 'BOOL'), 'GetUrlCacheGroupAttributeA': (0, [], [], 'BOOL'), 'GetUrlCacheGroupAttributeW': (0, [], [], 'BOOL'), 'SetUrlCacheGroupAttributeA': (0, [], [], 'BOOL'), 'SetUrlCacheGroupAttributeW': (0, [], [], 'BOOL'), 'SetUrlCacheConfigInfoA': (0, [], [], 'BOOL'), 'SetUrlCacheConfigInfoW': (0, [], [], 'BOOL'), 'DeleteIE3Cache': (4, ['HWND', 'HINSTANCE', 'LPSTR', 'int'], ['hWnd', 'hInst', 'lpszCmdLine', 'nCmdShow'], 'DWORD'), 'IsUrlCacheEntryExpiredA': (3, ['LPCSTR', 'DWORD', 'FILETIME*'], ['url', 'dwFlags', 'pftLastModified'], 'BOOL'), 'IsUrlCacheEntryExpiredW': (3, ['LPCWSTR', 'DWORD', 'FILETIME*'], ['url', 'dwFlags', 'pftLastModified'], 'BOOL'), 'GetDiskInfoA': (4, ['PCSTR', 'PDWORD', 'PDWORDLONG', 'PDWORDLONG'], ['path', 'cluster_size', 'free', 'total'], 'BOOL'), 'RegisterUrlCacheNotification': (6, ['LPVOID', 'DWORD', 'DWORD', 'DWORD', 'DWORD', 'DWORD'], ['a', 'b', 'c', 'd', 'e', 'f'], 'DWORD'), 'IncrementUrlCacheHeaderData': (2, ['DWORD', 'LPDWORD'], ['index', 'data'], 'BOOL'), 'RunOnceUrlCache': (4, ['HWND', 'HINSTANCE', 'LPSTR', 'int'], ['hwnd', 'hinst', 'cmd', 'cmdshow'], 'DWORD'), 'LoadUrlCacheContent': (0, [], [], 'BOOL')}


dictRS_wininet =  {'HttpSendRequestExA': 'True', 'HttpSendRequestExW': 'True'}


dict4_winmm =  {'SendDriverMessage': (4, ['HDRVR', 'UINT', 'LPARAM', 'LPARAM'], ['hDriver', 'msg', 'lParam1', 'lParam2'], 'LRESULT'), 'OpenDriverA': (3, ['LPCSTR', 'LPCSTR', 'LPARAM'], ['lpDriverName', 'lpSectionName', 'lParam'], 'HDRVR'), 'OpenDriver': (3, ['LPCWSTR', 'LPCWSTR', 'LPARAM'], ['lpDriverName', 'lpSectionName', 'lParam'], 'HDRVR'), 'CloseDriver': (3, ['HDRVR', 'LPARAM', 'LPARAM'], ['hDrvr', 'lParam1', 'lParam2'], 'LRESULT'), 'GetDriverModuleHandle': (1, ['HDRVR'], ['hDrvr'], 'HMODULE'), 'DefDriverProc': (5, ['DWORD_PTR', 'HDRVR', 'UINT', 'LPARAM', 'LPARAM'], ['dwDriverIdentifier', 'hDrv', 'Msg', 'lParam1', 'lParam2'], 'LRESULT'), 'DriverCallback': (7, ['DWORD_PTR', 'DWORD', 'HDRVR', 'DWORD', 'DWORD_PTR', 'DWORD_PTR', 'DWORD_PTR'], ['dwCallBack', 'uFlags', 'hDev', 'wMsg', 'dwUser', 'dwParam1', 'dwParam2'], 'BOOL'), 'joyConfigChanged': (1, ['DWORD'], ['flags'], 'MMRESULT'), 'joyGetPos': (2, ['UINT', 'LPJOYINFO'], ['wID', 'lpInfo'], 'MMRESULT'), 'joyGetThreshold': (2, ['UINT', 'LPUINT'], ['wID', 'lpThreshold'], 'MMRESULT'), 'joyReleaseCapture': (1, ['UINT'], ['wID'], 'MMRESULT'), 'joySetCapture': (4, ['HWND', 'UINT', 'UINT', 'BOOL'], ['hWnd', 'wID', 'wPeriod', 'bChanged'], 'MMRESULT'), 'joySetThreshold': (2, ['UINT', 'UINT'], ['wID', 'wThreshold'], 'MMRESULT'), 'mciSendStringW': (4, ['LPCWSTR', 'LPWSTR', 'UINT', 'HWND'], ['lpstrCommand', 'lpstrRet', 'uRetLen', 'hwndCallback'], 'DWORD'), 'mciSendStringA': (4, ['LPCSTR', 'LPSTR', 'UINT', 'HWND'], ['lpstrCommand', 'lpstrRet', 'uRetLen', 'hwndCallback'], 'DWORD'), 'mciExecute': (1, ['LPCSTR'], ['lpstrCommand'], 'BOOL'), 'mciLoadCommandResource': (3, ['HINSTANCE', 'LPCWSTR', 'UINT'], ['hInst', 'resNameW', 'type'], 'UINT'), 'mciFreeCommandResource': (1, ['UINT'], ['uTable'], 'BOOL'), 'mciGetErrorStringW': (3, ['MCIERROR', 'LPWSTR', 'UINT'], ['wError', 'lpstrBuffer', 'uLength'], 'BOOL'), 'mciGetErrorStringA': (3, ['MCIERROR', 'LPSTR', 'UINT'], ['dwError', 'lpstrBuffer', 'uLength'], 'BOOL'), 'mciDriverNotify': (3, ['HWND', 'MCIDEVICEID', 'UINT'], ['hWndCallBack', 'wDevID', 'wStatus'], 'BOOL'), 'mciGetDriverData': (1, ['MCIDEVICEID'], ['uDeviceID'], 'DWORD_PTR'), 'mciSetDriverData': (2, ['MCIDEVICEID', 'DWORD_PTR'], ['uDeviceID', 'data'], 'BOOL'), 'mciSendCommandW': (4, ['MCIDEVICEID', 'UINT', 'DWORD_PTR', 'DWORD_PTR'], ['wDevID', 'wMsg', 'dwParam1', 'dwParam2'], 'DWORD'), 'mciSendCommandA': (4, ['MCIDEVICEID', 'UINT', 'DWORD_PTR', 'DWORD_PTR'], ['wDevID', 'wMsg', 'dwParam1', 'dwParam2'], 'DWORD'), 'mciGetDeviceIDA': (1, ['LPCSTR'], ['lpstrName'], 'UINT'), 'mciGetDeviceIDW': (1, ['LPCWSTR'], ['lpwstrName'], 'UINT'), 'mciSetYieldProc': (3, ['MCIDEVICEID', 'YIELDPROC', 'DWORD'], ['uDeviceID', 'fpYieldProc', 'dwYieldData'], 'BOOL'), 'mciGetDeviceIDFromElementIDA': (2, ['DWORD', 'LPCSTR'], ['dwElementID', 'lpstrType'], 'UINT'), 'mciGetDeviceIDFromElementIDW': (2, ['DWORD', 'LPCWSTR'], ['dwElementID', 'lpstrType'], 'UINT'), 'mciGetYieldProc': (2, ['MCIDEVICEID', 'DWORD*'], ['uDeviceID', 'lpdwYieldData'], 'YIELDPROC'), 'mciGetCreatorTask': (1, ['MCIDEVICEID'], ['uDeviceID'], 'HTASK'), 'mciDriverYield': (1, ['MCIDEVICEID'], ['uDeviceID'], 'UINT'), 'mmioOpenW': (3, ['LPWSTR', 'MMIOINFO*', 'DWORD'], ['szFileName', 'lpmmioinfo', 'dwOpenFlags'], 'HMMIO'), 'mmioOpenA': (3, ['LPSTR', 'MMIOINFO*', 'DWORD'], ['szFileName', 'lpmmioinfo', 'dwOpenFlags'], 'HMMIO'), 'mmioClose': (2, ['HMMIO', 'UINT'], ['hmmio', 'uFlags'], 'MMRESULT'), 'mmioRead': (3, ['HMMIO', 'HPSTR', 'LONG'], ['hmmio', 'pch', 'cch'], 'LONG'), 'mmioWrite': (3, ['HMMIO', 'HPCSTR', 'LONG'], ['hmmio', 'pch', 'cch'], 'LONG'), 'mmioSeek': (3, ['HMMIO', 'LONG', 'INT'], ['hmmio', 'lOffset', 'iOrigin'], 'LONG'), 'mmioGetInfo': (3, ['HMMIO', 'MMIOINFO*', 'UINT'], ['hmmio', 'lpmmioinfo', 'uFlags'], 'MMRESULT'), 'mmioSetInfo': (3, ['HMMIO', 'const MMIOINFO*', 'UINT'], ['hmmio', 'lpmmioinfo', 'uFlags'], 'MMRESULT'), 'mmioSetBuffer': (4, ['HMMIO', 'LPSTR', 'LONG', 'UINT'], ['hmmio', 'pchBuffer', 'cchBuffer', 'uFlags'], 'MMRESULT'), 'mmioFlush': (2, ['HMMIO', 'UINT'], ['hmmio', 'uFlags'], 'MMRESULT'), 'mmioAdvance': (3, ['HMMIO', 'MMIOINFO*', 'UINT'], ['hmmio', 'lpmmioinfo', 'uFlags'], 'MMRESULT'), 'mmioStringToFOURCCA': (2, ['LPCSTR', 'UINT'], ['sz', 'uFlags'], 'FOURCC'), 'mmioStringToFOURCCW': (2, ['LPCWSTR', 'UINT'], ['sz', 'uFlags'], 'FOURCC'), 'mmioInstallIOProcA': (3, ['FOURCC', 'LPMMIOPROC', 'DWORD'], ['fccIOProc', 'pIOProc', 'dwFlags'], 'LPMMIOPROC'), 'mmioInstallIOProcW': (3, ['FOURCC', 'LPMMIOPROC', 'DWORD'], ['fccIOProc', 'pIOProc', 'dwFlags'], 'LPMMIOPROC'), 'mmioSendMessage': (4, ['HMMIO', 'UINT', 'LPARAM', 'LPARAM'], ['hmmio', 'uMessage', 'lParam1', 'lParam2'], 'LRESULT'), 'mmioDescend': (4, ['HMMIO', 'LPMMCKINFO', 'const MMCKINFO*', 'UINT'], ['hmmio', 'lpck', 'lpckParent', 'uFlags'], 'MMRESULT'), 'mmioAscend': (3, ['HMMIO', 'LPMMCKINFO', 'UINT'], ['hmmio', 'lpck', 'uFlags'], 'MMRESULT'), 'mmioCreateChunk': (3, ['HMMIO', 'MMCKINFO*', 'UINT'], ['hmmio', 'lpck', 'uFlags'], 'MMRESULT'), 'mmioRenameA': (4, ['LPCSTR', 'LPCSTR', 'const MMIOINFO*', 'DWORD'], ['szFileName', 'szNewFileName', 'lpmmioinfo', 'dwFlags'], 'MMRESULT'), 'mmioRenameW': (4, ['LPCWSTR', 'LPCWSTR', 'const MMIOINFO*', 'DWORD'], ['szFileName', 'szNewFileName', 'lpmmioinfo', 'dwFlags'], 'MMRESULT'), 'PlaySoundA': (3, ['LPCSTR', 'HMODULE', 'DWORD'], ['pszSoundA', 'hmod', 'fdwSound'], 'BOOL'), 'PlaySoundW': (3, ['LPCWSTR', 'HMODULE', 'DWORD'], ['pszSoundW', 'hmod', 'fdwSound'], 'BOOL'), 'sndPlaySoundA': (2, ['LPCSTR', 'UINT'], ['pszSoundA', 'uFlags'], 'BOOL'), 'sndPlaySoundW': (2, ['LPCWSTR', 'UINT'], ['pszSound', 'uFlags'], 'BOOL'), 'mmsystemGetVersion': (0, [], [], 'UINT'), 'timeGetSystemTime': (2, ['LPMMTIME', 'UINT'], ['lpTime', 'wSize'], 'MMRESULT'), 'timeGetTime': (0, [], [], 'DWORD'), 'timeSetEvent': (5, ['UINT', 'UINT', 'LPTIMECALLBACK', 'DWORD_PTR', 'UINT'], ['wDelay', 'wResol', 'lpFunc', 'dwUser', 'wFlags'], 'MMRESULT'), 'timeKillEvent': (1, ['UINT'], ['wID'], 'MMRESULT'), 'timeGetDevCaps': (2, ['LPTIMECAPS', 'UINT'], ['lpCaps', 'wSize'], 'MMRESULT'), 'timeBeginPeriod': (1, ['UINT'], ['wPeriod'], 'MMRESULT'), 'timeEndPeriod': (1, ['UINT'], ['wPeriod'], 'MMRESULT'), 'waveOutGetNumDevs': (0, [], [], 'UINT'), 'waveOutGetDevCapsA': (3, ['UINT_PTR', 'LPWAVEOUTCAPSA', 'UINT'], ['uDeviceID', 'lpCaps', 'uSize'], 'UINT'), 'waveOutGetDevCapsW': (3, ['UINT_PTR', 'LPWAVEOUTCAPSW', 'UINT'], ['uDeviceID', 'lpCaps', 'uSize'], 'UINT'), 'waveOutGetErrorTextA': (3, ['UINT', 'LPSTR', 'UINT'], ['uError', 'lpText', 'uSize'], 'UINT'), 'waveOutGetErrorTextW': (3, ['UINT', 'LPWSTR', 'UINT'], ['uError', 'lpText', 'uSize'], 'UINT'), 'waveOutOpen': (6, ['LPHWAVEOUT', 'UINT', 'LPCWAVEFORMATEX', 'DWORD_PTR', 'DWORD_PTR', 'DWORD'], ['lphWaveOut', 'uDeviceID', 'lpFormat', 'dwCallback', 'dwInstance', 'dwFlags'], 'MMRESULT'), 'waveOutClose': (1, ['HWAVEOUT'], ['hWaveOut'], 'UINT'), 'waveOutPrepareHeader': (3, ['HWAVEOUT', 'WAVEHDR*', 'UINT'], ['hWaveOut', 'lpWaveOutHdr', 'uSize'], 'UINT'), 'waveOutUnprepareHeader': (3, ['HWAVEOUT', 'LPWAVEHDR', 'UINT'], ['hWaveOut', 'lpWaveOutHdr', 'uSize'], 'UINT'), 'waveOutWrite': (3, ['HWAVEOUT', 'WAVEHDR *', 'UINT'], ['hWaveOut', 'header', 'uSize'], 'UINT'), 'waveOutBreakLoop': (1, ['HWAVEOUT'], ['hWaveOut'], 'UINT'), 'waveOutPause': (1, ['HWAVEOUT'], ['hWaveOut'], 'UINT'), 'waveOutReset': (1, ['HWAVEOUT'], ['hWaveOut'], 'UINT'), 'waveOutRestart': (1, ['HWAVEOUT'], ['hWaveOut'], 'UINT'), 'waveOutGetPosition': (3, ['HWAVEOUT', 'LPMMTIME', 'UINT'], ['hWaveOut', 'lpTime', 'uSize'], 'UINT'), 'waveOutGetPitch': (2, ['HWAVEOUT', 'LPDWORD'], ['hWaveOut', 'lpdw'], 'UINT'), 'waveOutSetPitch': (2, ['HWAVEOUT', 'DWORD'], ['hWaveOut', 'dw'], 'UINT'), 'waveOutGetPlaybackRate': (2, ['HWAVEOUT', 'LPDWORD'], ['hWaveOut', 'lpdw'], 'UINT'), 'waveOutSetPlaybackRate': (2, ['HWAVEOUT', 'DWORD'], ['hWaveOut', 'dw'], 'UINT'), 'waveOutGetVolume': (2, ['HWAVEOUT', 'DWORD *'], ['hWaveOut', 'out'], 'UINT'), 'waveOutSetVolume': (2, ['HWAVEOUT', 'DWORD'], ['hWaveOut', 'in'], 'UINT'), 'waveOutGetID': (2, ['HWAVEOUT', 'UINT*'], ['hWaveOut', 'lpuDeviceID'], 'UINT'), 'waveOutMessage': (4, ['HWAVEOUT', 'UINT', 'DWORD_PTR', 'DWORD_PTR'], ['hWaveOut', 'uMessage', 'dwParam1', 'dwParam2'], 'UINT'), 'waveInGetNumDevs': (0, [], [], 'UINT'), 'waveInGetDevCapsW': (3, ['UINT_PTR', 'LPWAVEINCAPSW', 'UINT'], ['uDeviceID', 'lpCaps', 'uSize'], 'UINT'), 'waveInGetDevCapsA': (3, ['UINT_PTR', 'LPWAVEINCAPSA', 'UINT'], ['uDeviceID', 'lpCaps', 'uSize'], 'UINT'), 'waveInOpen': (6, ['HWAVEIN*', 'UINT', 'LPCWAVEFORMATEX', 'DWORD_PTR', 'DWORD_PTR', 'DWORD'], ['lphWaveIn', 'uDeviceID', 'lpFormat', 'dwCallback', 'dwInstance', 'dwFlags'], 'MMRESULT'), 'waveInClose': (1, ['HWAVEIN'], ['hWaveIn'], 'UINT'), 'waveInPrepareHeader': (3, ['HWAVEIN', 'WAVEHDR*', 'UINT'], ['hWaveIn', 'lpWaveInHdr', 'uSize'], 'UINT'), 'waveInUnprepareHeader': (3, ['HWAVEIN', 'WAVEHDR*', 'UINT'], ['hWaveIn', 'lpWaveInHdr', 'uSize'], 'UINT'), 'waveInAddBuffer': (3, ['HWAVEIN', 'WAVEHDR *', 'UINT'], ['hWaveIn', 'header', 'uSize'], 'UINT'), 'waveInReset': (1, ['HWAVEIN'], ['hWaveIn'], 'UINT'), 'waveInStart': (1, ['HWAVEIN'], ['hWaveIn'], 'UINT'), 'waveInStop': (1, ['HWAVEIN'], ['hWaveIn'], 'UINT'), 'waveInGetPosition': (3, ['HWAVEIN', 'LPMMTIME', 'UINT'], ['hWaveIn', 'lpTime', 'uSize'], 'UINT'), 'waveInGetID': (2, ['HWAVEIN', 'UINT*'], ['hWaveIn', 'lpuDeviceID'], 'UINT'), 'waveInMessage': (4, ['HWAVEIN', 'UINT', 'DWORD_PTR', 'DWORD_PTR'], ['hWaveIn', 'uMessage', 'dwParam1', 'dwParam2'], 'UINT'), 'mixerGetNumDevs': (0, [], [], 'UINT'), 'mixerGetDevCapsA': (3, ['UINT_PTR', 'LPMIXERCAPSA', 'UINT'], ['uDeviceID', 'lpCaps', 'uSize'], 'UINT'), 'mixerGetDevCapsW': (3, ['UINT_PTR', 'LPMIXERCAPSW', 'UINT'], ['uDeviceID', 'lpCaps', 'uSize'], 'UINT'), 'mixerOpen': (5, ['LPHMIXER', 'UINT', 'DWORD_PTR', 'DWORD_PTR', 'DWORD'], ['lphMix', 'uDeviceID', 'dwCallback', 'dwInstance', 'fdwOpen'], 'UINT'), 'mixerClose': (1, ['HMIXER'], ['hMix'], 'UINT'), 'mixerGetID': (3, ['HMIXEROBJ', 'LPUINT', 'DWORD'], ['hmix', 'lpid', 'fdwID'], 'UINT'), 'mixerGetControlDetailsW': (3, ['HMIXEROBJ', 'LPMIXERCONTROLDETAILS', 'DWORD'], ['hmix', 'lpmcdW', 'fdwDetails'], 'UINT'), 'mixerGetControlDetailsA': (3, ['HMIXEROBJ', 'LPMIXERCONTROLDETAILS', 'DWORD'], ['hmix', 'lpmcdA', 'fdwDetails'], 'UINT'), 'mixerGetLineControlsA': (3, ['HMIXEROBJ', 'LPMIXERLINECONTROLSA', 'DWORD'], ['hmix', 'lpmlcA', 'fdwControls'], 'UINT'), 'mixerGetLineControlsW': (3, ['HMIXEROBJ', 'LPMIXERLINECONTROLSW', 'DWORD'], ['hmix', 'lpmlcW', 'fdwControls'], 'UINT'), 'mixerGetLineInfoW': (3, ['HMIXEROBJ', 'LPMIXERLINEW', 'DWORD'], ['hmix', 'lpmliW', 'fdwInfo'], 'UINT'), 'mixerGetLineInfoA': (3, ['HMIXEROBJ', 'LPMIXERLINEA', 'DWORD'], ['hmix', 'lpmliA', 'fdwInfo'], 'UINT'), 'mixerSetControlDetails': (3, ['HMIXEROBJ', 'LPMIXERCONTROLDETAILS', 'DWORD'], ['hmix', 'lpmcd', 'fdwDetails'], 'UINT'), 'mixerMessage': (4, ['HMIXER', 'UINT', 'DWORD_PTR', 'DWORD_PTR'], ['hmix', 'uMsg', 'dwParam1', 'dwParam2'], 'DWORD'), 'DllMain': (3, ['HINSTANCE', 'DWORD', 'LPVOID'], ['hInstDLL', 'fdwReason', 'fImpLoad'], 'BOOL'), 'auxGetNumDevs': (0, [], [], 'UINT'), 'auxGetDevCapsW': (3, ['UINT_PTR', 'LPAUXCAPSW', 'UINT'], ['uDeviceID', 'lpCaps', 'uSize'], 'UINT'), 'auxGetDevCapsA': (3, ['UINT_PTR', 'LPAUXCAPSA', 'UINT'], ['uDeviceID', 'lpCaps', 'uSize'], 'UINT'), 'auxGetVolume': (2, ['UINT', 'DWORD*'], ['uDeviceID', 'lpdwVolume'], 'UINT'), 'auxSetVolume': (2, ['UINT', 'DWORD'], ['uDeviceID', 'dwVolume'], 'UINT'), 'auxOutMessage': (4, ['UINT', 'UINT', 'DWORD_PTR', 'DWORD_PTR'], ['uDeviceID', 'uMessage', 'dw1', 'dw2'], 'UINT'), 'midiOutGetNumDevs': (0, [], [], 'UINT'), 'midiOutGetDevCapsW': (3, ['UINT_PTR', 'LPMIDIOUTCAPSW', 'UINT'], ['uDeviceID', 'lpCaps', 'uSize'], 'UINT'), 'midiOutGetDevCapsA': (3, ['UINT_PTR', 'LPMIDIOUTCAPSA', 'UINT'], ['uDeviceID', 'lpCaps', 'uSize'], 'UINT'), 'midiOutGetErrorTextA': (3, ['UINT', 'LPSTR', 'UINT'], ['uError', 'lpText', 'uSize'], 'UINT'), 'midiOutGetErrorTextW': (3, ['UINT', 'LPWSTR', 'UINT'], ['uError', 'lpText', 'uSize'], 'UINT'), 'midiOutOpen': (5, ['LPHMIDIOUT', 'UINT', 'DWORD_PTR', 'DWORD_PTR', 'DWORD'], ['lphMidiOut', 'uDeviceID', 'dwCallback', 'dwInstance', 'dwFlags'], 'MMRESULT'), 'midiOutClose': (1, ['HMIDIOUT'], ['hMidiOut'], 'UINT'), 'midiOutPrepareHeader': (3, ['HMIDIOUT', 'MIDIHDR*', 'UINT'], ['hMidiOut', 'lpMidiOutHdr', 'uSize'], 'UINT'), 'midiOutUnprepareHeader': (3, ['HMIDIOUT', 'MIDIHDR*', 'UINT'], ['hMidiOut', 'lpMidiOutHdr', 'uSize'], 'UINT'), 'midiOutShortMsg': (2, ['HMIDIOUT', 'DWORD'], ['hMidiOut', 'dwMsg'], 'UINT'), 'midiOutLongMsg': (3, ['HMIDIOUT', 'MIDIHDR*', 'UINT'], ['hMidiOut', 'lpMidiOutHdr', 'uSize'], 'UINT'), 'midiOutReset': (1, ['HMIDIOUT'], ['hMidiOut'], 'UINT'), 'midiOutGetVolume': (2, ['HMIDIOUT', 'DWORD*'], ['hMidiOut', 'lpdwVolume'], 'UINT'), 'midiOutSetVolume': (2, ['HMIDIOUT', 'DWORD'], ['hMidiOut', 'dwVolume'], 'UINT'), 'midiOutCachePatches': (4, ['HMIDIOUT', 'UINT', 'WORD*', 'UINT'], ['hMidiOut', 'uBank', 'lpwPatchArray', 'uFlags'], 'UINT'), 'midiOutCacheDrumPatches': (4, ['HMIDIOUT', 'UINT', 'WORD*', 'UINT'], ['hMidiOut', 'uPatch', 'lpwKeyArray', 'uFlags'], 'UINT'), 'midiOutGetID': (2, ['HMIDIOUT', 'UINT*'], ['hMidiOut', 'lpuDeviceID'], 'UINT'), 'midiOutMessage': (4, ['HMIDIOUT', 'UINT', 'DWORD_PTR', 'DWORD_PTR'], ['hMidiOut', 'uMessage', 'dwParam1', 'dwParam2'], 'UINT'), 'midiInGetNumDevs': (0, [], [], 'UINT'), 'midiInGetDevCapsW': (3, ['UINT_PTR', 'LPMIDIINCAPSW', 'UINT'], ['uDeviceID', 'lpCaps', 'uSize'], 'UINT'), 'midiInGetDevCapsA': (3, ['UINT_PTR', 'LPMIDIINCAPSA', 'UINT'], ['uDeviceID', 'lpCaps', 'uSize'], 'UINT'), 'midiInOpen': (5, ['HMIDIIN*', 'UINT', 'DWORD_PTR', 'DWORD_PTR', 'DWORD'], ['lphMidiIn', 'uDeviceID', 'dwCallback', 'dwInstance', 'dwFlags'], 'MMRESULT'), 'midiInClose': (1, ['HMIDIIN'], ['hMidiIn'], 'UINT'), 'midiInPrepareHeader': (3, ['HMIDIIN', 'MIDIHDR*', 'UINT'], ['hMidiIn', 'lpMidiInHdr', 'uSize'], 'UINT'), 'midiInUnprepareHeader': (3, ['HMIDIIN', 'MIDIHDR*', 'UINT'], ['hMidiIn', 'lpMidiInHdr', 'uSize'], 'UINT'), 'midiInAddBuffer': (3, ['HMIDIIN', 'MIDIHDR*', 'UINT'], ['hMidiIn', 'lpMidiInHdr', 'uSize'], 'UINT'), 'midiInStart': (1, ['HMIDIIN'], ['hMidiIn'], 'UINT'), 'midiInStop': (1, ['HMIDIIN'], ['hMidiIn'], 'UINT'), 'midiInReset': (1, ['HMIDIIN'], ['hMidiIn'], 'UINT'), 'midiInGetID': (2, ['HMIDIIN', 'UINT*'], ['hMidiIn', 'lpuDeviceID'], 'UINT'), 'midiInMessage': (4, ['HMIDIIN', 'UINT', 'DWORD_PTR', 'DWORD_PTR'], ['hMidiIn', 'uMessage', 'dwParam1', 'dwParam2'], 'UINT'), 'midiConnect': (3, ['HMIDI', 'HMIDIOUT', 'LPVOID'], ['hMidi', 'hmo', 'pReserved'], 'MMRESULT'), 'midiDisconnect': (3, ['HMIDI', 'HMIDIOUT', 'LPVOID'], ['hMidi', 'hmo', 'pReserved'], 'MMRESULT'), 'midiStreamClose': (1, ['HMIDISTRM'], ['hMidiStrm'], 'MMRESULT'), 'midiStreamOpen': (6, ['HMIDISTRM*', 'LPUINT', 'DWORD', 'DWORD_PTR', 'DWORD_PTR', 'DWORD'], ['lphMidiStrm', 'lpuDeviceID', 'cMidi', 'dwCallback', 'dwInstance', 'fdwOpen'], 'MMRESULT'), 'midiStreamOut': (3, ['HMIDISTRM', 'LPMIDIHDR', 'UINT'], ['hMidiStrm', 'lpMidiHdr', 'cbMidiHdr'], 'MMRESULT'), 'midiStreamPause': (1, ['HMIDISTRM'], ['hMidiStrm'], 'MMRESULT'), 'midiStreamPosition': (3, ['HMIDISTRM', 'LPMMTIME', 'UINT'], ['hMidiStrm', 'lpMMT', 'cbmmt'], 'MMRESULT'), 'midiStreamProperty': (3, ['HMIDISTRM', 'LPBYTE', 'DWORD'], ['hMidiStrm', 'lpPropData', 'dwProperty'], 'MMRESULT'), 'midiStreamRestart': (1, ['HMIDISTRM'], ['hMidiStrm'], 'MMRESULT'), 'midiStreamStop': (1, ['HMIDISTRM'], ['hMidiStrm'], 'MMRESULT'), 'mmTaskRun': (0, [], [], 'DWORD')}


dictRS_winmm =  {}


dict4_ws2_32 =  {'WSAAsyncGetHostByAddr': (7, ['HWND', 'UINT', 'LPCSTR', 'INT', 'INT', 'LPSTR', 'INT'], ['hWnd', 'uMsg', 'addr', 'len', 'type', 'sbuf', 'buflen'], 'HANDLE'), 'WSAAsyncGetHostByName': (5, ['HWND', 'UINT', 'LPCSTR', 'LPSTR', 'INT'], ['hWnd', 'uMsg', 'name', 'sbuf', 'buflen'], 'HANDLE'), 'WSAAsyncGetProtoByName': (5, ['HWND', 'UINT', 'LPCSTR', 'LPSTR', 'INT'], ['hWnd', 'uMsg', 'name', 'sbuf', 'buflen'], 'HANDLE'), 'WSAAsyncGetProtoByNumber': (5, ['HWND', 'UINT', 'INT', 'LPSTR', 'INT'], ['hWnd', 'uMsg', 'number', 'sbuf', 'buflen'], 'HANDLE'), 'WSAAsyncGetServByName': (6, ['HWND', 'UINT', 'LPCSTR', 'LPCSTR', 'LPSTR', 'INT'], ['hWnd', 'uMsg', 'name', 'proto', 'sbuf', 'buflen'], 'HANDLE'), 'WSAAsyncGetServByPort': (6, ['HWND', 'UINT', 'INT', 'LPCSTR', 'LPSTR', 'INT'], ['hWnd', 'uMsg', 'port', 'proto', 'sbuf', 'buflen'], 'HANDLE'), 'WSACancelAsyncRequest': (1, ['HANDLE'], ['hAsyncTaskHandle'], 'INT'), 'WSApSetPostRoutine': (1, ['LPWPUPOSTMESSAGE'], ['lpPostRoutine'], 'INT'), 'WPUCompleteOverlappedRequest': (5, ['SOCKET', 'LPWSAOVERLAPPED', 'DWORD', 'DWORD', 'LPINT'], ['s', 'overlapped', 'error', 'transferred', 'errcode'], 'WSAEVENT'), 'getaddrinfo': (4, ['const char *', 'const char *', 'const struct addrinfo *', 'struct addrinfo *'], ['node', 'service', 'hints', '*info'], 'int'), 'GetAddrInfoExW': (10, ['const WCHAR *', 'const WCHAR *', 'DWORD', 'GUID *', 'const ADDRINFOEXW *', 'ADDRINFOEXW *', 'struct timeval *', 'OVERLAPPED *', 'LPLOOKUPSERVICE_COMPLETION_ROUTINE', 'HANDLE *'], ['name', 'servname', 'namespace', 'namespace_id', 'hints', '*result', 'timeout', 'overlapped', 'completion_routine', 'handle'], 'int'), 'GetAddrInfoExOverlappedResult': (1, ['OVERLAPPED *'], ['overlapped'], 'int'), 'GetAddrInfoExCancel': (1, ['HANDLE *'], ['handle'], 'int'), 'GetAddrInfoW': (4, ['const WCHAR *', 'const WCHAR *', 'const ADDRINFOW *', 'ADDRINFOW *'], ['nodename', 'servname', 'hints', '*res'], 'int'), 'freeaddrinfo': (1, ['struct addrinfo *'], ['info'], 'void'), 'FreeAddrInfoW': (1, ['ADDRINFOW *'], ['ai'], 'void'), 'FreeAddrInfoEx': (1, ['ADDRINFOEXA *'], ['ai'], 'void'), 'FreeAddrInfoExW': (1, ['ADDRINFOEXW *'], ['ai'], 'void'), 'getnameinfo': (7, ['const SOCKADDR *', 'socklen_t', 'char *', 'DWORD', 'char *', 'DWORD', 'int'], ['addr', 'addr_len', 'host', 'host_len', 'serv', 'serv_len', 'flags'], 'int'), 'GetNameInfoW': (7, ['const SOCKADDR *', 'socklen_t', 'WCHAR *', 'DWORD', 'WCHAR *', 'DWORD', 'int'], ['addr', 'addr_len', 'host', 'host_len', 'serv', 'serv_len', 'flags'], 'int'), 'gethostname': (2, ['char *', 'int'], ['name', 'namelen'], 'int'), 'GetHostNameW': (2, ['WCHAR *', 'int'], ['name', 'namelen'], 'int'), 'InetPtonW': (3, ['int', 'const WCHAR *', 'void *'], ['family', 'addr', 'buffer'], 'int'), 'WSAStringToAddressA': (5, ['char *', 'int', 'WSAPROTOCOL_INFOA *', 'struct sockaddr *', 'int *'], ['string', 'family', 'protocol_info', 'addr', 'addr_len'], 'int'), 'WSAStringToAddressW': (5, ['WCHAR *', 'int', 'WSAPROTOCOL_INFOW *', 'struct sockaddr *', 'int *'], ['string', 'family', 'protocol_info', 'addr', 'addr_len'], 'int'), 'WSAAddressToStringA': (5, ['struct sockaddr *', 'DWORD', 'WSAPROTOCOL_INFOA *', 'char *', 'DWORD *'], ['addr', 'addr_len', 'info', 'string', 'string_len'], 'int'), 'WSAAddressToStringW': (5, ['struct sockaddr *', 'DWORD', 'WSAPROTOCOL_INFOW *', 'WCHAR *', 'DWORD *'], ['addr', 'addr_len', 'info', 'string', 'string_len'], 'int'), 'WSAHtonl': (3, ['SOCKET', 'u_long', 'u_long *'], ['s', 'hostlong', 'netlong'], 'int'), 'WSAHtons': (3, ['SOCKET', 'u_short', 'u_short *'], ['s', 'hostshort', 'netshort'], 'int'), 'WSANtohl': (3, ['SOCKET', 'u_long', 'u_long *'], ['s', 'netlong', 'hostlong'], 'int'), 'WSANtohs': (3, ['SOCKET', 'u_short', 'u_short *'], ['s', 'netshort', 'hostshort'], 'int'), 'WSAInstallServiceClassA': (1, ['WSASERVICECLASSINFOA *'], ['info'], 'int'), 'WSAInstallServiceClassW': (1, ['WSASERVICECLASSINFOW *'], ['info'], 'int'), 'WSARemoveServiceClass': (1, ['GUID *'], ['info'], 'int'), 'WSAGetServiceClassInfoA': (4, ['GUID *', 'GUID *', 'DWORD *', 'WSASERVICECLASSINFOA *'], ['provider', 'service', 'len', 'info'], 'int'), 'WSAGetServiceClassInfoW': (4, ['GUID *', 'GUID *', 'DWORD *', 'WSASERVICECLASSINFOW *'], ['provider', 'service', 'len', 'info'], 'int'), 'WSAGetServiceClassNameByClassIdA': (3, ['GUID *', 'char *', 'DWORD *'], ['class', 'service', 'len'], 'int'), 'WSAGetServiceClassNameByClassIdW': (3, ['GUID *', 'WCHAR *', 'DWORD *'], ['class', 'service', 'len'], 'int'), 'WSALookupServiceBeginA': (3, ['WSAQUERYSETA *', 'DWORD', 'HANDLE *'], ['query', 'flags', 'lookup'], 'int'), 'WSALookupServiceBeginW': (3, ['WSAQUERYSETW *', 'DWORD', 'HANDLE *'], ['query', 'flags', 'lookup'], 'int'), 'WSALookupServiceEnd': (1, ['HANDLE'], ['lookup'], 'int'), 'WSALookupServiceNextA': (4, ['HANDLE', 'DWORD', 'DWORD *', 'WSAQUERYSETA *'], ['lookup', 'flags', 'len', 'results'], 'int'), 'WSALookupServiceNextW': (4, ['HANDLE', 'DWORD', 'DWORD *', 'WSAQUERYSETW *'], ['lookup', 'flags', 'len', 'results'], 'int'), 'WSASetServiceA': (3, ['WSAQUERYSETA *', 'WSAESETSERVICEOP', 'DWORD'], ['query', 'operation', 'flags'], 'int'), 'WSASetServiceW': (3, ['WSAQUERYSETW *', 'WSAESETSERVICEOP', 'DWORD'], ['query', 'operation', 'flags'], 'int'), 'WSAEnumNameSpaceProvidersA': (2, ['DWORD *', 'WSANAMESPACE_INFOA *'], ['len', 'buffer'], 'int'), 'WSAEnumNameSpaceProvidersW': (2, ['DWORD *', 'WSANAMESPACE_INFOW *'], ['len', 'buffer'], 'int'), 'WSAProviderConfigChange': (3, ['HANDLE *', 'OVERLAPPED *', 'LPWSAOVERLAPPED_COMPLETION_ROUTINE'], ['handle', 'overlapped', 'completion'], 'int'), 'WSANSPIoctl': (8, ['HANDLE', 'DWORD', 'void *', 'DWORD', 'void *', 'DWORD', 'DWORD *', 'WSACOMPLETION *'], ['lookup', 'code', 'in_buffer', 'in_size', 'out_buffer', 'out_size', 'ret_size', 'completion'], 'int'), 'WSCEnableNSProvider': (2, ['GUID *', 'BOOL'], ['provider', 'enable'], 'int'), 'WSCGetProviderInfo': (6, ['GUID *', 'WSC_PROVIDER_INFO_TYPE', 'BYTE *', 'size_t *', 'DWORD', 'int *'], ['provider', 'info_type', 'info', 'len', 'flags', 'errcode'], 'int'), 'WSCGetProviderPath': (4, ['GUID *', 'WCHAR *', 'int *', 'int *'], ['provider', 'path', 'len', 'errcode'], 'int'), 'WSCInstallNameSpace': (5, ['WCHAR *', 'WCHAR *', 'DWORD', 'DWORD', 'GUID *'], ['identifier', 'path', 'namespace', 'version', 'provider'], 'int'), 'WSCUnInstallNameSpace': (1, ['GUID *'], ['provider'], 'int'), 'WSCWriteProviderOrder': (2, ['DWORD *', 'DWORD'], ['entry', 'number'], 'int'), 'WSCInstallProvider': (5, ['GUID *', 'const WCHAR *', 'WSAPROTOCOL_INFOW *', 'DWORD', 'int *'], ['provider', 'path', 'protocol_info', 'count', 'err'], 'int'), 'WSCDeinstallProvider': (2, ['GUID *', 'int *'], ['provider', 'err'], 'int'), 'WSCSetApplicationCategory': (7, ['const WCHAR *', 'DWORD', 'const WCHAR *', 'DWORD', 'DWORD', 'DWORD *', 'int *'], ['path', 'len', 'extra', 'extralen', 'lspcat', 'prev_lspcat', 'err'], 'int'), 'WSCEnumProtocols': (4, ['int *', 'WSAPROTOCOL_INFOW *', 'DWORD *', 'int *'], ['protocols', 'info', 'len', 'err'], 'int'), 'DllMain': (3, ['HINSTANCE', 'DWORD', 'void *'], ['instance', 'reason', 'reserved'], 'BOOL'), 'WSAStartup': (2, ['WORD', 'LPWSADATA'], ['wVersionRequested', 'lpWSAData'], 'int'), 'WSACleanup': (0, [], [], 'INT'), 'WSAGetLastError': (0, [], [], 'INT'), 'WSASetLastError': (1, ['INT'], ['iError'], 'void'), 'accept': (3, ['SOCKET', 'struct sockaddr *', 'int *'], ['s', 'addr', 'len'], 'SOCKET'), 'WSASendMsg': (6, ['SOCKET', 'LPWSAMSG', 'DWORD', 'LPDWORD', 'LPWSAOVERLAPPED', 'LPWSAOVERLAPPED_COMPLETION_ROUTINE'], ['s', 'msg', 'dwFlags', 'lpNumberOfBytesSent', 'lpOverlapped', 'lpCompletionRoutine'], 'int'), 'bind': (3, ['SOCKET', 'const struct sockaddr *', 'int'], ['s', 'addr', 'len'], 'int'), 'closesocket': (1, ['SOCKET'], ['s'], 'int'), 'connect': (3, ['SOCKET', 'const struct sockaddr *', 'int'], ['s', 'addr', 'len'], 'int'), 'WSAConnect': (7, ['SOCKET', 'const struct sockaddr *', 'int', 'LPWSABUF', 'LPWSABUF', 'LPQOS', 'LPQOS'], ['s', 'name', 'namelen', 'lpCallerData', 'lpCalleeData', 'lpSQOS', 'lpGQOS'], 'int'), 'getpeername': (3, ['SOCKET', 'struct sockaddr *', 'int *'], ['s', 'addr', 'len'], 'int'), 'getsockname': (3, ['SOCKET', 'struct sockaddr *', 'int *'], ['s', 'addr', 'len'], 'int'), 'getsockopt': (5, ['SOCKET', 'int', 'int', 'char *', 'int *'], ['s', 'level', 'optname', 'optval', 'optlen'], 'int'), 'WSAIoctl': (9, ['SOCKET', 'DWORD', 'LPVOID', 'DWORD', 'LPVOID', 'DWORD', 'LPDWORD', 'LPWSAOVERLAPPED', 'LPWSAOVERLAPPED_COMPLETION_ROUTINE'], ['s', 'code', 'in_buff', 'in_size', 'out_buff', 'out_size', 'ret_size', 'overlapped', 'completion'], 'INT'), 'ioctlsocket': (3, ['SOCKET', 'LONG', 'u_long *'], ['s', 'cmd', 'argp'], 'int'), 'listen': (2, ['SOCKET', 'int'], ['s', 'backlog'], 'int'), 'recv': (4, ['SOCKET', 'char *', 'int', 'int'], ['s', 'buf', 'len', 'flags'], 'int'), 'recvfrom': (6, ['SOCKET', 'char *', 'int', 'int', 'struct sockaddr *', 'int *'], ['s', 'buf', 'len', 'flags', 'from', 'fromlen'], 'int'), 'select': (5, ['int', 'fd_set *', 'fd_set *', 'fd_set *', 'const struct timeval *'], ['count', 'read_ptr', 'write_ptr', 'except_ptr', 'timeout'], 'int'), 'WSAPoll': (3, ['WSAPOLLFD *', 'ULONG', 'int'], ['fds', 'count', 'timeout'], 'int'), 'send': (4, ['SOCKET', 'const char *', 'int', 'int'], ['s', 'buf', 'len', 'flags'], 'int'), 'WSASend': (7, ['SOCKET', 'LPWSABUF', 'DWORD', 'LPDWORD', 'DWORD', 'LPWSAOVERLAPPED', 'LPWSAOVERLAPPED_COMPLETION_ROUTINE'], ['s', 'lpBuffers', 'dwBufferCount', 'lpNumberOfBytesSent', 'dwFlags', 'lpOverlapped', 'lpCompletionRoutine'], 'INT'), 'WSASendDisconnect': (2, ['SOCKET', 'LPWSABUF'], ['s', 'lpBuffers'], 'INT'), 'WSASendTo': (9, ['SOCKET', 'LPWSABUF', 'DWORD', 'LPDWORD', 'DWORD', 'const struct sockaddr *', 'int', 'LPWSAOVERLAPPED', 'LPWSAOVERLAPPED_COMPLETION_ROUTINE'], ['s', 'lpBuffers', 'dwBufferCount', 'lpNumberOfBytesSent', 'dwFlags', 'to', 'tolen', 'lpOverlapped', 'lpCompletionRoutine'], 'INT'), 'sendto': (6, ['SOCKET', 'const char *', 'int', 'int', 'const struct sockaddr *', 'int'], ['s', 'buf', 'len', 'flags', 'to', 'tolen'], 'int'), 'setsockopt': (5, ['SOCKET', 'int', 'int', 'const char *', 'int'], ['s', 'level', 'optname', 'optval', 'optlen'], 'int'), 'shutdown': (2, ['SOCKET', 'int'], ['s', 'how'], 'int'), 'socket': (3, ['int', 'int', 'int'], ['af', 'type', 'protocol'], 'SOCKET'), 'WSAEnumNetworkEvents': (3, ['SOCKET', 'WSAEVENT', 'WSANETWORKEVENTS *'], ['s', 'event', 'ret_events'], 'int'), 'WSAEventSelect': (3, ['SOCKET', 'WSAEVENT', 'LONG'], ['s', 'event', 'mask'], 'int'), 'WSAGetOverlappedResult': (5, ['SOCKET', 'LPWSAOVERLAPPED', 'LPDWORD', 'BOOL', 'LPDWORD'], ['s', 'lpOverlapped', 'lpcbTransfer', 'fWait', 'lpdwFlags'], 'BOOL'), 'WSAAsyncSelect': (4, ['SOCKET', 'HWND', 'UINT', 'LONG'], ['s', 'window', 'message', 'mask'], 'int'), 'WSACreateEvent': (0, [], [], 'WSAEVENT'), 'WSACloseEvent': (1, ['WSAEVENT'], ['event'], 'BOOL'), 'WSASocketA': (6, ['int', 'int', 'int', 'LPWSAPROTOCOL_INFOA', 'GROUP', 'DWORD'], ['af', 'type', 'protocol', 'lpProtocolInfo', 'g', 'dwFlags'], 'SOCKET'), 'WSASocketW': (6, ['int', 'int', 'int', 'LPWSAPROTOCOL_INFOW', 'GROUP', 'DWORD'], ['af', 'type', 'protocol', 'lpProtocolInfo', 'g', 'flags'], 'SOCKET'), 'WSAJoinLeaf': (8, ['SOCKET', 'const struct sockaddr *', 'int', 'WSABUF *', 'WSABUF *', 'QOS *', 'QOS *', 'DWORD'], ['s', 'addr', 'addrlen', 'caller_data', 'callee_data', 'socket_qos', 'group_qos', 'flags'], 'SOCKET'), 'WSAIsBlocking': (0, [], [], 'BOOL'), 'WSACancelBlockingCall': (0, [], [], 'INT'), 'WSASetBlockingHook': (1, ['FARPROC'], ['lpBlockFunc'], 'FARPROC'), 'WSAUnhookBlockingHook': (0, [], [], 'INT'), 'WSARecv': (7, ['SOCKET', 'LPWSABUF', 'DWORD', 'LPDWORD', 'LPDWORD', 'LPWSAOVERLAPPED', 'LPWSAOVERLAPPED_COMPLETION_ROUTINE'], ['s', 'lpBuffers', 'dwBufferCount', 'NumberOfBytesReceived', 'lpFlags', 'lpOverlapped', 'lpCompletionRoutine'], 'int'), 'WSARecvFrom': (9, ['SOCKET', 'LPWSABUF', 'DWORD', 'DWORD *', 'DWORD *', 'struct sockaddr *', 'LPINT', 'LPWSAOVERLAPPED', 'LPWSAOVERLAPPED_COMPLETION_ROUTINE'], ['s', 'lpBuffers', 'dwBufferCount', 'lpNumberOfBytesRecvd', 'lpFlags', 'lpFrom', 'lpFromlen', 'lpOverlapped', 'lpCompletionRoutine'], 'INT'), 'WSAAccept': (5, ['SOCKET', 'struct sockaddr *', 'int *', 'LPCONDITIONPROC', 'DWORD_PTR'], ['s', 'addr', 'addrlen', 'callback', 'context'], 'SOCKET'), 'WSADuplicateSocketA': (3, ['SOCKET', 'DWORD', 'LPWSAPROTOCOL_INFOA'], ['s', 'dwProcessId', 'lpProtocolInfo'], 'int'), 'WSADuplicateSocketW': (3, ['SOCKET', 'DWORD', 'LPWSAPROTOCOL_INFOW'], ['s', 'dwProcessId', 'lpProtocolInfo'], 'int'), 'WSAGetQOSByName': (3, ['SOCKET', 'LPWSABUF', 'LPQOS'], ['s', 'lpQOSName', 'lpQOS'], 'BOOL'), 'WSARecvDisconnect': (2, ['SOCKET', 'LPWSABUF'], ['s', 'disconnectdata'], 'INT'), 'WSAEnumProtocolsA': (3, ['int *', 'WSAPROTOCOL_INFOA *', 'DWORD *'], ['filter', 'protocols', 'size'], 'int'), 'WSAEnumProtocolsW': (3, ['int *', 'WSAPROTOCOL_INFOW *', 'DWORD *'], ['filter', 'protocols', 'size'], 'int')}


dictRS_ws2_32 =  {'WSAEnumProtocolsW': 'number of WSAPROTOCOL_INFO structures in buffer'}


dict4_wsock32 =  {'EnumProtocolsA': (3, ['LPINT', 'LPVOID', 'LPDWORD'], ['protocols', 'buffer', 'buflen'], 'INT'), 'EnumProtocolsW': (3, ['LPINT', 'LPVOID', 'LPDWORD'], ['protocols', 'buffer', 'buflen'], 'INT'), 'GetAddressByNameA': (10, ['DWORD', 'LPGUID', 'LPSTR', 'LPINT', 'DWORD', 'LPSERVICE_ASYNC_INFO', 'LPVOID', 'LPDWORD', 'LPSTR', 'LPDWORD'], ['dwNameSpace', 'lpServiceType', 'lpServiceName', 'lpiProtocols', 'dwResolution', 'lpServiceAsyncInfo', 'lpCsaddrBuffer', 'lpdwBufferLength', 'lpAliasBuffer', 'lpdwAliasBufferLength'], 'INT'), 'GetAddressByNameW': (10, ['DWORD', 'LPGUID', 'LPWSTR', 'LPINT', 'DWORD', 'LPSERVICE_ASYNC_INFO', 'LPVOID', 'LPDWORD', 'LPWSTR', 'LPDWORD'], ['dwNameSpace', 'lpServiceType', 'lpServiceName', 'lpiProtocols', 'dwResolution', 'lpServiceAsyncInfo', 'lpCsaddrBuffer', 'lpdwBufferLength', 'lpAliasBuffer', 'lpdwAliasBufferLength'], 'INT'), 'GetTypeByNameA': (2, ['LPSTR', 'LPGUID'], ['lpServiceName', 'lpServiceType'], 'INT'), 'GetTypeByNameW': (2, ['LPWSTR', 'LPGUID'], ['lpServiceName', 'lpServiceType'], 'INT'), 'SetServiceA': (6, ['DWORD', 'DWORD', 'DWORD', 'LPSERVICE_INFOA', 'LPSERVICE_ASYNC_INFO', 'LPDWORD'], ['dwNameSpace', 'dwOperation', 'dwFlags', 'lpServiceInfo', 'lpServiceAsyncInfo', 'lpdwStatusFlags'], 'INT'), 'SetServiceW': (6, ['DWORD', 'DWORD', 'DWORD', 'LPSERVICE_INFOW', 'LPSERVICE_ASYNC_INFO', 'LPDWORD'], ['dwNameSpace', 'dwOperation', 'dwFlags', 'lpServiceInfo', 'lpServiceAsyncInfo', 'lpdwStatusFlags'], 'INT'), 'GetServiceA': (7, ['DWORD', 'LPGUID', 'LPSTR', 'DWORD', 'LPVOID', 'LPDWORD', 'LPSERVICE_ASYNC_INFO'], ['dwNameSpace', 'lpGuid', 'lpServiceName', 'dwProperties', 'lpBuffer', 'lpdwBufferSize', 'lpServiceAsyncInfo'], 'INT'), 'GetServiceW': (7, ['DWORD', 'LPGUID', 'LPSTR', 'DWORD', 'LPVOID', 'LPDWORD', 'LPSERVICE_ASYNC_INFO'], ['dwNameSpace', 'lpGuid', 'lpServiceName', 'dwProperties', 'lpBuffer', 'lpdwBufferSize', 'lpServiceAsyncInfo'], 'INT'), 'WsControl': (6, ['DWORD', 'DWORD', 'LPVOID', 'LPDWORD', 'LPVOID', 'LPDWORD'], ['protocol', 'action', 'pRequestInfo', 'pcbRequestInfoLen', 'pResponseInfo', 'pcbResponseInfoLen'], 'DWORD'), 'WSARecvEx': (4, ['SOCKET', 'char *', 'INT', 'INT *'], ['s', 'buf', 'len', 'flags'], 'INT')}


dictRS_wsock32 =  {'GetTypeByNameA': '0', 'SetServiceA': '0', 'GetServiceA': '0'}